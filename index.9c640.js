System.register("chunks:///_virtual/KimCuongLineSelectionView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './KimCuongGameView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, Toggle, _decorator, CommonPopup, KimCuongGameView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Toggle = module.Toggle;
      _decorator = module._decorator;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      KimCuongGameView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "00873bzi0BEMIg/Er6EtIol", "KimCuongLineSelectionView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let KimCuongLineSelectionView = exports('default', (_dec = ccclass('KimCuongLineSelectionView'), _dec2 = property(Node), _dec3 = property(Toggle), _dec4 = property(Toggle), _dec5 = property(Toggle), _dec6 = property(Toggle), _dec(_class = (_class2 = (_temp = class KimCuongLineSelectionView extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "line_selection_node", _descriptor, this);

          _initializerDefineProperty(this, "btn_chan", _descriptor2, this);

          _initializerDefineProperty(this, "btn_le", _descriptor3, this);

          _initializerDefineProperty(this, "btn_tatca", _descriptor4, this);

          _initializerDefineProperty(this, "btn_huy", _descriptor5, this);

          _defineProperty(this, "line_toggle", []);
        }

        onLoad() {
          super.onLoad();
          this.line_toggle = this.line_selection_node.getComponentsInChildren(Toggle);
          this.line_toggle.forEach((tog, ind) => {
            tog.node.on("toggle", () => {
              this.updateLineInGameView();
            });
            this.btn_chan.isChecked = false;
            this.btn_le.isChecked = false;
            this.btn_tatca.isChecked = false;
            this.btn_huy.isChecked = false;
          });
          this.btn_chan.node.on("toggle", () => {
            this.line_toggle.forEach((tog, ind) => {
              tog.isChecked = ind % 2 == 0;
            });
            this.updateLineInGameView();
          });
          this.btn_le.node.on("toggle", () => {
            this.line_toggle.forEach((tog, ind) => {
              tog.isChecked = ind % 2 != 0;
            });
            this.updateLineInGameView();
          });
          this.btn_tatca.node.on("toggle", () => {
            this.line_toggle.forEach((tog, ind) => {
              tog.isChecked = false;
            });
            this.updateLineInGameView();
          });
          this.btn_huy.node.on("toggle", () => {
            this.line_toggle.forEach((tog, ind) => {
              tog.isChecked = true;
            });
            this.updateLineInGameView();
          });
        }

        updateLineInGameView() {
          let lines = [];
          this.line_toggle.forEach((tog, index) => {
            tog.target.active = !tog.isChecked;
            if (!tog.isChecked) lines.push(index);
          });
          KimCuongGameView.getInstance().setLines(lines);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "line_selection_node", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_chan", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_le", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_tatca", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btn_huy", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class)); //  * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
      //  */
      // // // Learn TypeScript:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // // Learn Attribute:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // // Learn life-cycle callbacks:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // // 
      // // import { GameCard } from "../../Utils/MauBinh_CardLib";
      // // import { StringUtils } from "../../Utils/StringUtils";
      // // import BlinkCmp from "../TaiXiu/BlinkCmp";
      // // import TaiXiuPopupCmp from "../TaiXiu/TaiXiuPopupCmp";
      // // import KimCuongGameView from "./KimCuongGameView";
      // // 
      // // const { ccclass, property } = cc._decorator;
      // // 
      // // @ccclass
      // // export default class KimCuongLineSelectionView extends TaiXiuPopupCmp {
      // //     @property(cc.Button)
      // //     private btn_close: cc.Button = null;
      // // 
      // //     @property(cc.Node)
      // //     private line_selection_node: cc.Node = null;
      // // 
      // //     @property(cc.Toggle)
      // //     private btn_chan: cc.Toggle = null;
      // // 
      // //     @property(cc.Toggle)
      // //     private btn_le: cc.Toggle = null;
      // // 
      // //     @property(cc.Toggle)
      // //     private btn_tatca: cc.Toggle = null;
      // // 
      // //     @property(cc.Toggle)
      // //     private btn_huy: cc.Toggle = null;
      // // 
      // //     private line_toggle : cc.Toggle[] = []
      // // 
      // //     onLoad() {
      // //         super.onLoad();
      // // 
      // //         this.original_scale = this.node.scale;
      // // 
      // //         this.line_toggle = this.line_selection_node.getComponentsInChildren(cc.Toggle);
      // //         this.line_toggle.forEach((tog,ind) => {
      // //             tog.node.on("toggle", () => {
      // //                 this.updateLineInGameView();
      // //             });
      // // 
      // //             this.btn_chan.isChecked = false;
      // //             this.btn_le.isChecked = false;
      // //             this.btn_tatca.isChecked = false;
      // //             this.btn_huy.isChecked = false;
      // //         });
      // // 
      // //         this.btn_close.node.on("click", () => {
      // //             this.hide();
      // //         });
      // // 
      // //         this.btn_chan.node.on("toggle", () => {
      // //             this.line_toggle.forEach((tog,ind) => {
      // //                 tog.isChecked = ind % 2 == 0;
      // //             });
      // // 
      // //             this.updateLineInGameView();
      // //         });
      // // 
      // //         this.btn_le.node.on("toggle", () => {
      // //             this.line_toggle.forEach((tog,ind) => {
      // //                 tog.isChecked = ind % 2 != 0;
      // //             });
      // //             this.updateLineInGameView();
      // //         });
      // // 
      // //         this.btn_tatca.node.on("toggle", () => {
      // //             this.line_toggle.forEach((tog,ind) => {
      // //                 tog.isChecked = false;
      // //             });
      // //             this.updateLineInGameView();
      // //         });
      // // 
      // //         this.btn_huy.node.on("toggle", () => {
      // //             this.line_toggle.forEach((tog,ind) => {
      // //                 tog.isChecked = true;
      // //             });
      // //             this.updateLineInGameView();
      // //         });
      // //     }
      // // 
      // //     private updateLineInGameView() {
      // //         let lines = [];
      // //             this.line_toggle.forEach((tog,index) => {
      // //                 if(!tog.isChecked) lines.push(index);
      // //             });
      // //             KimCuongGameView.getInstance().setLines(lines);
      // //     }
      // // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CCComponentLoader.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Component, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "02d2dbtfktBLbe6ObO7J5GY", "CCComponentLoader", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CCComponentLoader = exports('default', (_dec = ccclass('CCComponentLoader'), _dec(_class = class CCComponentLoader extends Component {
        init() {}

        getPaths() {//return [];
        }

      }) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import CCSpriteFrameLoader from "./CCSpriteFrameLoader";
      // import Downloader from "./Downloader";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class CCComponentLoader extends cc.Component {
      //     init() {
      //     }
      // 
      //     getPaths() : string[]{
      //         return [];
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniPokerNoHuView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts', './BlinkCmp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, Sprite, Label, _decorator, Component, Tween, Vec3, tween, UIOpacity, StringUtils, BlinkCmp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Sprite = module.Sprite;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      BlinkCmp = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "0a562Qz3ipPrLTN2uGLq05A", "MiniPokerNoHuView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MiniPokerNoHuView = exports('default', (_dec = ccclass('MiniPokerNoHuView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Sprite), _dec5 = property(BlinkCmp), _dec6 = property(Sprite), _dec7 = property(Label), _dec(_class = (_class2 = (_temp = class MiniPokerNoHuView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "root", _descriptor, this);

          _initializerDefineProperty(this, "black_screen", _descriptor2, this);

          _initializerDefineProperty(this, "noHuMoneyBg", _descriptor3, this);

          _initializerDefineProperty(this, "glow", _descriptor4, this);

          _initializerDefineProperty(this, "finishFx", _descriptor5, this);

          _initializerDefineProperty(this, "nohu_win_amount", _descriptor6, this);

          _defineProperty(this, "win_amount_tween", null);

          _defineProperty(this, "activated_click", false);
        }

        onLoad() {
          this.black_screen.on("click", () => {
            if (!this.activated_click) return;
            this.hide();
          });
        }

        activeClick() {
          this.black_screen.active = true;
          this.activated_click = true;
        }

        show(win_amount) {
          var _this$noHuMoneyBg, _this$finishFx, _this$glow, _this$noHuMoneyBg2;

          this.root.active = true;
          this.black_screen.active = true;
          this.activated_click = false;
          Tween.stopAllByTarget((_this$noHuMoneyBg = this.noHuMoneyBg) === null || _this$noHuMoneyBg === void 0 ? void 0 : _this$noHuMoneyBg.node);
          Tween.stopAllByTarget((_this$finishFx = this.finishFx) === null || _this$finishFx === void 0 ? void 0 : _this$finishFx.node);
          Tween.stopAllByTarget((_this$glow = this.glow) === null || _this$glow === void 0 ? void 0 : _this$glow.node);
          this.win_amount_tween && this.win_amount_tween.stop();
          this.finishFx.node.setScale(new Vec3(0.2, 0.2, 0.2));
          let finishAction = tween(this.finishFx.node).sequence(tween().to(0.3, {
            scale: new Vec3(1.3, 1.3, 1.3)
          }), tween().to(0.3, {
            scale: Vec3.ONE
          }));
          finishAction.start();
          let startPos = new Vec3(this.noHuMoneyBg.node.position);
          startPos.y = -485;
          this.noHuMoneyBg.node.setPosition(startPos);
          let moveAction = tween((_this$noHuMoneyBg2 = this.noHuMoneyBg) === null || _this$noHuMoneyBg2 === void 0 ? void 0 : _this$noHuMoneyBg2.node).sequence(tween().delay(0.6), tween().to(0.3, {
            position: new Vec3(0, -260, 0)
          }));
          moveAction.start();
          this.glow.run();
          let obj = {
            a: 0
          };
          this.win_amount_tween = tween(obj).to(2, {
            a: win_amount
          }, {
            progress: (start, end, current, ratio) => {
              this.nohu_win_amount.string = StringUtils.formatNumber(Math.floor(current));
              return start + (end - start) * ratio;
            }
          }).call(() => this.nohu_win_amount.string = StringUtils.formatNumber(Math.floor(win_amount))).start();
          this.node.getComponent(UIOpacity).opacity = 255;
        }

        hide() {
          this.black_screen.active = false;
          this.activated_click = false;
          Tween.stopAllByTarget(this.node);
          this.node.getComponent(UIOpacity).opacity = 255;
          let fade = tween(this.node.getComponent(UIOpacity)).to(0.5, {
            opacity: 1
          }).call(() => {
            this.root.active = false;
          });
          fade.start();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "black_screen", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "noHuMoneyBg", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "glow", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "finishFx", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nohu_win_amount", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { GameCard } from "../../Utils/MauBinh_CardLib";
      // import { StringUtils } from "../../Utils/StringUtils";
      // import BlinkCmp from "../TaiXiu/BlinkCmp";
      // import MiniPokerGameView from "./MiniPokerGameView";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class MiniPokerNoHuView extends cc.Component {
      //     @property(cc.Node)
      //     private black_screen: cc.Node = null;
      // 
      //     @property([cc.Sprite])
      //     private spr_cards: cc.Sprite[] = [];
      // 
      //     @property([BlinkCmp])
      //     private spr_cards_blink_cpm: BlinkCmp[] = [];
      // 
      //     @property(cc.Sprite)
      //     private noHuMoneyBg: cc.Sprite = null;
      // 
      //     @property(BlinkCmp)
      //     private glow: BlinkCmp = null;
      // 
      //     @property(cc.Sprite)
      //     private finishFx: cc.Sprite = null;
      // 
      //     @property(cc.Label)
      //     private nohu_win_amount: cc.Label = null;
      // 
      //     private win_amount_tween : cc.Tween = null;
      // 
      //     private activated_click = false;
      // 
      //     onLoad() {
      //         this.black_screen.on("click", () => {
      //             if(!this.activated_click) return;
      //             this.hide();
      //         });
      //     }
      // 
      //     activeClick() {
      //         this.black_screen.active = true;
      //         this.activated_click = true;
      //     }
      // 
      //     show(cards : GameCard[], win_amount) {
      //         this.black_screen.active = true;
      //         this.activated_click = false;
      // 
      //         cards.forEach((card,index) => {
      //             this.spr_cards[index].node.opacity = 0;
      //             this.spr_cards[index].node.stopAllActions();
      // 
      //             this.spr_cards_blink_cpm[index].node.opacity = 0;
      //             this.spr_cards_blink_cpm[index].node.stopAllActions();
      // 
      //             let name = card.getResourceName();
      //             this.spr_cards[index].spriteFrame = MiniPokerGameView.getInstance().loaded_card_normal.filter(x => x.name.indexOf(name) >= 0)[0];
      //             this.spr_cards[index].node.runAction(cc.fadeIn(0.5));
      // 
      //             this.spr_cards_blink_cpm[index].run();
      //         });
      // 
      //         this.noHuMoneyBg.node.stopAllActions();
      //         this.finishFx.node.stopAllActions();
      //         this.glow.node.stopAllActions();
      //         this.win_amount_tween && this.win_amount_tween.stop();
      // 
      //         this.finishFx.node.scale = 0.2;
      //         let finishAction = cc.sequence(cc.scaleTo(0.3, 1.3), cc.scaleTo(0.3, 1.0));
      //         this.finishFx.node.runAction(finishAction);
      // 
      //         let startPos = this.noHuMoneyBg.node.position;
      //         startPos.y = -485;
      //         this.noHuMoneyBg.node.position = startPos;
      //         let moveAction = cc.sequence(cc.delayTime(0.6), cc.moveBy(0.3, cc.v2(0, 200)));
      //         this.noHuMoneyBg.node.runAction(moveAction);
      // 
      //         this.glow.run();
      // 
      //         let obj = { a: 0 };
      // 
      //         this.win_amount_tween = cc.tween(obj)
      //             .to(4, { a: win_amount }, {
      //                 progress: (start, end, current, ratio) => {
      //                     this.nohu_win_amount.string = StringUtils.formatNumber(Math.floor(current));
      //                     return start + (end - start) * ratio;
      //                 }
      //             }).call(() => this.nohu_win_amount.string = StringUtils.formatNumber(Math.floor(win_amount)))
      //             .start();
      // 
      //         this.node.opacity = 255;
      //     }
      // 
      //     hide() {
      //         this.black_screen.active = false;
      //         this.activated_click = false;
      //         this.node.stopAllActions();
      //         this.node.opacity = 255;
      // 
      //         this.node.runAction(cc.fadeOut(0.5));
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChipItem.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Label, Node, Button, _decorator, Component, StringUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Node = module.Node;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      StringUtils = module.StringUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "0c226J9uYhEibR5WaFLLVeK", "ChipItem", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ChipItem = exports('ChipItem', (_dec = ccclass('ChipItem'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property(Button), _dec(_class = (_class2 = (_temp = class ChipItem extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lbl_value", _descriptor, this);

          _initializerDefineProperty(this, "glow", _descriptor2, this);

          _initializerDefineProperty(this, "button", _descriptor3, this);

          _defineProperty(this, "value", 0);
        }

        show(val, onClick) {
          this.value = val;
          this.node.active = true;
          this.lbl_value.string = StringUtils.formatMoneyNumber(val);
          this.glow.active = false;
          this.button.node.on("click", () => {
            onClick && onClick();
          });
        }

        selected(isSelected = true) {
          this.glow.active = isSelected;
        }

        hide() {
          this.node.active = false;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbl_value", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "glow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniGameNodeController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './MiniGameNetworkHandler.ts', './NotiView.ts', './GlobalVariables.ts', './LoadingView.ts', './PopupController.ts', './LobbyViewController.ts', './MiniGamePopup.ts', './MiniPokerMessageHandler.ts', './MiniPokerGameView.ts', './TaiXiuMessageHandler.ts', './TaiXiuGameView.ts', './BigLoadingView.ts', './KimCuongMessageHandler.ts', './MiniGameNodeDragView.ts', './CCMiniGameRoot.ts', './GamePlayManager.ts', './KimCuongGameView.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Button, Node, Label, _decorator, Component, Vec3, UITransform, tween, systemEvent, log, MessageResponse, NotiView, GlobalVariables, GLOBAL_MESSAGE, LoadingView, PopupController, LobbyViewController, MiniGamePopup, MiniPokerMessageHandler, MiniPokerGameView, TaiXiuMessageHandler, TaiXiuGameView, BigLoadingView, KimCuongMessageHandler, MiniGameNodeDragView, CCMiniGameRoot, GamePlayManager, NETWORK_STATE, KimCuongGameView;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Node = module.Node;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      tween = module.tween;
      systemEvent = module.systemEvent;
      log = module.log;
    }, function (module) {
      MessageResponse = module.MessageResponse;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
      GLOBAL_MESSAGE = module.GLOBAL_MESSAGE;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      PopupController = module.PopupController;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      MiniGamePopup = module.MiniGamePopup;
    }, function (module) {
      MiniPokerMessageHandler = module.default;
    }, function (module) {
      MiniPokerGameView = module.default;
    }, function (module) {
      TaiXiuMessageHandler = module.TaiXiuMessageHandler;
    }, function (module) {
      TaiXiuGameView = module.TaiXiuGameView;
    }, function (module) {
      BigLoadingView = module.BigLoadingView;
    }, function (module) {
      KimCuongMessageHandler = module.default;
    }, function (module) {
      MiniGameNodeDragView = module.default;
    }, function (module) {
      CCMiniGameRoot = module.CCMiniGameRoot;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
      NETWORK_STATE = module.NETWORK_STATE;
    }, function (module) {
      KimCuongGameView = module.default;
    }],
    execute: function () {
      exports('DOWNLOAD_STATE', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _class3, _temp;

      cclegacy._RF.push({}, "0e1849VDNhBQormv1Bt2frU", "MiniGameNodeController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let DOWNLOAD_STATE;

      (function (DOWNLOAD_STATE) {
        DOWNLOAD_STATE[DOWNLOAD_STATE["UNDOWNLOADED"] = 0] = "UNDOWNLOADED";
        DOWNLOAD_STATE[DOWNLOAD_STATE["DOWNLOADING"] = 1] = "DOWNLOADING";
        DOWNLOAD_STATE[DOWNLOAD_STATE["DOWNLOADED"] = 2] = "DOWNLOADED";
        DOWNLOAD_STATE[DOWNLOAD_STATE["CACHED"] = 3] = "CACHED";
      })(DOWNLOAD_STATE || (DOWNLOAD_STATE = exports('DOWNLOAD_STATE', {})));

      let MiniGameNodeController = exports('default', (_dec = ccclass('MiniGameNodeController'), _dec2 = property(Button), _dec3 = property(Button), _dec4 = property(MiniGamePopup), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Label), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Label), _dec12 = property(Node), _dec13 = property(Node), _dec14 = property([Node]), _dec15 = property(Button), _dec16 = property(Button), _dec17 = property(Button), _dec18 = property(Node), _dec(_class = (_class2 = (_temp = _class3 = class MiniGameNodeController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "btn_open", _descriptor, this);

          _initializerDefineProperty(this, "btn_close", _descriptor2, this);

          _initializerDefineProperty(this, "opened_node", _descriptor3, this);

          _initializerDefineProperty(this, "closed_node", _descriptor4, this);

          _initializerDefineProperty(this, "time_in_closed_node", _descriptor5, this);

          _initializerDefineProperty(this, "txt_time_in_closed_node", _descriptor6, this);

          _initializerDefineProperty(this, "tai_in_closed_node", _descriptor7, this);

          _initializerDefineProperty(this, "xiu_in_closed_node", _descriptor8, this);

          _initializerDefineProperty(this, "time_in_opened_node", _descriptor9, this);

          _initializerDefineProperty(this, "txt_time_in_opened_node", _descriptor10, this);

          _initializerDefineProperty(this, "tai_in_opened_node", _descriptor11, this);

          _initializerDefineProperty(this, "xiu_in_opened_node", _descriptor12, this);

          _initializerDefineProperty(this, "minigameviews", _descriptor13, this);

          _initializerDefineProperty(this, "btn_game_tai_xiu", _descriptor14, this);

          _initializerDefineProperty(this, "btn_game_mini_poker", _descriptor15, this);

          _initializerDefineProperty(this, "btn_game_kimcuong", _descriptor16, this);

          _initializerDefineProperty(this, "mini_game_node", _descriptor17, this);

          _defineProperty(this, "onMiniGameReceivedMsgCb", null);

          _defineProperty(this, "mini_game_view_stack", []);

          _defineProperty(this, "time_in_closed_node_origin_pos", null);

          _defineProperty(this, "result_in_closed_node_origin_pos", null);
        }

        showMiniGame(gameID) {
          if (GamePlayManager.STATE == NETWORK_STATE.UNLOGGED_IN) {
            var _PopupController$getI;

            (_PopupController$getI = PopupController.getInstance()) === null || _PopupController$getI === void 0 ? void 0 : _PopupController$getI.showLoginPopup();
            return;
          }

          switch (gameID) {
            case GlobalVariables.TAIXIU:
              {
                let showed = this.minigameviews[0].getComponent(TaiXiuGameView).show();

                if (showed) {
                  this.close();
                }

                break;
              }

            case GlobalVariables.MINIPOKER:
              {
                let showed = this.minigameviews[1].getComponent(MiniPokerGameView).show();

                if (showed) {
                  this.close();
                }

                break;
              }

            case GlobalVariables.TRUNGPS:
              {
                let showed = this.minigameviews[2].getComponent(KimCuongGameView).show();

                if (showed) {
                  this.close();
                }

                break;
              }
          }
        }

        hideMiniGame(gameID) {
          switch (gameID) {
            case GlobalVariables.TAIXIU:
              {
                var _this$minigameviews$;

                (_this$minigameviews$ = this.minigameviews[0].getComponent(TaiXiuGameView)) === null || _this$minigameviews$ === void 0 ? void 0 : _this$minigameviews$.hide();
                break;
              }

            case GlobalVariables.MINIPOKER:
              {
                var _this$minigameviews$2;

                (_this$minigameviews$2 = this.minigameviews[1].getComponent(MiniPokerGameView)) === null || _this$minigameviews$2 === void 0 ? void 0 : _this$minigameviews$2.hide();
                break;
              }

            case GlobalVariables.TRUNGPS:
              {
                var _this$minigameviews$3;

                (_this$minigameviews$3 = this.minigameviews[2].getComponent(KimCuongGameView)) === null || _this$minigameviews$3 === void 0 ? void 0 : _this$minigameviews$3.hide();
                break;
              }
          }
        }

        isDownloading() {//return MiniPokerGameView.getInstance().getDownloadState() == DOWNLOAD_STATE.DOWNLOADING ||
          //TrenDuoiGameView.getInstance().getDownloadState() == DOWNLOAD_STATE.DOWNLOADING ||
          //KimCuongGameView.getInstance().getDownloadState() == DOWNLOAD_STATE.DOWNLOADING ||
          //DragonBallGameView.getInstance().getDownloadState() == DOWNLOAD_STATE.DOWNLOADING;
        }

        onLoad() {
          var _this$btn_close, _this$btn_game_tai_xi, _this$btn_game_mini_p, _this$btn_game_kimcuo, _this$time_in_closed_, _this$tai_in_closed_n, _this$tai_in_closed_n2;

          MiniGameNodeController.instance = this;

          MiniGameNodeDragView.onClick = () => {
            this.open();
          };

          (_this$btn_close = this.btn_close) === null || _this$btn_close === void 0 ? void 0 : _this$btn_close.node.on("click", () => {
            this.close();
          });
          (_this$btn_game_tai_xi = this.btn_game_tai_xiu) === null || _this$btn_game_tai_xi === void 0 ? void 0 : _this$btn_game_tai_xi.node.on("click", () => {
            let showed = this.minigameviews[0].getComponent(TaiXiuGameView).show();

            if (showed) {
              this.close();
            }
          });
          (_this$btn_game_mini_p = this.btn_game_mini_poker) === null || _this$btn_game_mini_p === void 0 ? void 0 : _this$btn_game_mini_p.node.on("click", () => {
            let showed = this.minigameviews[1].getComponent(MiniPokerGameView).show();

            if (showed) {
              this.close();
            }
          });
          (_this$btn_game_kimcuo = this.btn_game_kimcuong) === null || _this$btn_game_kimcuo === void 0 ? void 0 : _this$btn_game_kimcuo.node.on("click", () => {
            let showed = this.minigameviews[2].getComponent(KimCuongGameView).show();

            if (showed) {
              this.close();
            }
          });
          let pos = new Vec3(this.closed_node.getPosition());
          pos.y = CCMiniGameRoot.WIN_SIZE_HEIGHT / 4;
          pos.x = CCMiniGameRoot.WIN_SIZE_WIDTH / 2 - this.closed_node.getComponent(UITransform).contentSize.width / 2;
          this.closed_node.setPosition(pos);
          this.time_in_closed_node_origin_pos = (_this$time_in_closed_ = this.time_in_closed_node) === null || _this$time_in_closed_ === void 0 ? void 0 : _this$time_in_closed_.getPosition();
          this.result_in_closed_node_origin_pos = (_this$tai_in_closed_n = this.tai_in_closed_node) === null || _this$tai_in_closed_n === void 0 ? void 0 : (_this$tai_in_closed_n2 = _this$tai_in_closed_n.parent) === null || _this$tai_in_closed_n2 === void 0 ? void 0 : _this$tai_in_closed_n2.getPosition();
        }

        adjustPosition(gameID) {
          switch (gameID) {
            case GlobalVariables.LOBBY:
              {
                let pos = new Vec3(this.closed_node.getPosition());
                pos.y = CCMiniGameRoot.WIN_SIZE_HEIGHT / 4;
                pos.x = CCMiniGameRoot.WIN_SIZE_WIDTH / 2 - this.closed_node.getComponent(UITransform).contentSize.width / 2;
                this.closed_node.setPosition(pos);
                break;
              }

            case GlobalVariables.BAU_CUA_FULL:
              {
                let pos = new Vec3(this.closed_node.getPosition());
                pos.y = CCMiniGameRoot.WIN_SIZE_HEIGHT / 2 - this.closed_node.getComponent(UITransform).contentSize.height / 2;
                pos.x = CCMiniGameRoot.WIN_SIZE_WIDTH / 5;
                this.closed_node.setPosition(pos);
                break;
              }

            case GlobalVariables.TIENLEN:
              {
                let pos = new Vec3(this.closed_node.getPosition());
                pos.y = CCMiniGameRoot.WIN_SIZE_HEIGHT / 2 - this.closed_node.getComponent(UITransform).contentSize.height / 2;
                pos.x = CCMiniGameRoot.WIN_SIZE_WIDTH / 2 - 3 * (this.closed_node.getComponent(UITransform).contentSize.width / 2);
                this.closed_node.setPosition(pos);
                break;
              }
          }
        }

        onDestroy() {
          MiniGameNodeController.instance = null;
        }

        start() {
          this.onMiniGameReceivedMsgCb = event => {
            this.handleMiniGameMessage(event.data);
          };
        }

        update(dt) {
          if (this.closed_node.getPosition().x < 0) {
            let offsetY = 0;

            if (this.closed_node.getPosition().y < 0) {
              offsetY = 0;
            } else {
              offsetY = -15;
            }

            let newTimePos = new Vec3(this.time_in_closed_node_origin_pos.x + 90, this.time_in_closed_node_origin_pos.y, 0);
            this.time_in_closed_node.setPosition(newTimePos);
            let newResultPos = new Vec3(this.result_in_closed_node_origin_pos.x + 90, this.result_in_closed_node_origin_pos.y + offsetY, 0);
            this.tai_in_closed_node.parent.setPosition(newResultPos);
          } else {
            let offsetY = 0;

            if (this.closed_node.getPosition().y < 0) {
              offsetY = 0;
            } else {
              offsetY = -15;
            }

            let newTimePos = new Vec3(this.time_in_closed_node_origin_pos.x, this.time_in_closed_node_origin_pos.y, 0);
            this.time_in_closed_node.setPosition(newTimePos);
            let newResultPos = new Vec3(this.result_in_closed_node_origin_pos.x, this.result_in_closed_node_origin_pos.y + offsetY, 0);
            this.tai_in_closed_node.parent.setPosition(newResultPos);
          }
        }

        open() {
          var _this$opened_node, _this$opened_node2;

          if ((_this$opened_node = this.opened_node) === null || _this$opened_node === void 0 ? void 0 : _this$opened_node.isOpened()) return;
          let seqCloseNode = tween(this.closed_node).sequence(tween().to(0.2, {
            scale: Vec3.ZERO
          }), tween().call(() => {
            this.closed_node.active = false;
          }));
          seqCloseNode.start();
          (_this$opened_node2 = this.opened_node) === null || _this$opened_node2 === void 0 ? void 0 : _this$opened_node2.show();
        }

        close() {
          var _this$opened_node3;

          if (this.closed_node.active) return;
          this.closed_node.active = true;
          (_this$opened_node3 = this.opened_node) === null || _this$opened_node3 === void 0 ? void 0 : _this$opened_node3.hide(() => {
            let seqCloseNode = tween(this.closed_node).to(0.2, {
              scale: Vec3.ONE
            });
            seqCloseNode.start();
          });
        }

        closeAll() {
          this.close();
          this.hideMiniGame(GlobalVariables.TAIXIU);
          this.hideMiniGame(GlobalVariables.TRUNGPS);
          this.hideMiniGame(GlobalVariables.MINIPOKER);
        }

        turnOffAutoSpin() {
          if (MiniPokerGameView.getInstance() != null) {
            MiniPokerGameView.getInstance().turnOffAutoSpin();
          }

          if (KimCuongGameView.getInstance() != null) {
            KimCuongGameView.getInstance().turnOffAutoSpin();
          }
        }

        forceAllMachineStop(stopAuto = true) {
          if (MiniPokerGameView.getInstance() != null) {
            MiniPokerGameView.getInstance().forceMachineStop(stopAuto);
          }

          if (KimCuongGameView.getInstance() != null) {
            KimCuongGameView.getInstance().forceMachineStop(stopAuto);
          }
        }

        isOpened() {
          return this.opened_node.scale == Vec3.ONE;
        }

        getClosedNodePosition() {
          return this.closed_node.position;
        }

        bringGameViewToTop(gameView, isTop) {
          if (isTop) {
            gameView.node.setSiblingIndex(gameView.node.parent.children.length - 1);
            this.mini_game_view_stack.push(gameView);
            gameView.blur(false);

            if (this.mini_game_view_stack.length > 0) {
              this.mini_game_node.setSiblingIndex(2);
            }
          } else {
            gameView.node.setSiblingIndex(0);
            this.mini_game_view_stack.splice(this.mini_game_view_stack.indexOf(gameView), 1);

            if (this.mini_game_view_stack.length <= 0) {
              this.mini_game_node.setSiblingIndex(0);
            }
          }
        }

        handleMiniGameMessage(message) {
          message = JSON.parse(message);
          let type = message[0];
          let dict = message[1];

          switch (type) {
            case MessageResponse.LogIn_Response:
              {
                let isSucceed = message[1];

                if (isSucceed) {
                  var _BigLoadingView$getIn;

                  log("=== Logged In minigame SUCCEED ===");
                  TaiXiuMessageHandler.subcribeTaiXiu();
                  KimCuongMessageHandler.subscribe();
                  MiniPokerMessageHandler.subscribe();

                  if ((_BigLoadingView$getIn = BigLoadingView.getInstance()) === null || _BigLoadingView$getIn === void 0 ? void 0 : _BigLoadingView$getIn.isShowing()) {
                    var _BigLoadingView$getIn2;

                    (_BigLoadingView$getIn2 = BigLoadingView.getInstance()) === null || _BigLoadingView$getIn2 === void 0 ? void 0 : _BigLoadingView$getIn2.hide(() => {
                      LobbyViewController.getInstance().onLoggedIn();
                    });
                  } else if (!GamePlayManager.isRefreshingInBackground) {
                    LobbyViewController.getInstance().onLoggedIn();
                  } else {
                    GamePlayManager.isRefreshingInBackground = false;
                  }
                } else {
                  log("=== Logged In minigame FAILED ===");
                }

                LoadingView.getInstance().hide();
                break;
              }

            case MessageResponse.LogOut_Response:
              {
                if (GamePlayManager.isRefreshingInBackground) {
                  GamePlayManager.login();
                } else {
                  var _LoadingView$getInsta;

                  (_LoadingView$getInsta = LoadingView.getInstance()) === null || _LoadingView$getInsta === void 0 ? void 0 : _LoadingView$getInsta.hide();
                  LobbyViewController.getInstance().onLoggedOut();
                }

                break;
              }

            case MessageResponse.Extension_Response:
              {
                let cmd = message[1]["cmd"];

                if (cmd == GLOBAL_MESSAGE.BROADCAST_MESSAGE) {
                  let message = dict["mgs"];
                  let paramsArr = dict["params"];
                  let params = [];

                  for (let i = 0; i < paramsArr.length; i++) {
                    let paramStr = paramsArr[i];
                    params.push(paramStr);
                  }

                  LobbyViewController.getInstance().showFloatingString(message, params);
                } else if (cmd == GLOBAL_MESSAGE.USER_INFO) {
                  // User info
                  let userDict = message[1]["As"];
                  let chip = message[1]["chip"];
                  let gold = message[1]["gold"];
                  let vip = message[1]["vip"];
                  let customerID = message[1]["id"];
                  let displayName = message[1]["dn"];
                  let userID = message[1]["uid"];
                  let phoneNumber = message[1]["ph"];
                  let avatarURL = message[1]["a"];
                  let activateMessage = message[1]["am"];
                  GlobalVariables.DISPLAY_NAME = displayName;
                } else if (cmd == GLOBAL_MESSAGE.ERROR_MESSAGE) {
                  let mesDialog = "";
                  let dict = message[1];

                  if (dict["mgs"]) {
                    mesDialog = dict["mgs"];
                  }

                  if (mesDialog.length > 0) {
                    var _NotiView$getInstance;

                    (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage(mesDialog);
                  } else {
                    var _NotiView$getInstance2;

                    (_NotiView$getInstance2 = NotiView.getInstance()) === null || _NotiView$getInstance2 === void 0 ? void 0 : _NotiView$getInstance2.showMessage("Đã có lỗi xảy ra.!");
                  }
                } else if (cmd >= 1000 && cmd < 1100 || cmd >= 2000 && cmd < 2100) {
                  TaiXiuMessageHandler.handleMessage(message);
                } else if (cmd >= 1300 && cmd < 1400) {
                  let dict = message[1];
                  let gameID = dict["gid"];

                  if (gameID == GlobalVariables.TRUNGPS) {
                    KimCuongMessageHandler.handleMessage(message);
                  } else if (gameID == GlobalVariables.MINIPOKER) {
                    MiniPokerMessageHandler.handleMessage(message);
                  } else ;
                } else if (cmd >= 1500 && cmd < 1600) ;else if (cmd == 310) {
                  // refresh money
                  let userDict = message[1]["As"];
                  let gold = userDict["gold"];
                  systemEvent.emit("update-money", gold);
                }

                break;
              }
          }
        }

        static getInstance() {
          var _CCMiniGameRoot$getIn;

          return (_CCMiniGameRoot$getIn = CCMiniGameRoot.getInstance()) === null || _CCMiniGameRoot$getIn === void 0 ? void 0 : _CCMiniGameRoot$getIn.getComponentInChildren(MiniGameNodeController);
        }

        showTaiXiuResult(isTai) {
          this.tai_in_closed_node.active = isTai;
          this.xiu_in_closed_node.active = !isTai;
          this.time_in_closed_node.active = false;
          this.tai_in_opened_node.active = isTai;
          this.xiu_in_opened_node.active = !isTai;
          this.time_in_opened_node.active = false;
        }

        startGameTaiXiu(remainingTime) {
          this.tai_in_opened_node.active = false;
          this.xiu_in_opened_node.active = false;
          this.time_in_opened_node.active = true;
          this.txt_time_in_opened_node.string = remainingTime;
          this.tai_in_closed_node.active = false;
          this.xiu_in_closed_node.active = false;
          this.time_in_closed_node.active = true;
          this.txt_time_in_closed_node.string = remainingTime;
        }

      }, _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_open", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_close", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "opened_node", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "closed_node", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "time_in_closed_node", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "txt_time_in_closed_node", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "tai_in_closed_node", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "xiu_in_closed_node", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "time_in_opened_node", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "txt_time_in_opened_node", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "tai_in_opened_node", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "xiu_in_opened_node", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "minigameviews", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "btn_game_tai_xiu", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "btn_game_mini_poker", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "btn_game_kimcuong", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "mini_game_node", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import CCMiniGameRoot from "./CCMiniGameRoot";
      // import BaseMiniGameView from "./Games/BaseMiniGameView";
      // import DragonBallGameView from "./Games/DragonBall/DragonBallGameView";
      // import KimCuongGameView from "./Games/KimCuong/KimCuongGameView";
      // import MiniPokerGameView from "./Games/MiniPoker/MiniPokerGameView";
      // import NotiView from "./Games/TaiXiu/NotiView";
      // import TrenDuoiGameView from "./Games/TrenDuoi/TrenDuoiGameView";
      // import { GameNetworkHandler } from "./Network/GameNetworkHandler";
      // import DragonBallMessageHandler from "./Network/MiniGame/DragonBallMessageHandler";
      // import KimCuongMessageHandler from "./Network/MiniGame/KimCuongMessageHandler";
      // import MiniPokerMessageHandler from "./Network/MiniGame/MiniPokerMessageHandler";
      // import { TaiXiuMessageHandler } from "./Network/MiniGame/TaiXiuMessageHandler";
      // import TrenDuoiMessageHandler, { UpDown_Message } from "./Network/MiniGame/TrenDuoiMessageHandler";
      // import { MessageRequest, MessageResponse, MiniGameNetworkHandler } from "./Network/MiniGameNetworkHandler";
      // import { GLOBAL_MESSAGE, GlobalVariables } from "./Utils/GlobalVariables";
      // import MiniGameNodeDragView from "./Utils/MiniGameNodeDragView";
      // 
      // export enum DOWNLOAD_STATE {
      //     UNDOWNLOADED,
      //     DOWNLOADING,
      //     DOWNLOADED,
      //     CACHED
      // }
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class MiniGameNodeController extends cc.Component {
      //     @property(cc.Button)
      //     private btn_open: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_close: cc.Button = null;
      // 
      //     @property(cc.Node)
      //     private opened_node: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private closed_node: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private time_in_closed_node: cc.Node = null;
      // 
      //     @property(cc.Label)
      //     private txt_time_in_closed_node: cc.Label = null;
      // 
      //     @property(cc.Node)
      //     private tai_in_closed_node: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private xiu_in_closed_node: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private time_in_opened_node: cc.Node = null;
      // 
      //     @property(cc.Label)
      //     private txt_time_in_opened_node: cc.Label = null;
      // 
      //     @property(cc.Node)
      //     private tai_in_opened_node: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private xiu_in_opened_node: cc.Node = null;
      // 
      //     @property([BaseMiniGameView])
      //     private minigameviews: BaseMiniGameView[] = [];
      // 
      //     @property(cc.Button)
      //     private btn_game_tai_xiu: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_game_mini_poker: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_game_kimcuong: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_game_trenduoi: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_game_dball: cc.Button = null;
      // 
      //     @property(cc.Node)
      //     private mini_game_node: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private black_screen: cc.Node = null;
      // 
      //     private static instance: MiniGameNodeController = null;
      // 
      //     public onMiniGameReceivedMsgCb = null;
      // 
      //     private mini_game_view_stack : BaseMiniGameView[] = [];
      // 
      //     public static DEBUG = false;
      //     // public static IS_ENV = "staging";
      //     public static IS_ENV = "production";
      // 
      //     private time_in_closed_node_origin_pos = null;
      //     private result_in_closed_node_origin_pos = null;
      // 
      //     sendRefreshMoney() {
      //         let dict = {};
      //         dict["cmd"] = 310;
      //         let mes = [MessageRequest.ZonePlugin_Type,"MiniGame", "channelPlugin", dict];
      //         MiniGameNetworkHandler.send(mes);
      //     }
      // 
      //     isDownloading() {
      //         return MiniPokerGameView.getInstance().getDownloadState() == DOWNLOAD_STATE.DOWNLOADING || 
      //         TrenDuoiGameView.getInstance().getDownloadState() == DOWNLOAD_STATE.DOWNLOADING ||
      //         KimCuongGameView.getInstance().getDownloadState() == DOWNLOAD_STATE.DOWNLOADING || 
      //         DragonBallGameView.getInstance().getDownloadState() == DOWNLOAD_STATE.DOWNLOADING;
      //     }
      // 
      //     onLoad() {
      //         MiniGameNodeController.instance = this;
      // 
      //         MiniGameNodeDragView.onClick = () => {
      //             this.open();
      //         }
      // 
      //         this.btn_close.node.on("click", () => {
      //             this.close();
      //         });
      // 
      //         this.btn_game_tai_xiu.node.on("click", () => {
      //             let showed = this.minigameviews[0].show();
      //             if(showed) {
      //                 this.close();
      //             }
      //         });
      // 
      //         this.btn_game_mini_poker.node.on("click", () => {
      //             let showed = this.minigameviews[1].show();
      //             if(showed) {
      //                 this.close();
      //             }
      //         });
      // 
      //         this.btn_game_kimcuong.node.on("click", () => {
      //             let showed = this.minigameviews[2].show();
      //             if(showed) {
      //                 this.close();
      //             }
      //         });
      // 
      //         this.btn_game_trenduoi.node.on("click", () => {
      //             let showed = this.minigameviews[3].show();
      //             if(showed) {
      //                 this.close();
      //             }
      //         });
      // 
      //         this.btn_game_dball.node.on("click", () => {
      //             let showed = this.minigameviews[4].show();
      //             if(showed) {
      //                 this.close();
      //             }
      //         });
      // 
      //         let pos = this.closed_node.position;
      //         pos.y = CCMiniGameRoot.WIN_SIZE_HEIGHT / 4;
      //         pos.x = (CCMiniGameRoot.WIN_SIZE_WIDTH / 2) - (this.closed_node.getContentSize().width / 2);
      //         this.closed_node.position = pos;
      // 
      //         this.time_in_closed_node_origin_pos = this.time_in_closed_node.position;
      //         this.result_in_closed_node_origin_pos = this.tai_in_closed_node.parent.position;
      //     }
      // 
      //     onDestroy() {
      //         MiniGameNodeController.instance = null;
      //     }
      // 
      //     start() {
      //         MiniGameNodeController.getInstance().onMiniGameReceivedMsgCb = (event) => {
      //             this.handleMiniGameMessage(event.data);
      //         };
      //     }
      // 
      //     update(dt) {
      //         if (this.closed_node.x < 0) {
      //             let newTimePos : cc.Vec2 = new cc.Vec2(this.time_in_closed_node_origin_pos.x + 90,this.time_in_closed_node_origin_pos.y);
      //             this.time_in_closed_node.position = newTimePos;
      //             let newResultPos : cc.Vec2 = new cc.Vec2(this.result_in_closed_node_origin_pos.x + 90,this.result_in_closed_node_origin_pos.y);
      //             this.tai_in_closed_node.parent.position = newResultPos;
      //         } else {
      //             this.time_in_closed_node.position = this.time_in_closed_node_origin_pos;
      //             this.tai_in_closed_node.parent.position = this.result_in_closed_node_origin_pos;
      //         }
      //     }
      // 
      //     open() {
      //         if(this.opened_node.scale) return;
      // 
      //         this.black_screen.active = true;
      //         this.opened_node.active = true;
      //         let seqCloseNode = cc.sequence(cc.scaleTo(0.2, 0), cc.callFunc(() => this.closed_node.active = false));
      //         seqCloseNode.setTag(1);
      //         this.closed_node.runAction(seqCloseNode);
      // 
      //         this.opened_node.position = this.closed_node.position;
      //         let opened_node_target_x = this.closed_node.x > 0 ? (CCMiniGameRoot.WIN_SIZE_WIDTH / 2) - (this.opened_node.getContentSize().width / 2)
      //          : (-CCMiniGameRoot.WIN_SIZE_WIDTH / 2) + (this.opened_node.getContentSize().width / 2);
      //         let opened_node_target_y = this.closed_node.position.y;
      //         if(this.opened_node.position.y + (this.opened_node.getContentSize().height / 2) > CCMiniGameRoot.WIN_SIZE_HEIGHT / 2){
      //             opened_node_target_y = (CCMiniGameRoot.WIN_SIZE_HEIGHT/ 2) - (this.opened_node.getContentSize().height / 2);
      //         }else if(this.opened_node.position.y - (this.opened_node.getContentSize().height / 2) < -CCMiniGameRoot.WIN_SIZE_HEIGHT / 2){
      //             opened_node_target_y = (-CCMiniGameRoot.WIN_SIZE_HEIGHT / 2) + (this.opened_node.getContentSize().height / 2);
      //         }
      //         let targetPos = new cc.Vec2(opened_node_target_x, opened_node_target_y);
      // 
      //         let seqOpenNode = cc.spawn(cc.fadeIn(0.3).easing(cc.easeIn(2.5)),cc.moveTo(0.3, targetPos).easing(cc.easeOut(2.5)), 
      //         cc.scaleTo(0.3, 1).easing(cc.easeOut(2.5)));
      //         this.opened_node.runAction(seqOpenNode);
      //     }
      // 
      //     close() {
      //         if(this.closed_node.active) return;
      // 
      //         this.black_screen.active = false;
      //         this.closed_node.active = true;
      // 
      //         let seqOpenNode = cc.spawn(cc.fadeOut(0.25).easing(cc.easeOut(1.5)),cc.moveTo(0.25, this.closed_node.position).easing(cc.easeIn(1.5)), 
      //         cc.scaleTo(0.25, 0));
      //         this.opened_node.runAction(cc.sequence(seqOpenNode,cc.callFunc(() => {
      //             this.opened_node.active = false;
      //             let seqCloseNode = cc.scaleTo(0.2, 1);
      //             this.closed_node.runAction(seqCloseNode);
      //         })));
      //     }
      // 
      //     closeAll() {
      //         this.close();
      //         this.minigameviews.forEach(x => x.hide(true));
      //     }
      // 
      //     turnOffAutoSpin() {
      //         MiniPokerGameView.getInstance().turnOffAutoSpin();
      //         KimCuongGameView.getInstance().turnOffAutoSpin();
      //         DragonBallGameView.getInstance().turnOffAutoSpin();
      //     }
      // 
      //     forceAllMachineStop(stopAuto = true) {
      //         MiniPokerGameView.getInstance().forceMachineStop(stopAuto);
      //         KimCuongGameView.getInstance().forceMachineStop(stopAuto);
      //         DragonBallGameView.getInstance().forceMachineStop(stopAuto);
      //     }
      // 
      //     public isOpened() {
      //         return this.opened_node.scale == 1;
      //     }
      // 
      //     getClosedNodePosition(){
      //         return this.closed_node.position;
      //     }
      // 
      //     bringGameViewToTop(gameView : BaseMiniGameView,isTop) {
      //         if (isTop) {
      //             gameView.node.setSiblingIndex(gameView.node.parent.childrenCount - 1);
      //             this.mini_game_view_stack.push(gameView);
      // 
      //             gameView.blur(false);
      // 
      //             if(this.mini_game_view_stack.length > 0) {
      //                 this.mini_game_node.setSiblingIndex(2);
      //             }
      //         } else {
      //             gameView.node.setSiblingIndex(0);
      //             this.mini_game_view_stack.splice(this.mini_game_view_stack.indexOf(gameView),1);
      // 
      //             if(this.mini_game_view_stack.length <= 0) {
      //                 this.mini_game_node.setSiblingIndex(0);
      //             }
      //         }
      //     }
      // 
      //     handleMiniGameMessage(message) {
      //         message = JSON.parse(message);
      //         let type = message[0];
      //         switch (type) {
      //             case MessageResponse.LogIn_Response: {
      //                 let isSucceed = message[1];
      //                 if (isSucceed) {
      //                     cc.log("=== Logged In minigame SUCCEED ===");
      //                     TaiXiuMessageHandler.subcribeTaiXiu();
      //                     KimCuongMessageHandler.subscribe();
      //                     MiniPokerMessageHandler.subscribe();
      //                     TrenDuoiMessageHandler.subcribe();
      //                     DragonBallMessageHandler.subscribe();
      //                 } else {
      //                     cc.log("=== Logged In minigame FAILED ===");
      //                 }
      //                 break;
      //             }
      //             case MessageResponse.Extension_Response: {
      //                 let cmd = message[1]["cmd"];
      //                 if (cmd == GLOBAL_MESSAGE.USER_INFO) { // User info
      //                     let userDict = message[1]["As"];
      //                     let chip = message[1]["chip"];
      //                     let gold = message[1]["gold"];
      //                     let vip = message[1]["vip"];
      // 
      //                     let customerID = message[1]["id"];
      //                     let displayName = message[1]["dn"];
      //                     let userID = message[1]["uid"];
      //                     let phoneNumber = message[1]["ph"];
      //                     let avatarURL = message[1]["a"];
      //                     let activateMessage = message[1]["am"];
      //                     GlobalVariables.DISPLAY_NAME = displayName;
      //                 }
      //                 else if (cmd == GLOBAL_MESSAGE.ERROR_MESSAGE) {
      //                     let mesDialog = "";
      //                     let dict = message[1];
      //                     if (dict["mgs"]) {
      //                         mesDialog = dict["mgs"];
      //                     }
      // 
      //                     if (mesDialog.length > 0) {
      //                         NotiView.getInstance() && NotiView.getInstance().showMessage(mesDialog);
      //                     }else{
      //                         NotiView.getInstance() && NotiView.getInstance().showMessage("Đã có lỗi xảy ra.!");
      //                     }
      //                 }
      //                 else if (cmd >= 1000 && cmd < 1100) {
      //                     TaiXiuMessageHandler.handleMessage(message);
      //                 }
      //                 else if (cmd >= 1300 && cmd < 1400) {
      //                     let dict = message[1];
      //                     let gameID = dict["gid"];
      //                     if (gameID == GlobalVariables.TRUNGPS) {
      //                         KimCuongMessageHandler.handleMessage(message);
      //                     }
      //                     else if (gameID == GlobalVariables.MINIPOKER) {
      //                         MiniPokerMessageHandler.handleMessage(message);
      //                     }
      //                     else if (gameID == GlobalVariables.DRAGONBALL) {
      //                         DragonBallMessageHandler.handleMessage(message);
      //                     }
      //                     else {
      //                         // SlotsMessageHandler.handleMessage(mes, gameID);
      //                     }
      //                 }
      //                 else if (cmd >= 1500 && cmd < 1600) { // CAOTHAP
      //                     TrenDuoiMessageHandler.handleMessage(message);
      //                 } else if(cmd == 310) { // refresh money
      //                     let userDict = message[1]["As"];
      //                     let gold = userDict["gold"];
      //                     cc.systemEvent.emit("update-money",gold);
      //                 }
      //                 break;
      //             }
      //         }
      //     }
      // 
      //     public static getInstance() {
      //         return CCMiniGameRoot.getInstance().getComponentInChildren(MiniGameNodeController);
      //     }
      // 
      //     public showTaiXiuResult(isTai) {
      //         this.tai_in_closed_node.active = isTai;
      //         this.xiu_in_closed_node.active = !isTai;
      //         this.time_in_closed_node.active = false;
      // 
      //         this.tai_in_opened_node.active = isTai;
      //         this.xiu_in_opened_node.active = !isTai;
      //         this.time_in_opened_node.active = false;
      //     }
      // 
      //     public startGameTaiXiu(remainingTime) {
      //         this.tai_in_opened_node.active = false;
      //         this.xiu_in_opened_node.active = false;
      //         this.time_in_opened_node.active = true;
      //         this.txt_time_in_opened_node.string = remainingTime;
      // 
      //         this.tai_in_closed_node.active = false;
      //         this.xiu_in_closed_node.active = false;
      //         this.time_in_closed_node.active = true;
      //         this.txt_time_in_closed_node.string = remainingTime;
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KimCuongGameView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './StringUtils.ts', './MiniGameNetworkHandler.ts', './NotiView.ts', './GlobalVariables.ts', './MiniPokerMessageHandler.ts', './BaseMiniGameView.ts', './KimCuongMessageHandler.ts', './MiniGameNodeController.ts', './GamePlayManager.ts', './KimCuong_SlotMachineItemView.ts', './KimCuong_SlotMachineCmp.ts', './KimCuongBetHistoryView.ts', './KimCuongBetRankView.ts', './KimCuongNoHuView.ts', './KimCuongLineSelectionView.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Button, Node, sp, Toggle, SpriteFrame, _decorator, sys, tween, Tween, UIOpacity, Color, Vec3, GameConfigManager, StringUtils, MessageRequest, MiniGameNetworkHandler, NotiView, GlobalVariables, MiniPoker_Message, BaseMiniGameView, KimCuongMessageHandler, MiniGameNodeController, GamePlayManager, KimCuongItem, KimCuongSlotMachineCmp_SlotMachineCmp, KimCuongBetHistoryView, KimCuongBetRankView, KimCuongNoHuView, KimCuongLineSelectionView;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Button = module.Button;
      Node = module.Node;
      sp = module.sp;
      Toggle = module.Toggle;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      sys = module.sys;
      tween = module.tween;
      Tween = module.Tween;
      UIOpacity = module.UIOpacity;
      Color = module.Color;
      Vec3 = module.Vec3;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MiniGameNetworkHandler = module.MiniGameNetworkHandler;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      MiniPoker_Message = module.MiniPoker_Message;
    }, function (module) {
      BaseMiniGameView = module.default;
    }, function (module) {
      KimCuongMessageHandler = module.default;
    }, function (module) {
      MiniGameNodeController = module.default;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }, function (module) {
      KimCuongItem = module.KimCuongItem;
    }, function (module) {
      KimCuongSlotMachineCmp_SlotMachineCmp = module.default;
    }, function (module) {
      KimCuongBetHistoryView = module.default;
    }, function (module) {
      KimCuongBetRankView = module.default;
    }, function (module) {
      KimCuongNoHuView = module.default;
    }, function (module) {
      KimCuongLineSelectionView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _class3, _temp;

      cclegacy._RF.push({}, "105b5U1AshNabC9YLOR+TRc", "KimCuongGameView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class KimCuongJackpotInfo {
        constructor() {
          _defineProperty(this, "aid", void 0);

          _defineProperty(this, "jackpot", void 0);

          _defineProperty(this, "bet", void 0);
        }

      }

      let KimCuongGameView = exports('default', (_dec = ccclass('KimCuongGameView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(KimCuongBetHistoryView), _dec5 = property(KimCuongBetRankView), _dec6 = property([Button]), _dec7 = property(Button), _dec8 = property(Button), _dec9 = property(Button), _dec10 = property(Button), _dec11 = property(Button), _dec12 = property(Node), _dec13 = property(sp.Skeleton), _dec14 = property(Label), _dec15 = property(KimCuongSlotMachineCmp_SlotMachineCmp), _dec16 = property(Toggle), _dec17 = property(Toggle), _dec18 = property(KimCuongNoHuView), _dec19 = property(KimCuongLineSelectionView), _dec20 = property(Label), _dec21 = property([SpriteFrame]), _dec22 = property([SpriteFrame]), _dec23 = property([sp.SkeletonData]), _dec(_class = (_class2 = (_temp = _class3 = class KimCuongGameView extends BaseMiniGameView {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lblJackpot", _descriptor, this);

          _initializerDefineProperty(this, "lblTongCuoc", _descriptor2, this);

          _initializerDefineProperty(this, "kimCuongBetHistoryView", _descriptor3, this);

          _initializerDefineProperty(this, "kimCuongBetRankView", _descriptor4, this);

          _initializerDefineProperty(this, "btn_chips", _descriptor5, this);

          _defineProperty(this, "chip_values", [100, 1000, 5000, 10000]);

          _initializerDefineProperty(this, "btn_rank", _descriptor6, this);

          _initializerDefineProperty(this, "btn_bet_history", _descriptor7, this);

          _initializerDefineProperty(this, "btn_help", _descriptor8, this);

          _initializerDefineProperty(this, "btn_spin", _descriptor9, this);

          _initializerDefineProperty(this, "btn_line", _descriptor10, this);

          _initializerDefineProperty(this, "result_node", _descriptor11, this);

          _initializerDefineProperty(this, "bg_result_node", _descriptor12, this);

          _initializerDefineProperty(this, "lbl_result_amount", _descriptor13, this);

          _initializerDefineProperty(this, "kimCuong_SlotMachineCmp", _descriptor14, this);

          _initializerDefineProperty(this, "tog_auto", _descriptor15, this);

          _initializerDefineProperty(this, "tog_fast", _descriptor16, this);

          _initializerDefineProperty(this, "kimCuongNoHuView", _descriptor17, this);

          _initializerDefineProperty(this, "kimCuongLineSelectionView", _descriptor18, this);

          _initializerDefineProperty(this, "line_num_text", _descriptor19, this);

          _initializerDefineProperty(this, "loaded_item_normal", _descriptor20, this);

          _initializerDefineProperty(this, "loaded_item_blur", _descriptor21, this);

          _initializerDefineProperty(this, "loaded_anim_item", _descriptor22, this);

          _defineProperty(this, "bet", 0);

          _defineProperty(this, "_jackpotInfos", []);

          _defineProperty(this, "jackpot_amount", 0);

          _defineProperty(this, "jackpot_tween", null);

          _defineProperty(this, "symbols", []);

          _defineProperty(this, "rewards", []);

          _defineProperty(this, "lineArr", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);

          _defineProperty(this, "moneyExchange", 0);

          _defineProperty(this, "wonJackpot", false);

          _defineProperty(this, "_aid", 1);
        }

        isSpinning() {
          return this.kimCuong_SlotMachineCmp.isSpinning();
        }

        forceMachineStop(stopAuto = true) {
          if (this.tog_auto.isChecked && stopAuto) {
            this.tog_auto.isChecked = false;
          }

          this.stop([]);
        }

        turnOffAutoSpin() {
          this.tog_auto.isChecked = false;
        }

        isFastSpin() {
          return this.tog_fast.isChecked;
        }

        onLoad() {
          super.onLoad();
          KimCuongGameView.instance = this;

          KimCuongMessageHandler.onResultError = mes => {
            NotiView.getInstance().showMessage(mes, this.node, GlobalVariables.TRUNGPS);
            this.forceMachineStop();
          };

          this.bet = this.chip_values[0];
          this.init();
          this.btn_spin.node.on("click", () => {
            if (!this.kimCuong_SlotMachineCmp.isStopped()) {
              NotiView.getInstance().showMessage("Đang Quay", this.node, GlobalVariables.TRUNGPS);
              return;
            }

            this.spin();
          });
          this.btn_rank.node.on("click", () => {
            this.showRank();
          });
          this.btn_line.node.on("click", () => {
            this.kimCuongLineSelectionView.show();
          });
          this.btn_bet_history.node.on("click", () => {
            this.showBetHistory();
          });
          this.btn_help.node.on("click", () => {
            sys.openURL(GameConfigManager.helpURL);
          });
          this.btn_chips.forEach((chip, index) => {
            let ind = index;
            chip.node.on("click", () => {
              var _this$tog_auto;

              if (!this.kimCuong_SlotMachineCmp.isStopped() || ((_this$tog_auto = this.tog_auto) === null || _this$tog_auto === void 0 ? void 0 : _this$tog_auto.isChecked)) {
                NotiView.getInstance().showMessage("Đang Quay", this.node, GlobalVariables.TRUNGPS);
                return;
              }

              this.highlightBet(ind);
              this.bet = this.chip_values[ind];
              this.subscribeJackpot();
            });
          });
          this.tog_auto.node.on("toggle", () => {
            if (this.tog_auto.isChecked && this.kimCuong_SlotMachineCmp.isStopped()) {
              this.spin();
            }
          });

          this.kimCuong_SlotMachineCmp.onMachineStopped = () => {
            let showResult = tween(this.node).call(() => {
              this.showResult(() => {
                if (this.tog_auto.isChecked && this.kimCuong_SlotMachineCmp.isStopped()) {
                  this.spin();
                } else if (this.kimCuong_SlotMachineCmp.isStopped()) {
                  let resultLines = this.rewards.map(reward => {
                    let lineID = reward["lid"];
                    return lineID;
                  });
                  this.kimCuong_SlotMachineCmp.showEachLines(resultLines, 1);
                }
              });
            });
            let finishAct = this.moneyExchange > 0 ? showResult : tween(this.node).sequence(tween().delay(0.5), tween().call(() => {
              if (this.tog_auto.isChecked && this.kimCuong_SlotMachineCmp.isStopped()) {
                this.spin();
              }
            }));
            finishAct.start();
            GamePlayManager.sendRefreshMoney();
          };

          this.kimCuong_SlotMachineCmp.init();
        }

        highlightBet(ind) {
          this.btn_chips.forEach((chip, index) => {
            let checkmark = chip.node.children[1];
            checkmark.active = index == ind;
          });
        }

        showResult(onContinue) {
          var _this$result_node, _this$result_node2;

          let resultLines = this.rewards.map(reward => {
            let lineID = reward["lid"];
            return lineID;
          });
          let timeShowLine = this.tog_fast.isChecked ? 0 : 0.7;
          this.kimCuong_SlotMachineCmp.showLines(resultLines, timeShowLine, 0.3, () => {});
          Tween.stopAllByTarget(this.result_node);
          Tween.stopAllByTarget((_this$result_node = this.result_node) === null || _this$result_node === void 0 ? void 0 : _this$result_node.getComponent(UIOpacity));
          this.lbl_result_amount.string = "+" + StringUtils.formatNumber(this.moneyExchange);

          if (this.moneyExchange >= 1000000000) {
            this.bg_result_node.node.setScale(1.1, 1, 1);
          } else if (this.moneyExchange <= 1000) {
            this.bg_result_node.node.setScale(0.6, 1, 1);
          } else if (this.moneyExchange <= 10000) {
            this.bg_result_node.node.setScale(0.7, 1, 1);
          } else if (this.moneyExchange <= 100000) {
            this.bg_result_node.node.setScale(0.8, 1, 1);
          } else if (this.moneyExchange <= 1000000) {
            this.bg_result_node.node.setScale(0.9, 1, 1);
          } else if (this.moneyExchange <= 10000000) ;

          let showNoHuEffect = tween(this.result_node).sequence(tween().call(() => {
            this.kimCuongNoHuView.show(this.moneyExchange);
          }), this.tog_auto.isChecked ? tween(this.result_node).sequence(tween().delay(14.5), tween().call(() => {
            this.kimCuongNoHuView.hide();
          })) : tween(this.result_node).sequence(tween().delay(2.5), tween().call(() => {
            this.kimCuongNoHuView.activeClick();
          })));
          let showNormalResult = tween(this.result_node).sequence(tween().call(() => {
            this.result_node.getComponent(UIOpacity).opacity = 255;
            this.bg_result_node.color = Color.WHITE;
            let track = this.bg_result_node.setAnimation(0, "animation", false);

            if (track != null) {
              this.bg_result_node.setCompleteListener(trackEntry => {
                let name = trackEntry.animation ? trackEntry.animation.name : '';

                if (name == "animation") {
                  this.bg_result_node.setAnimation(0, "loop", true);
                }
              });
            }
          }), tween().by(0.5, {
            position: new Vec3(0, 0, 0)
          }, {
            easing: 'expoOut'
          }), tween().delay(this.tog_fast.isChecked ? 0 : 1.5));
          let seq = tween(this.result_node).sequence(tween().delay(timeShowLine), this.wonJackpot ? showNoHuEffect : showNormalResult, tween().call(() => onContinue && onContinue()));
          let seqFade = tween((_this$result_node2 = this.result_node) === null || _this$result_node2 === void 0 ? void 0 : _this$result_node2.getComponent(UIOpacity)).sequence(tween().delay(timeShowLine), tween().delay(this.tog_fast.isChecked ? 0.5 : 2.0), tween().call(() => {
            this.result_node.getComponent(UIOpacity).opacity = 1;
            this.bg_result_node.color = Color.TRANSPARENT;
          }));
          seqFade.start();
          seq.start();
        }

        update(dt) {
          this.lblTongCuoc.string = StringUtils.formatMoneyNumber(this.bet * this.lineArr.length);
        }

        static getInstance() {
          return KimCuongGameView.instance;
        }

        showRank() {
          this.kimCuongBetRankView.fetchRank();
        }

        spin() {
          if (this.lineArr.length <= 0) {
            NotiView.getInstance().showMessage("Vui lòng chọn dòng", this.node, GlobalVariables.TRUNGPS);
            return;
          }

          Tween.stopAllByTarget(this.node);
          this.kimCuong_SlotMachineCmp.spin();
          this.requestSpin();
        }

        requestSpin() {
          let dict = {};
          dict["cmd"] = MiniPoker_Message.SPIN_RESULT;
          dict["b"] = this.bet;
          dict["aid"] = this._aid;
          dict["ls"] = this.lineArr;
          dict["gid"] = GlobalVariables.TRUNGPS;
          let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
          MiniGameNetworkHandler.send(mes);
        }

        stop(items) {
          if (!this.kimCuong_SlotMachineCmp.isSpinning()) return;

          if (items.length == 0) {
            this.moneyExchange = 0;
            this.rewards = [];
          }

          let seq = tween(this.node).sequence(tween().delay(KimCuongSlotMachineCmp_SlotMachineCmp.TIME_TO_SHOW_RESULT), tween().call(() => {
            if (this.tog_fast.isChecked) this.kimCuong_SlotMachineCmp.stopImmediately(items);else this.kimCuong_SlotMachineCmp.stop(items);
          }));
          seq.start();
        }

        showBetHistory() {
          this.kimCuongBetHistoryView.fetchHistory();
        }

        setLines(lines) {
          this.lineArr = lines;
          this.line_num_text.string = lines.length.toString();
        }

        receiveData(aid, moneyExchange, rewards, symbols) {
          this._aid = aid;
          this.symbols = symbols.map(x => {
            let a = new KimCuongItem();
            a.decodeItem(x);
            return a;
          });
          this.rewards = rewards;
          this.moneyExchange = moneyExchange;
          this.wonJackpot = this.rewards.filter(rew => rew["iJ"] == true).length > 0; // this.wonJackpot = moneyExchange > 0 ? true : false;

          this.stop(this.symbols);
        }

        subscribeJackpot(subscribe = true) {
          let cmd = MiniPoker_Message.SUBSCRIBE_JACKPOT;

          if (!subscribe) {
            cmd = MiniPoker_Message.UNSUBSCRIBE_JACKPOT;
          }

          let dict = {};
          dict["cmd"] = cmd;
          dict["gid"] = GlobalVariables.TRUNGPS;
          let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
          MiniGameNetworkHandler.send(mes);
        }

        updateJackpot(jars, isSubcribe = false) {
          if (isSubcribe) this._jackpotInfos = [];

          for (let i = 0; i < jars.length; i++) {
            let jackpotDict = jars[i];
            let jackpot = jackpotDict["J"];
            let aid = jackpotDict["aid"];
            let bet = jackpotDict["b"];

            if (isSubcribe) {
              let newJackpot = new KimCuongJackpotInfo();
              newJackpot.jackpot = jackpot;
              newJackpot.aid = aid;
              newJackpot.bet = bet;

              this._jackpotInfos.push(newJackpot);
            } else {
              for (let j = 0; j < this._jackpotInfos.length; j++) {
                if (this._jackpotInfos[j].aid == aid && this._jackpotInfos[j].bet == bet) {
                  this._jackpotInfos[j].jackpot = jackpot;
                  break;
                }
              }
            }
          }

          if (isSubcribe) {
            let tempSortedJackpot = [];

            for (let i = 0; i < this._jackpotInfos.length; i++) {
              if (this._jackpotInfos[i].aid == 1) {
                let newJackpot = new KimCuongJackpotInfo();
                newJackpot.jackpot = this._jackpotInfos[i].jackpot;
                newJackpot.aid = this._jackpotInfos[i].aid;
                newJackpot.bet = this._jackpotInfos[i].bet;
                tempSortedJackpot.push(newJackpot);
              }
            }

            for (let i = 0; i < this._jackpotInfos.length; i++) {
              if (this._jackpotInfos[i].aid == 2) {
                let newJackpot = new KimCuongJackpotInfo();
                newJackpot.jackpot = this._jackpotInfos[i].jackpot;
                newJackpot.aid = this._jackpotInfos[i].aid;
                newJackpot.bet = this._jackpotInfos[i].bet;
                tempSortedJackpot.push(newJackpot);
              }
            }

            let tempAid = 1;

            for (let i = 0; i < tempSortedJackpot.length - 1; i++) {
              for (let j = i + 1; j < tempSortedJackpot.length; j++) {
                if (tempSortedJackpot[i].aid == tempAid && tempSortedJackpot[j].aid == tempAid) {
                  if (tempSortedJackpot[j].bet < tempSortedJackpot[i].bet) {
                    let tempBet = tempSortedJackpot[i].bet;
                    let tempJackpot = tempSortedJackpot[i].jackpot;
                    tempSortedJackpot[i].bet = tempSortedJackpot[j].bet;
                    tempSortedJackpot[i].jackpot = tempSortedJackpot[j].jackpot;
                    tempSortedJackpot[j].bet = tempBet;
                    tempSortedJackpot[j].jackpot = tempJackpot;
                    j = i + 1;
                  }
                }
              }

              if (i == tempSortedJackpot.length - 2 && tempAid == 1) {
                i = 0;
                tempAid = 2;
              }
            }

            this._jackpotInfos = tempSortedJackpot;
          }

          this.updateJackpotLabels(!isSubcribe);
        }

        updateJackpotLabels(withFx) {
          for (let i = 0; i < this._jackpotInfos.length; i++) {
            if (this._jackpotInfos[i].aid == this._aid && this._jackpotInfos[i].bet == this.bet) {
              this.jackpot_tween && this.jackpot_tween.stop();

              if (!withFx) {
                this.jackpot_amount = this._jackpotInfos[i].jackpot;
                this.lblJackpot.string = StringUtils.formatNumber(this.jackpot_amount);
              } else {
                let obj = {
                  a: this.jackpot_amount
                };
                this.jackpot_tween = cc.tween(obj).to(0.5, {
                  a: this._jackpotInfos[i].jackpot
                }, {
                  progress: (start, end, current, ratio) => {
                    if (this.lblJackpot != undefined) {
                      this.lblJackpot.string = StringUtils.formatNumber(Math.floor(current));
                    }

                    return start + (end - start) * ratio;
                  }
                }).start();
                this.jackpot_amount = this._jackpotInfos[i].jackpot;
              }

              break;
            }
          }
        }

        isCanDeactiveRoot() {
          var _this$tog_auto2;

          return !((_this$tog_auto2 = this.tog_auto) === null || _this$tog_auto2 === void 0 ? void 0 : _this$tog_auto2.isChecked);
        }

        show() {
          MiniGameNodeController.getInstance().bringGameViewToTop(this, true);
          super.show();
          return true;
        }

        hide() {
          super.hide();
        }

        init() {
          super.init();
          super.hide();
        }

      }, _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lblJackpot", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lblTongCuoc", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "kimCuongBetHistoryView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "kimCuongBetRankView", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btn_chips", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btn_rank", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btn_bet_history", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btn_help", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btn_spin", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btn_line", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "result_node", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "bg_result_node", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "lbl_result_amount", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "kimCuong_SlotMachineCmp", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "tog_auto", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "tog_fast", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "kimCuongNoHuView", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "kimCuongLineSelectionView", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "line_num_text", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "loaded_item_normal", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "loaded_item_blur", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "loaded_anim_item", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class)); //  * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
      //  */
      // // // Learn TypeScript:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // // Learn Attribute:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // // Learn life-cycle callbacks:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // // 
      // // import CCMiniGameRoot from "../../CCMiniGameRoot";
      // // import CCSpriteFrameLoader from "../../Downloader/CCSpriteFrameLoader";
      // // import Downloader from "../../Downloader/Downloader";
      // // import MiniGameNodeController, { DOWNLOAD_STATE } from "../../MiniGameNodeController";
      // // import KimCuongMessageHandler from "../../Network/MiniGame/KimCuongMessageHandler";
      // // import MiniPokerMessageHandler, { MiniPoker_Message } from "../../Network/MiniGame/MiniPokerMessageHandler";
      // // import { MessageRequest, MiniGameNetworkHandler } from "../../Network/MiniGameNetworkHandler";
      // // import { GlobalVariables } from "../../Utils/GlobalVariables";
      // // import MauBinh_CardLib, { GameCard, MAU_BINH_RESULT } from "../../Utils/MauBinh_CardLib";
      // // import { StringUtils } from "../../Utils/StringUtils";
      // // import BaseMiniGameView from "../BaseMiniGameView";
      // // import BlinkCmp from "../TaiXiu/BlinkCmp";
      // // import NotiView from "../TaiXiu/NotiView";
      // // import KimCuongBetHistoryView from "./KimCuongBetHistoryView";
      // // import KimCuongBetRankView from "./KimCuongBetRankView";
      // // import KimCuongLineSelectionView from "./KimCuongLineSelectionView";
      // // import KimCuongNoHuView from "./KimCuongNoHuView";
      // // import KimCuong_SlotMachineCmp from "./SlotMachineCmp/KimCuong_SlotMachineCmp";
      // // import { KimCuongItem } from "./SlotMachineCmp/KimCuong_SlotMachineItemView";
      // // 
      // // class KimCuongJackpotInfo {
      // //     aid;
      // //     jackpot;
      // //     bet;
      // // };
      // // 
      // // const { ccclass, property } = cc._decorator;
      // // 
      // // @ccclass
      // // export default class KimCuongGameView extends BaseMiniGameView {
      // //     @property(cc.String)
      // //     private config_path: string = "";
      // // 
      // //     @property([cc.String])
      // //     private download_assets: string[] = [];
      // // 
      // //     @property([cc.String])
      // //     private download_zip: string[] = [];
      // // 
      // //     @property(cc.Label)
      // //     private lblJackpot: cc.Label = null;
      // // 
      // //     @property(KimCuongBetHistoryView)
      // //     private kimCuongBetHistoryView: KimCuongBetHistoryView = null;
      // // 
      // //     @property(KimCuongBetRankView)
      // //     private kimCuongBetRankView: KimCuongBetRankView = null;
      // // 
      // //     @property([cc.Button])
      // //     private btn_chips: cc.Button[] = [];
      // // 
      // //     private chip_values: number[] = [100, 1000, 10000];
      // // 
      // //     @property(cc.Button)
      // //     private btn_rank: cc.Button = null;
      // // 
      // //     @property(cc.Button)
      // //     private btn_bet_history: cc.Button = null;
      // // 
      // //     @property(cc.Button)
      // //     private btn_help: cc.Button = null;
      // // 
      // //     @property(cc.Button)
      // //     private btn_close: cc.Button = null;
      // // 
      // //     @property(cc.Button)
      // //     private btn_spin: cc.Button = null;
      // // 
      // //     @property(cc.Button)
      // //     private btn_line: cc.Button = null;
      // // 
      // //     @property(cc.Node)
      // //     private result_node: cc.Node = null;
      // // 
      // //     @property(cc.Label)
      // //     private lbl_result_amount: cc.Label = null;
      // // 
      // //     @property(KimCuong_SlotMachineCmp)
      // //     private kimCuong_SlotMachineCmp: KimCuong_SlotMachineCmp = null;
      // // 
      // //     @property(cc.Node)
      // //     private main: cc.Node = null;
      // // 
      // //     @property(cc.Node)
      // //     private black_screen: cc.Node = null;
      // // 
      // //     @property(cc.Toggle)
      // //     private tog_auto: cc.Toggle = null;
      // // 
      // //     @property(cc.Toggle)
      // //     private tog_fast: cc.Toggle = null;
      // // 
      // //     @property(BlinkCmp)
      // //     private light: BlinkCmp = null;
      // // 
      // //     @property(KimCuongNoHuView)
      // //     private kimCuongNoHuView: KimCuongNoHuView = null;
      // // 
      // //     @property(KimCuongLineSelectionView)
      // //     private kimCuongLineSelectionView: KimCuongLineSelectionView = null;
      // // 
      // //     @property(cc.Label)
      // //     private line_num_text: cc.Label = null;
      // // 
      // //     @property(cc.Sprite)
      // //     private spr_download_circle: cc.Sprite = null;
      // // 
      // //     /*@property(cc.AudioClip)
      // //     private sfx_win_big : cc.AudioClip = null;
      // // 
      // //     @property(cc.AudioClip)
      // //     private sfx_win_small : cc.AudioClip = null;*/
      // // 
      // //     private lastest_main_node_position: cc.Vec2;
      // // 
      // //     private static instance: KimCuongGameView = null;
      // // 
      // //     private _aid = 1;
      // // 
      // //     public loaded_item_normal: cc.SpriteFrame[] = [];
      // // 
      // //     public loaded_item_blur: cc.SpriteFrame[] = [];
      // // 
      // //     public bet: number = 0;
      // // 
      // //     private _jackpotInfos: KimCuongJackpotInfo[] = [];
      // // 
      // //     private jackpot_amount = 0;
      // // 
      // //     private jackpot_tween: cc.Tween = null;
      // // 
      // //     private symbols: KimCuongItem[] = [];
      // // 
      // //     private rewards: number[] = [];
      // // 
      // //     private lineArr : number[] = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];
      // // 
      // //     private moneyExchange: number = 0;
      // // 
      // //     private wonJackpot: boolean = false;
      // // 
      // //     private download_state = DOWNLOAD_STATE.UNDOWNLOADED;
      // // 
      // //     getDownloadState() {
      // //         return this.download_state;
      // //     }
      // // 
      // //     isSpinning() {
      // //         return this.kimCuong_SlotMachineCmp.isSpinning();
      // //     }
      // // 
      // //     forceMachineStop(stopAuto = true) {
      // //         if(this.download_state != DOWNLOAD_STATE.DOWNLOADED) return;
      // //         if(this.tog_auto.isChecked && stopAuto) {
      // //             this.tog_auto.isChecked = false;
      // //         }
      // //         this.stop([]);
      // //     }
      // // 
      // //     turnOffAutoSpin() {
      // //         this.tog_auto.isChecked = false;
      // //     }
      // // 
      // //     onLoad() {
      // //         super.onLoad();
      // //         
      // //         KimCuongGameView.instance = this;
      // // 
      // //         let self = this;
      // // 
      // //         this.download_assets.forEach(x => {
      // //             cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,x),(sf : cc.SpriteFrame) => {
      // //                 if(sf.name.indexOf("symbol/tps_symbol") >= 0) {
      // //                     self.loaded_item_normal.push(sf);
      // //                 } else if(sf.name.indexOf("symbol_blur/tps_symbol_blur") >= 0) {
      // //                     self.loaded_item_blur.push(sf);
      // //                 }
      // //             },this.node);
      // //         });
      // //         this.node.getComponentsInChildren(CCSpriteFrameLoader).forEach(x => {
      // //             x.init();
      // //             this.download_assets.push(x.asset_path);
      // //         });
      // // 
      // //         KimCuongMessageHandler.onResultError = (mes) => {
      // //             NotiView.getInstance().showMessage(mes, this.node);
      // //             this.forceMachineStop();
      // //         };
      // // 
      // //         this.bet = this.chip_values[0];
      // // 
      // //         this.kimCuongBetRankView.followNode(this.btn_rank.node);
      // //         this.kimCuongBetHistoryView.followNode(this.btn_bet_history.node);
      // //         this.kimCuongLineSelectionView.followNode(this.kimCuongLineSelectionView.node);
      // // 
      // //         this.init();
      // // 
      // //         this.btn_spin.node.on("click", () => {
      // //             if (!this.kimCuong_SlotMachineCmp.isStopped()) {
      // //                 NotiView.getInstance().showMessage("Đang Quay");
      // //                 return;
      // //             }
      // //             this.spin();
      // //         });
      // // 
      // //         this.btn_rank.node.on("click", () => {
      // //             this.showRank();
      // //         });
      // // 
      // //         this.btn_line.node.on("click", () => {
      // //             this.kimCuongLineSelectionView.show();
      // //         });
      // // 
      // //         this.btn_bet_history.node.on("click", () => {
      // //             this.showBetHistory();
      // //         });
      // // 
      // //         this.btn_help.node.on("click", () => {
      // //             cc.sys.openURL(GlobalVariables.HELP_URL);
      // //         });
      // // 
      // //         this.btn_close.node.on("click", () => {
      // //             this.hide();
      // //         });
      // // 
      // //         this.btn_chips.forEach((chip, index) => {
      // //             let ind = index;
      // //             chip.node.on("click", () => {
      // //                 if (!this.kimCuong_SlotMachineCmp.isStopped()) {
      // //                     NotiView.getInstance().showMessage("Đang Quay");
      // //                     return;
      // //                 }
      // // 
      // //                 this.highlightBet(ind);
      // //                 this.bet = this.chip_values[ind];
      // //                 this.subscribeJackpot();
      // //             });
      // //         });
      // // 
      // //         this.tog_auto.node.on("toggle", () => {
      // //             if (this.tog_auto.isChecked && this.kimCuong_SlotMachineCmp.isStopped()) {
      // //                 this.spin();
      // //             }
      // //         });
      // // 
      // //         this.kimCuong_SlotMachineCmp.onMachineStopped = () => {                
      // //             let showResult = cc.callFunc(() => {
      // //                 this.showResult(() => {
      // //                     if (this.tog_auto.isChecked && this.kimCuong_SlotMachineCmp.isStopped()) {
      // //                         this.spin();
      // //                     }else if(this.kimCuong_SlotMachineCmp.isStopped()) {
      // //                         let resultLines = this.rewards.map(reward => {
      // //                             let lineID = reward["lid"];
      // //                             return lineID;
      // //                         });
      // //                         this.kimCuong_SlotMachineCmp.showEachLines(resultLines,1);
      // //                     }
      // //                 });
      // //             });
      // // 
      // //             let finishAct = this.moneyExchange > 0 ? showResult : cc.sequence(cc.delayTime(0.5), cc.callFunc(() => {
      // //                 if (this.tog_auto.isChecked && this.kimCuong_SlotMachineCmp.isStopped()) {
      // //                     this.spin();
      // //                 }
      // //             }));
      // //             this.node.runAction(finishAct);
      // // 
      // //             MiniGameNodeController.getInstance() && MiniGameNodeController.getInstance().sendRefreshMoney();
      // //         };
      // // 
      // //         Downloader.checkVersion(this.config_path,(state) => {
      // //             this.download_state = state;
      // //         });
      // //     }
      // // 
      // //     private highlightBet(ind) {
      // //         this.btn_chips.forEach((chip, index) => {
      // //             let checkmark = chip.node.children[1];
      // //             checkmark.active = index == ind;
      // //         });
      // //     }
      // // 
      // //     private showResult(onContinue) {
      // //         let resultLines = this.rewards.map(reward => {
      // //             let lineID = reward["lid"];
      // //             return lineID;
      // //         });
      // // 
      // //         let timeShowLine = this.tog_fast.isChecked ? 0 : 0.7;
      // //         this.kimCuong_SlotMachineCmp.showLines(resultLines,timeShowLine,0.3,() => {
      // //         });
      // // 
      // //         let showLight = this.moneyExchange > 50 * this.bet;
      // //         this.light.node.active = showLight;
      // //         if (showLight) {
      // //             let timeToRepeat = this.tog_fast.isChecked && this.tog_auto.isChecked ? 3 : 6;
      // //             this.light.repeatTime = timeToRepeat;
      // // 
      // //             this.light.run();
      // // 
      // //             // cc.audioEngine.play(this.sfx_win_big,false,1.0);
      // //         } else {
      // //             // cc.audioEngine.play(this.sfx_win_small,false,1.0);
      // //         }
      // //         this.result_node.stopAllActions();
      // // 
      // //         let pos = this.result_node.position;
      // //         pos.y = -242;
      // //         this.result_node.position = pos;
      // // 
      // //         this.lbl_result_amount.string = "+" + StringUtils.formatNumber(this.moneyExchange);
      // // 
      // //         let showNoHuEffect = cc.sequence(cc.callFunc(() => {
      // //             this.kimCuongNoHuView.show(this.moneyExchange);
      // //         }), this.tog_auto.isChecked ?
      // //             cc.sequence(cc.delayTime(14.5),cc.callFunc(() => {
      // //                 this.kimCuongNoHuView.hide();
      // //             })) : cc.sequence(cc.delayTime(2.5),cc.callFunc(() => {
      // //                 this.kimCuongNoHuView.activeClick();
      // //             })));
      // // 
      // //         let showNormalResult = cc.sequence(cc.callFunc(() => {
      // //             this.result_node.opacity = 255;
      // //         }),
      // //         cc.moveBy(0.5, cc.v2(0, 20)).easing(cc.easeExponentialOut()),
      // //         cc.delayTime(this.tog_fast.isChecked ? 0 : 1.5));
      // // 
      // //         let seq = cc.sequence(
      // //             cc.delayTime(timeShowLine),
      // //             this.wonJackpot ? showNoHuEffect : showNormalResult,
      // //             cc.callFunc(() => onContinue && onContinue()),
      // //             cc.fadeOut(0.5),
      // //         )
      // // 
      // //         this.result_node.runAction(seq);
      // //     }
      // // 
      // //     public static getInstance() {
      // //         return KimCuongGameView.instance;
      // //     }
      // // 
      // //     public showRank() {
      // //         this.kimCuongBetRankView.fetchRank();
      // //     }
      // // 
      // //     public spin() {
      // //         if(this.lineArr.length <= 0) {
      // //             NotiView.getInstance().showMessage("Vui lòng chọn dòng");
      // //             return;
      // //         }
      // //         this.node.stopAllActions();
      // //         this.kimCuong_SlotMachineCmp.spin();
      // // 
      // //         this.requestSpin();
      // //     }
      // // 
      // //     public requestSpin() {
      // //         let dict = {};
      // //         dict["cmd"] = MiniPoker_Message.SPIN_RESULT;
      // //         dict["b"] = this.bet;
      // //         dict["aid"] = this._aid;
      // // 
      // //         dict["ls"] = this.lineArr;
      // // 
      // //         dict["gid"] = GlobalVariables.TRUNGPS;
      // // 
      // //         let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
      // //         MiniGameNetworkHandler.send(mes);
      // //     }
      // // 
      // //     public stop(items: KimCuongItem[]) {
      // //         if(!this.kimCuong_SlotMachineCmp.isSpinning()) return;
      // //         if(items.length == 0) {
      // //             this.moneyExchange = 0;
      // //             this.rewards = [];
      // //         }
      // //         this.node.runAction(cc.sequence(cc.delayTime(KimCuong_SlotMachineCmp.TIME_TO_SHOW_RESULT), cc.callFunc(() => {
      // //             if (this.tog_fast.isChecked) this.kimCuong_SlotMachineCmp.stopImmediately(items);
      // //             else this.kimCuong_SlotMachineCmp.stop(items);
      // //         })));
      // //     }
      // // 
      // //     public showBetHistory() {
      // //         this.kimCuongBetHistoryView.fetchHistory();
      // //     }
      // // 
      // //     public setLines(lines : number[]) {
      // //         this.lineArr = lines;
      // //         this.line_num_text.string = lines.length.toString();
      // //     }
      // // 
      // //     public receiveData(aid, moneyExchange, rewards, symbols : number[]) {
      // //         this._aid = aid;
      // // 
      // //         this.symbols = symbols.map(x => {
      // //             let a = new KimCuongItem();
      // //             a.decodeItem(x);
      // //             return a;
      // //         });
      // //         this.rewards = rewards;
      // //         this.moneyExchange = moneyExchange;
      // //         this.wonJackpot = this.rewards.filter(rew => rew["iJ"] == true).length > 0;
      // //         this.stop(this.symbols);
      // //     }
      // // 
      // //     public subscribeJackpot(subscribe = true) {
      // //         let cmd = MiniPoker_Message.SUBSCRIBE_JACKPOT;
      // //         if (!subscribe) {
      // //             cmd = MiniPoker_Message.UNSUBSCRIBE_JACKPOT;
      // //         }
      // // 
      // //         let dict = {};
      // //         dict["cmd"] = cmd;
      // //         dict["gid"] = GlobalVariables.TRUNGPS;
      // // 
      // //         let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
      // //         MiniGameNetworkHandler.send(mes);
      // //     }
      // // 
      // //     public updateJackpot(jars: [], isSubcribe = false) {
      // //         if (isSubcribe) this._jackpotInfos = [];
      // // 
      // //         for (let i = 0; i < jars.length; i++) {
      // //             let jackpotDict = jars[i];
      // // 
      // //             let jackpot = jackpotDict["J"];
      // //             let aid = jackpotDict["aid"];
      // //             let bet = jackpotDict["b"];
      // // 
      // //             if (isSubcribe) {
      // //                 let newJackpot = new KimCuongJackpotInfo();
      // //                 newJackpot.jackpot = jackpot;
      // //                 newJackpot.aid = aid;
      // //                 newJackpot.bet = bet;
      // // 
      // //                 this._jackpotInfos.push(newJackpot);
      // //             }
      // //             else {
      // //                 for (let j = 0; j < this._jackpotInfos.length; j++) {
      // //                     if (this._jackpotInfos[j].aid == aid && this._jackpotInfos[j].bet == bet) {
      // //                         this._jackpotInfos[j].jackpot = jackpot;
      // //                         break;
      // //                     }
      // //                 }
      // //             }
      // //         }
      // // 
      // //         if (isSubcribe) {
      // //             let tempSortedJackpot: KimCuongJackpotInfo[] = [];
      // //             for (let i = 0; i < this._jackpotInfos.length; i++) {
      // //                 if (this._jackpotInfos[i].aid == 1) {
      // //                     let newJackpot = new KimCuongJackpotInfo();
      // //                     newJackpot.jackpot = this._jackpotInfos[i].jackpot;
      // //                     newJackpot.aid = this._jackpotInfos[i].aid;
      // //                     newJackpot.bet = this._jackpotInfos[i].bet;
      // // 
      // //                     tempSortedJackpot.push(newJackpot);
      // //                 }
      // //             }
      // //             for (let i = 0; i < this._jackpotInfos.length; i++) {
      // //                 if (this._jackpotInfos[i].aid == 2) {
      // //                     let newJackpot = new KimCuongJackpotInfo();
      // //                     newJackpot.jackpot = this._jackpotInfos[i].jackpot;
      // //                     newJackpot.aid = this._jackpotInfos[i].aid;
      // //                     newJackpot.bet = this._jackpotInfos[i].bet;
      // // 
      // //                     tempSortedJackpot.push(newJackpot);
      // //                 }
      // //             }
      // // 
      // //             let tempAid = 1;
      // //             for (let i = 0; i < tempSortedJackpot.length - 1; i++) {
      // // 
      // //                 for (let j = i + 1; j < tempSortedJackpot.length; j++) {
      // //                     if (tempSortedJackpot[i].aid == tempAid && tempSortedJackpot[j].aid == tempAid) {
      // // 
      // //                         if (tempSortedJackpot[j].bet < tempSortedJackpot[i].bet) {
      // //                             let tempBet = tempSortedJackpot[i].bet;
      // //                             let tempJackpot = tempSortedJackpot[i].jackpot;
      // // 
      // //                             tempSortedJackpot[i].bet = tempSortedJackpot[j].bet;
      // //                             tempSortedJackpot[i].jackpot = tempSortedJackpot[j].jackpot;
      // // 
      // //                             tempSortedJackpot[j].bet = tempBet;
      // //                             tempSortedJackpot[j].jackpot = tempJackpot;
      // // 
      // //                             j = i + 1;
      // //                         }
      // //                     }
      // //                 }
      // // 
      // //                 if (i == tempSortedJackpot.length - 2 && tempAid == 1) {
      // //                     i = 0;
      // //                     tempAid = 2;
      // //                 }
      // //             }
      // // 
      // //             this._jackpotInfos = tempSortedJackpot;
      // //         }
      // // 
      // //         this.updateJackpotLabels(!isSubcribe);
      // //     }
      // // 
      // //     public updateJackpotLabels(withFx) {
      // //         for (let i = 0; i < this._jackpotInfos.length; i++) {
      // //             if (this._jackpotInfos[i].aid == this._aid && this._jackpotInfos[i].bet == this.bet) {
      // //                 this.jackpot_tween && this.jackpot_tween.stop();
      // // 
      // //                 if (!withFx) {
      // //                     this.jackpot_amount = this._jackpotInfos[i].jackpot;
      // //                     this.lblJackpot.string = StringUtils.formatNumber(this.jackpot_amount);
      // //                 } else {
      // //                     let obj = { a: this.jackpot_amount };
      // // 
      // //                     this.jackpot_tween = cc.tween(obj)
      // //                         .to(0.5, { a: this._jackpotInfos[i].jackpot }, {
      // //                             progress: (start, end, current, ratio) => {
      // //                                 if(this.lblJackpot != undefined) {
      // //                                     this.lblJackpot.string = StringUtils.formatNumber(Math.floor(current));
      // //                                 }
      // //                                 return start + (end - start) * ratio;
      // //                             }
      // //                         })
      // //                         .start();
      // // 
      // //                     this.jackpot_amount = this._jackpotInfos[i].jackpot;
      // //                 }
      // //                 break;
      // //             }
      // //         }
      // //     }
      // // 
      // //     private downloadZip(paths : string[], onCompleted,onProgress,onError,maxProgress = 1) {
      // //         if(this.download_state == DOWNLOAD_STATE.CACHED) {
      // //             onProgress(maxProgress);
      // //             onCompleted();
      // //         } else {
      // //             Downloader.downloadAndExtractZipData(paths,onError,onProgress,onCompleted,maxProgress);
      // //         }
      // //     }
      // // 
      // //     public show() {
      // //         if(MiniGameNodeController.getInstance().isDownloading()) {
      // //             NotiView.getInstance().showMessage('Xin vui lòng đợi game tải xong.');
      // //             return;
      // //         }
      // //         
      // //         let onOpen = () => {
      // //             this.main.stopAllActions();
      // // 
      // //             MiniGameNodeController.getInstance().bringGameViewToTop(this,true);
      // // 
      // //             this.black_screen.active = true;
      // //             this.node.opacity = 255;
      // // 
      // //             this.main.opacity = 0;
      // //             this.main.scale = 0;
      // // 
      // //             this.main.position = MiniGameNodeController.getInstance().getClosedNodePosition();
      // // 
      // //             let scaleUp = cc.spawn(
      // //                 cc.moveTo(0.3, this.lastest_main_node_position).easing(cc.easeOut(2.5)),
      // //                 cc.fadeIn(0.3).easing(cc.easeIn(2.5)),
      // //                 cc.scaleTo(0.3, 1.0).easing(cc.easeOut(2.5)));
      // //             this.main.runAction(cc.sequence(scaleUp, cc.callFunc(() => {
      // //             })));
      // //         };
      // //         if(this.download_state == DOWNLOAD_STATE.DOWNLOADING) {
      // //             return false;
      // //         }
      // //         else if(this.download_state == DOWNLOAD_STATE.UNDOWNLOADED || this.download_state == DOWNLOAD_STATE.CACHED) {
      // //             this.spr_download_circle.node.active = true;
      // //             this.spr_download_circle.fillRange = 0;
      // //             this.downloadZip(this.download_zip,
      // //                 () => { // // completed download zip
      // //                 Downloader.downloadSpriteFrameAssets(this.download_assets, true,(err) => {
      // //                     cc.log("Failed to download kim cuong:",err);
      // //                 },(pro) => {
      // //                     this.spr_download_circle.fillRange += pro;
      // //                 },() => {
      // //                     this.download_state = DOWNLOAD_STATE.DOWNLOADED;
      // //                     this.spr_download_circle.node.active = false;
      // //                     this.kimCuong_SlotMachineCmp.init();
      // //                     Downloader.updateRemoteVersion(this.config_path);
      // //                     if(MiniGameNodeController.getInstance().isOpened()) {
      // //                         MiniGameNodeController.getInstance().close();
      // //                         onOpen();
      // //                     }
      // //                 },() => {
      // //                     this.download_state = DOWNLOAD_STATE.UNDOWNLOADED;
      // //                     this.spr_download_circle.node.active = false;
      // //                 },0.5);
      // //             },(pro) => { // progress download zip
      // //                 this.spr_download_circle.fillRange += pro;
      // //             },() => { // error download zip
      // //                 this.download_state = DOWNLOAD_STATE.UNDOWNLOADED;
      // //                 this.spr_download_circle.node.active = false;
      // //             },0.5);
      // //             this.download_state = DOWNLOAD_STATE.DOWNLOADING;
      // //             return false;
      // //         }
      // //         
      // //         onOpen();
      // //         return true;
      // //     }
      // // 
      // //     public hide(isImmediately = false) {
      // //         if(this.node.opacity == 0) return;
      // //         
      // //         let time_offset = isImmediately ? 0 : 1;
      // //         this.main.stopAllActions();
      // // 
      // //         this.lastest_main_node_position = this.main.position;
      // // 
      // //         this.black_screen.active = false;
      // //         this.main.opacity = 255;
      // //         this.main.scale = 1;
      // // 
      // //         let scaleDown = cc.spawn(
      // //             cc.moveTo(0.4 * time_offset, MiniGameNodeController.getInstance().getClosedNodePosition()).easing(cc.easeIn(1.5)),
      // //             cc.fadeOut(0.3 * time_offset).easing(cc.easeOut(1.5)),
      // //             cc.scaleTo(0.4 * time_offset, 0).easing(cc.easeIn(1.5))
      // //         );
      // //         this.main.runAction(cc.sequence(scaleDown, cc.callFunc(() => {
      // //             this.node.opacity = 0;
      // //             MiniGameNodeController.getInstance().bringGameViewToTop(this,false);
      // //         })));
      // //     }
      // // 
      // //     public init() {
      // //         this.main.stopAllActions();
      // // 
      // //         this.lastest_main_node_position = this.main.position;
      // // 
      // //         this.black_screen.active = false;
      // // 
      // //         let scaleDown = cc.spawn(
      // //             cc.moveTo(0.4, MiniGameNodeController.getInstance().getClosedNodePosition()).easing(cc.easeIn(1.5)),
      // //             cc.fadeOut(0.3).easing(cc.easeOut(1.5)),
      // //             cc.scaleTo(0.4, 0).easing(cc.easeIn(1.5))
      // //         );
      // //         this.main.runAction(cc.sequence(scaleDown,cc.callFunc(() => {
      // //             this.node.opacity = 0;
      // //             MiniGameNodeController.getInstance().bringGameViewToTop(this,false);
      // //         })));
      // //     }
      // // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GlobalVariables.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, Vec3;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
    }],
    execute: function () {
      exports('GLOBAL_MESSAGE', void 0);

      cclegacy._RF.push({}, "1475aRd6qZBPJRco3ccbm3x", "GlobalVariables", undefined);

      let GLOBAL_MESSAGE;

      (function (GLOBAL_MESSAGE) {
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["ERROR_MESSAGE"] = 1] = "ERROR_MESSAGE";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["USER_INFO"] = 100] = "USER_INFO";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["BROADCAST_MESSAGES"] = 101] = "BROADCAST_MESSAGES";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["VERIFY_PHONE_NUMBER"] = 103] = "VERIFY_PHONE_NUMBER";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["MESSAGES_AND_NEWS"] = 104] = "MESSAGES_AND_NEWS";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["PROMOTION_MESSAGE"] = 6] = "PROMOTION_MESSAGE";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["MESSAGE_INGAME"] = 7] = "MESSAGE_INGAME";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["FREE_GIFTCARD"] = 8] = "FREE_GIFTCARD";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["BROADCAST_MESSAGE"] = 10] = "BROADCAST_MESSAGE";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["SHOW_WEBVIEW"] = 12] = "SHOW_WEBVIEW";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["GET_TABLES"] = 300] = "GET_TABLES";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["FIND_PLAYERS_TO_INVITE"] = 303] = "FIND_PLAYERS_TO_INVITE";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["JOIN_TABLE_INVITATION"] = 305] = "JOIN_TABLE_INVITATION";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["QUICK_PLAY"] = 307] = "QUICK_PLAY";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["CREATE_TABLE"] = 308] = "CREATE_TABLE";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["REFRESH_MONEY"] = 310] = "REFRESH_MONEY";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["CREATE_TABLE_RESPONSE"] = 311] = "CREATE_TABLE_RESPONSE";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["QUICK_PLAY_WITH_BET"] = 313] = "QUICK_PLAY_WITH_BET";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["BOOK_ROOM"] = 315] = "BOOK_ROOM";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["CANCEL_BOOKING_ROOM"] = 316] = "CANCEL_BOOKING_ROOM";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["LOAN_MESSAGE"] = 322] = "LOAN_MESSAGE";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["GET_MAX_LOAN"] = 339] = "GET_MAX_LOAN";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["REFRESH_JARS"] = 335] = "REFRESH_JARS";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["GET_JACKPOTS"] = 317] = "GET_JACKPOTS";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["INGAME_USER_READY"] = 5] = "INGAME_USER_READY";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["INGAME_USER_CHAT"] = 102] = "INGAME_USER_CHAT";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["INGAME_USER_LEAVE_AND_JOIN_TABLE"] = 200] = "INGAME_USER_LEAVE_AND_JOIN_TABLE";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["INGAME_JOIN_TABLE_INFOS"] = 202] = "INGAME_JOIN_TABLE_INFOS";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["INGAME_CHANGE_HOST"] = 203] = "INGAME_CHANGE_HOST";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["INGAME_SEND_READY_TO_COUNT_DOWN"] = 204] = "INGAME_SEND_READY_TO_COUNT_DOWN";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["INGAME_UPDATE_MONEY"] = 205] = "INGAME_UPDATE_MONEY";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["INGAME_JACKPOT"] = 206] = "INGAME_JACKPOT";
        GLOBAL_MESSAGE[GLOBAL_MESSAGE["INGAME_GET_JACKPOTS"] = 207] = "INGAME_GET_JACKPOTS";
      })(GLOBAL_MESSAGE || (GLOBAL_MESSAGE = exports('GLOBAL_MESSAGE', {})));

      class GlobalVariables {
        static getScale() {
          return Vec3.ONE; // return GameUtils.isTablet() || cc.sys.platform == sys.DESKTOP_BROWSER ? 0.7 : 1;
        }

      }

      exports('GlobalVariables', GlobalVariables);
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // import GameUtils from "./GameUtils";
      // 
      // export enum GLOBAL_MESSAGE {
      //     ERROR_MESSAGE = 1,
      //     USER_INFO = 100,
      //     BROADCAST_MESSAGES = 101,
      //     VERIFY_PHONE_NUMBER = 103,
      //     MESSAGES_AND_NEWS = 104,
      //     PROMOTION_MESSAGE = 6,
      //     MESSAGE_INGAME = 7,
      //     FREE_GIFTCARD = 8,
      //     BROADCAST_MESSAGE = 10,
      //     SHOW_WEBVIEW = 12,
      //     GET_TABLES = 300,
      //     FIND_PLAYERS_TO_INVITE = 303,
      //     JOIN_TABLE_INVITATION = 305,
      //     QUICK_PLAY = 307,
      //     CREATE_TABLE = 308,
      //     REFRESH_MONEY = 310,
      //     CREATE_TABLE_RESPONSE = 311,
      //     QUICK_PLAY_WITH_BET = 313,
      //     BOOK_ROOM = 315,
      //     CANCEL_BOOKING_ROOM = 316,
      //     LOAN_MESSAGE = 322,
      //     GET_MAX_LOAN = 339,
      //     REFRESH_JARS = 335,
      //     GET_JACKPOTS = 317,
      // 
      //     INGAME_USER_READY = 5,
      //     INGAME_USER_CHAT = 102,
      //     INGAME_USER_LEAVE_AND_JOIN_TABLE = 200,
      //     INGAME_JOIN_TABLE_INFOS = 202,
      //     INGAME_CHANGE_HOST = 203,
      //     INGAME_SEND_READY_TO_COUNT_DOWN = 204,
      //     INGAME_UPDATE_MONEY = 205
      // };
      // 
      // export class GlobalVariables {
      //     public static DISPLAY_NAME = "";
      // 
      //     public static SERVER_ACCESS_TOKEN = null;
      //     public static REFRESH_TOKEN = null;
      // 
      //     public static BET_RANK_URL_TAI_XIU = "https://api.vinclub-shopify.com/sa?command=fetch-mini-game-ranking&gameName=%game_name";
      // 
      //     public static BET_RANK_TOP_URL = "https://api.vinclub-shopify.com/sa?command=fetchTopSlotMachine&gameId=%gameid%&limit=6&skip=%skip%";
      //     public static BET_HISTORY_URL = "https://api.vinclub-shopify.com/sa?command=fetchSlotMachineHistory&assetId=1&limit=6&skip=%skip%&gameId=%gameid%";
      // 
      //     public static BET_RANK_URL_CAOTHAP = "https://api.vinclub-shopify.com/sa?command=fetchSpinBoard&limit=6&skip=%skip%";
      //     public static BET_HISTORY_CAOTHAP = "https://api.vinclub-shopify.com/sa?command=fetchUpdownBettingHistory&limit=6&skip=%skip%"
      // 
      //     public static REFRESH_TOKEN_URL = "https://api.vinclub-shopify.com/id?command=refreshToken&refreshToken=%refreshToken%";
      // 
      //     public static HELP_URL = "https://sun.luatchoi.club/luat-choi?x=1&gameId=100";
      // 
      //     public static GET_LOGIN_INFO = "";
      // 
      //     public static BACAY = 3;
      //     public static XITO = 7;
      //     public static BINH = 4;
      //     public static TIENLEN = 1;
      //     public static POKER = 6;
      //     public static LIENG = 5;
      //     public static SAM = 2;
      //     public static XOCDIA = 9;
      //     public static PHOM = 8;
      //     public static CHAN_GTS = 20;
      //     public static BLACK_JACK = 11;
      // 
      //     public static TAIXIU = 100;
      //     public static MINIPOKER = 199;
      //     public static TRUNGPS = 202;
      //     public static DRAGONBALL = 219;
      //     public static CAOTHAP = 206;
      // 
      //     public static BRANCH = "";
      // 
      //     public static getPlatformID() {
      //         return 4;
      // 
      //         /*if (cc.sys.os == cc.sys.OS_IOS) {
      //             return 2;
      //         }
      //         else if (cc.sys.os == cc.sys.OS_ANDROID) {
      //             return 1;
      //         } else if(cc.sys.isBrowser) {
      //             return 4;
      //         } else {
      //             return 3;
      //         }*/
      //     }
      //     public static getSecretKey() {
      //         return "YICQFXSBCASEMZWKJBQH";
      // 
      //         /*if (cc.sys.isMobile) {
      //             return "domaytimduocday";
      //         }
      //         return "YICQFXSBCASEMZWKJBQH";*/
      //     }
      // 
      //     public static getScale() {
      //         return GameUtils.isTablet() || cc.sys.platform == cc.sys.DESKTOP_BROWSER ? 0.7 : 1;
      //     }
      // }

      _defineProperty(GlobalVariables, "DISPLAY_NAME", "");

      _defineProperty(GlobalVariables, "BET_RANK_URL_TAI_XIU", "https://api.tikwin-alipay.com/sa?command=fetchTXUGameBoard");

      _defineProperty(GlobalVariables, "BET_RANK_TOP_URL", "https://api.tikwin-alipay.com/sa?command=fetchTopSlotMachine&gameId=%gameid%&limit=6&skip=%skip%");

      _defineProperty(GlobalVariables, "BET_HISTORY_URL", "https://api.tikwin-alipay.com/sa?command=fetchSlotMachineHistory&assetId=1&limit=6&skip=%skip%&gameId=%gameid%");

      _defineProperty(GlobalVariables, "BET_RANK_URL_CAOTHAP", "https://api.tikwin-alipay.com/sa?command=fetchSpinBoard&limit=6&skip=%skip%");

      _defineProperty(GlobalVariables, "BET_HISTORY_CAOTHAP", "https://api.tikwin-alipay.com/sa?command=fetchUpdownBettingHistory&limit=6&skip=%skip%");

      _defineProperty(GlobalVariables, "REFRESH_TOKEN_URL", "https://api.tikwin-alipay.com/id?command=refreshToken&refreshToken=%refreshToken%");

      _defineProperty(GlobalVariables, "BACAY", 3);

      _defineProperty(GlobalVariables, "XITO", 7);

      _defineProperty(GlobalVariables, "BINH", 4);

      _defineProperty(GlobalVariables, "TIENLEN", 1);

      _defineProperty(GlobalVariables, "POKER", 6);

      _defineProperty(GlobalVariables, "LIENG", 5);

      _defineProperty(GlobalVariables, "SAM", 2);

      _defineProperty(GlobalVariables, "XOCDIA", 9);

      _defineProperty(GlobalVariables, "PHOM", 8);

      _defineProperty(GlobalVariables, "CHAN_GTS", 20);

      _defineProperty(GlobalVariables, "BLACK_JACK", 11);

      _defineProperty(GlobalVariables, "BAU_CUA_FULL", 12);

      _defineProperty(GlobalVariables, "LOBBY", -1);

      _defineProperty(GlobalVariables, "TAIXIU", 100);

      _defineProperty(GlobalVariables, "MINIPOKER", 199);

      _defineProperty(GlobalVariables, "TRUNGPS", 202);

      _defineProperty(GlobalVariables, "DRAGONBALL", 219);

      _defineProperty(GlobalVariables, "CAOTHAP", 206);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FullScreenGameItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './JackpotItemView.ts', './GameUtils.ts', './LobbyViewController.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Button, _decorator, Component, systemEvent, JackpotItemView, GameUtils, LobbyViewController;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
      systemEvent = module.systemEvent;
    }, function (module) {
      JackpotItemView = module.JackpotItemView;
    }, function (module) {
      GameUtils = module.default;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "19dae0w0mRAeLA2K6ZiwKei", "FullScreenGameItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let FullScreenGameItemView = exports('FullScreenGameItemView', (_dec = ccclass('FullScreenGameItemView'), _dec2 = property(Button), _dec3 = property([JackpotItemView]), _dec4 = property(Number), _dec(_class = (_class2 = (_temp = class FullScreenGameItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "button", _descriptor, this);

          _initializerDefineProperty(this, "jackpotItemView", _descriptor2, this);

          _initializerDefineProperty(this, "gameID", _descriptor3, this);
        }

        onLoad() {
          var _this$button;

          this.init(this.gameID);
          (_this$button = this.button) === null || _this$button === void 0 ? void 0 : _this$button.node.on("click", () => {
            var _LobbyViewController$;

            (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.playGame(this.gameID);
          });
        }

        init(gameID) {
          this.jackpotItemView.forEach((x, i) => {
            switch (i) {
              case 0:
                {
                  x.updateAmount(GameUtils.getRandomInt(100000, 999999));
                  break;
                }

              case 1:
                {
                  x.updateAmount(GameUtils.getRandomInt(1000000, 9999999));
                  break;
                }

              case 2:
                {
                  x.updateAmount(GameUtils.getRandomInt(10000000, 99999999));
                  break;
                }
            }
          });
          systemEvent.off(LobbyViewController.UPDATE_JACKPOT_EVENT_KEY.replace("%gameID", this.gameID.toString()));
          systemEvent.on(LobbyViewController.UPDATE_JACKPOT_EVENT_KEY.replace("%gameID", gameID.toString()), data => {
            data.forEach((d, i) => {
              if (this.jackpotItemView[i] != null && this.jackpotItemView[i] != undefined) {
                this.jackpotItemView[i].updateAmount(d);
              }
            });
          });
        }

        onDestroy() {
          systemEvent.off(LobbyViewController.UPDATE_JACKPOT_EVENT_KEY.replace("%gameID", this.gameID.toString()));
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "jackpotItemView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gameID", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KimCuong_SlotMachineCmp.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './LineCmp.ts', './KimCuong_SlotMachineColumn.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, Label, Tween, tween, UITransform, Vec3, Vec2, Color, LineCmp, KimCuongSlotMachineColumn_SlotMachineColumn, SlotMachineState;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Label = module.Label;
      Tween = module.Tween;
      tween = module.tween;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Vec2 = module.Vec2;
      Color = module.Color;
    }, function (module) {
      LineCmp = module.default;
    }, function (module) {
      KimCuongSlotMachineColumn_SlotMachineColumn = module.default;
      SlotMachineState = module.SlotMachineState;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

      cclegacy._RF.push({}, "1c558m2/NFGupHxi/oqj+L3", "KimCuong_SlotMachineCmp", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let KimCuongSlotMachineCmp_SlotMachineCmp = exports('default', (_dec = ccclass('KimCuongSlotMachineCmp'), _dec2 = property([KimCuongSlotMachineColumn_SlotMachineColumn]), _dec3 = property(LineCmp), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = (_temp = _class3 = class KimCuongSlotMachineCmp_SlotMachineCmp extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "colums", _descriptor, this);

          _initializerDefineProperty(this, "lineCmp", _descriptor2, this);

          _initializerDefineProperty(this, "lineNumberLeft", _descriptor3, this);

          _initializerDefineProperty(this, "lineNumberRight", _descriptor4, this);

          _defineProperty(this, "onMachineStopped", () => {});

          _defineProperty(this, "lineNumberNode", []);
        }

        init() {
          this.colums.forEach(x => x.init());

          this.colums[this.colums.length - 1].onStopped = () => this.onMachineStopped();

          let leftNumberNodes = this.lineNumberLeft.children;
          let rightNumberNodes = this.lineNumberRight.children;
          leftNumberNodes.forEach(x => this.lineNumberNode.push(x));
          rightNumberNodes.forEach(x => this.lineNumberNode.push(x));
          this.lineNumberNode.sort((node1, node2) => {
            let a = +node1.getComponentInChildren(Label).string;
            let b = +node2.getComponentInChildren(Label).string;
            return a > b ? 1 : -1;
          });
        }

        spin() {
          this.lineCmp.clear();
          Tween.stopAllByTarget(this.lineCmp.node);
          this.colums.forEach(x => x.spin());
        }

        stop(items) {
          let time = [0.6, 1.2, 1.8];
          this.colums.forEach((column, index) => {
            let col = column;
            let symbols = [items[index], items[index + 3], items[index + 6]];
            let sequence = tween(col.node).sequence(tween().delay(time[index]), tween().call(() => {
              col.stop(symbols);
            }));
            sequence.start();
          });
        }

        stopImmediately(items) {
          let time = [0.0, 0.0, 0.0];
          this.colums.forEach((column, index) => {
            let col = column;
            let symbols = [items[index], items[index + 3], items[index + 6]];
            let sequence = tween(col.node).sequence(tween().delay(time[index]), tween().call(() => {
              col.stop(symbols);
            }));
            sequence.start();
          });
        }

        isStopped() {
          return this.colums.filter(x => x.getstate() == SlotMachineState.STOPPED).length >= this.colums.length;
        }

        isSpinning() {
          return this.colums.filter(x => x.getstate() == SlotMachineState.SPINNING).length >= this.colums.length;
        }

        showLines(lineIDs, timeShowLines, finishAfter, onCompleted) {
          this.lineCmp.clear();
          Tween.stopAllByTarget(this.lineCmp.node);
          let delayTime = 0;
          let delayTimeJump = timeShowLines / lineIDs.length;
          lineIDs.forEach(lineid => {
            let seq = tween(this.lineCmp.node).sequence(tween().delay(delayTime), tween().call(() => {
              this.drawLine(lineid, false);
            }));
            seq.start();
            delayTime += delayTimeJump;
          });
          let seq = tween(this.lineCmp.node).sequence(tween().delay(timeShowLines + finishAfter), tween().call(() => {
            onCompleted && onCompleted();
          }));
          seq.start();
        }

        showEachLines(lineIDs, timePerOneLines = 0) {
          this.lineCmp.clear();
          Tween.stopAllByTarget(this.lineCmp.node);
          let delayTime = 0;
          lineIDs.forEach(lineid => {
            let seq = tween(this.lineCmp.node).sequence(tween().delay(delayTime), tween().call(() => {
              this.drawLine(lineid, true);
            }));
            seq.start();
            delayTime += timePerOneLines;
          });
        }

        showLine(lineID) {
          this.lineCmp.clear();
          this.drawLine(lineID, true);
        }

        drawLine(lineID, isClear) {
          let line = KimCuongSlotMachineCmp_SlotMachineCmp.LINE[lineID];
          let positions = line.map((row, column) => {
            let colCmp = this.colums[column];
            let wPos = colCmp.getLineWorldPosition()[row];
            return wPos;
          });
          let wPos = this.lineNumberNode[lineID].parent.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.lineNumberNode[lineID].position));

          if (lineID > 10) {
            positions.push(wPos);
          } else {
            positions.unshift(wPos);
          }

          this.lineCmp.draw(positions.map(pos => new Vec2(pos.x, pos.y)), 5, new Color("#FF993B"), null, isClear);
        }

      }, _defineProperty(_class3, "SPIN_SPEED", 1500), _defineProperty(_class3, "TIME_TO_SHOW_RESULT", 0.05), _defineProperty(_class3, "LINE", [[2, 2, 2], [1, 1, 1], [0, 0, 0], [2, 0, 2], [0, 2, 0], [2, 1, 2], [2, 1, 0], [0, 1, 2], [1, 0, 1], [1, 2, 1], [0, 1, 0], [2, 2, 1], [1, 1, 0], [1, 1, 2], [0, 0, 1], [1, 2, 2], [0, 1, 1], [2, 1, 1], [1, 0, 0], [2, 0, 1]]), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "colums", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lineCmp", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lineNumberLeft", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lineNumberRight", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class)); //  * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
      //  */
      // // // Learn TypeScript:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // // Learn Attribute:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // // Learn life-cycle callbacks:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // // 
      // // import { GameCard } from "../../../Utils/MauBinh_CardLib";
      // // import LineCmp from "../../TaiXiu/LineCmp";
      // // import KimCuong_SlotMachineColumn, { SlotMachineState } from "./KimCuong_SlotMachineColumn";
      // // import { KimCuongItem } from "./KimCuong_SlotMachineItemView";
      // // 
      // // const {ccclass, property} = cc._decorator;
      // // 
      // // @ccclass
      // // export default class KimCuong_SlotMachineCmp extends cc.Component {
      // //     @property([KimCuong_SlotMachineColumn])
      // //     private colums : KimCuong_SlotMachineColumn[] = [];
      // // 
      // //     @property(LineCmp)
      // //     private lineCmp : LineCmp = null;
      // // 
      // //     @property(cc.Node)
      // //     private lineNumberLeft : cc.Node = null;
      // // 
      // //     @property(cc.Node)
      // //     private lineNumberRight : cc.Node = null;
      // // 
      // //     public static SPIN_SPEED = 900;
      // // 
      // //     public static TIME_TO_SHOW_RESULT = 0.05;
      // // 
      // //     public onMachineStopped = () => {};
      // // 
      // //     private lineNumberNode : cc.Node[] = []
      // // 
      // //     public static LINE = [
      // //         [2,2,2],[1,1,1],[0,0,0],[2,0,2],[0,2,0],
      // //         [2,1,2],[2,1,0],[0,1,2],[1,0,1],[1,2,1],
      // //         [0,1,0],[2,2,1],[1,1,0],[1,1,2],[0,0,1],
      // //         [1,2,2],[0,1,1],[2,1,1],[1,0,0],[2,0,1]
      // //     ];
      // // 
      // //     public init() {
      // //         this.colums.forEach(x => x.init());
      // // 
      // //         this.colums[this.colums.length - 1].onStopped = () => this.onMachineStopped();
      // //         
      // //         let leftNumberNodes : cc.Node[] = this.lineNumberLeft.children;
      // //         let rightNumberNodes : cc.Node [] = this.lineNumberRight.children
      // // 
      // //         leftNumberNodes.forEach(x => this.lineNumberNode.push(x));
      // //         rightNumberNodes.forEach(x => this.lineNumberNode.push(x));
      // // 
      // //         this.lineNumberNode.sort((node1,node2) => {
      // //             let a = +node1.getComponentInChildren(cc.Label).string;
      // //             let b = +node2.getComponentInChildren(cc.Label).string;
      // //             return a > b ? 1 : -1;
      // //         });
      // //     }
      // // 
      // //     public spin() {
      // //         this.lineCmp.clear();
      // //         this.lineCmp.node.stopAllActions();
      // // 
      // //         this.colums.forEach(x => x.spin());
      // //     }
      // // 
      // //     public stop(items : KimCuongItem[]){
      // //         let time = [0.6,1.2,1.8];
      // //         
      // //         this.colums.forEach((column,index) => {
      // //             let col = column;
      // //             let symbols = [items[index],items[index + 3],items[index + 6]];
      // //             let sequence = cc.sequence(cc.delayTime(time[index]),cc.callFunc(() => {
      // //                 col.stop(symbols);
      // //             }));
      // //             col.node.runAction(sequence);
      // //         });
      // //     }
      // // 
      // //     public stopImmediately(items : KimCuongItem[]){
      // //         let time = [0.0,0.0,0.0];
      // //         
      // //         this.colums.forEach((column,index) => {
      // //             let col = column;
      // //             let symbols = [items[index],items[index + 3],items[index + 6]];
      // //             let sequence = cc.sequence(cc.delayTime(time[index]),cc.callFunc(() => {
      // //                 col.stop(symbols);
      // //             }));
      // //             col.node.runAction(sequence);
      // //         });
      // //     }
      // // 
      // //     public isStopped() {
      // //         return this.colums.filter(x => x.getstate() == SlotMachineState.STOPPED).length >= this.colums.length;
      // //     }
      // // 
      // //     public isSpinning() {
      // //         return this.colums.filter(x => x.getstate() == SlotMachineState.SPINNING).length >= this.colums.length;
      // //     }
      // // 
      // // 
      // //     public showLines(lineIDs : number[],timeShowLines,finishAfter,onCompleted) {
      // //         this.lineCmp.clear();
      // //         this.lineCmp.node.stopAllActions();
      // // 
      // //         let delayTime = 0;
      // //         let delayTimeJump = timeShowLines / lineIDs.length;
      // //         lineIDs.forEach(lineid => {
      // //             this.lineCmp.node.runAction(cc.sequence(cc.delayTime(delayTime),cc.callFunc(() => {
      // //                 this.drawLine(lineid,false);
      // //             })));
      // // 
      // //             delayTime += delayTimeJump;
      // //         });
      // // 
      // //         this.lineCmp.node.runAction(cc.sequence(cc.delayTime(timeShowLines + finishAfter),cc.callFunc(() => {
      // //             onCompleted && onCompleted();
      // //         })));
      // //     }
      // // 
      // //     public showEachLines(lineIDs : number[],timePerOneLines = 0) {
      // //         this.lineCmp.clear();
      // //         this.lineCmp.node.stopAllActions();
      // // 
      // //         let delayTime = 0;
      // //         lineIDs.forEach(lineid => {
      // //             this.lineCmp.node.runAction(cc.sequence(cc.delayTime(delayTime),cc.callFunc(() => {
      // //                 this.drawLine(lineid,true);
      // //             })));
      // // 
      // //             delayTime += timePerOneLines;
      // //         });
      // //     }
      // // 
      // //     public showLine(lineID : number) {
      // //         this.lineCmp.clear();
      // //         this.drawLine(lineID,true);
      // //     }
      // // 
      // //     private drawLine(lineID,isClear) {
      // //         let line = KimCuong_SlotMachineCmp.LINE[lineID];
      // //         let positions = line.map((row,column) => {
      // //             let colCmp = this.colums[column];
      // //             let wPos = colCmp.getLineWorldPosition()[row];
      // //             return this.lineCmp.node.parent.convertToNodeSpaceAR(wPos);
      // //         });
      // //         
      // //         let wPos : cc.Vec3 = this.lineNumberNode[lineID].parent.convertToWorldSpaceAR(this.lineNumberNode[lineID].position);
      // //         if(lineID > 10) {
      // //             positions.push(this.lineCmp.node.parent.convertToNodeSpaceAR(wPos));
      // //         } else {
      // //             positions.unshift(this.lineCmp.node.parent.convertToNodeSpaceAR(wPos));
      // //         }
      // //         this.lineCmp.draw(positions.map(pos => new cc.Vec2(pos.x,pos.y)),5,cc.Color.ORANGE.fromHEX("#FF993B"),null,isClear);
      // //     }
      // // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniPoker_SlotMachineItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameUtils.ts', './GlobalVariables.ts', './MauBinh_CardLib.ts', './MiniPokerGameView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Sprite, _decorator, Component, GameUtils, GlobalVariables, GameCard, MiniPokerGameView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      GameUtils = module.default;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      GameCard = module.GameCard;
    }, function (module) {
      MiniPokerGameView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "1d416TbuE5AcIUPUHN2To+a", "MiniPoker_SlotMachineItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MiniPokerSlotMachineItemView_SlotMachineItemView = exports('default', (_dec = ccclass('MiniPokerSlotMachineItemView'), _dec2 = property(Sprite), _dec(_class = (_class2 = (_temp = class MiniPokerSlotMachineItemView_SlotMachineItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spr_item", _descriptor, this);

          _defineProperty(this, "card", null);
        }

        init() {
          this.card = new GameCard();
          this.card.decodeCard(GameUtils.getRandomInt(0, 53), GlobalVariables.BINH);
          this.bright();
        }

        setCard(card) {
          if (card == undefined) return;
          this.card = card;
        }

        blur() {
          let name = this.card.getResourceName() + "_blur";
          this.spr_item.spriteFrame = MiniPokerGameView.getInstance().loaded_card_blur.filter(x => x.name.indexOf(name) >= 0)[0];
        }

        bright() {
          let name = this.card.getResourceName();
          this.spr_item.spriteFrame = MiniPokerGameView.getInstance().loaded_card_normal.filter(x => x.name.indexOf(name) >= 0)[0];
        }

      }, _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spr_item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import GameUtils from "../../../Utils/GameUtils";
      // import { GlobalVariables } from "../../../Utils/GlobalVariables";
      // import { GameCard } from "../../../Utils/MauBinh_CardLib";
      // import MiniPokerGameView from "../MiniPokerGameView";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class MiniPoker_SlotMachineItemView extends cc.Component {
      //     @property(cc.Sprite)
      //     private spr_item: cc.Sprite = null;
      // 
      //     private card : GameCard = null;
      // 
      //     init() {
      //         this.card = new GameCard();
      //         this.card.decodeCard(GameUtils.getRandomInt(0,53),GlobalVariables.BINH);
      //         this.bright();
      //     }
      // 
      //     setCard(card : GameCard) {
      //         if(card == undefined) return;
      //         
      //         this.card = card;
      //     }
      // 
      //     blur() {
      //         let name = this.card.getResourceName() + "_blur";
      //         this.spr_item.spriteFrame = MiniPokerGameView.getInstance().loaded_card_blur.filter(x => x.name.indexOf(name) >= 0)[0];
      //     }
      // 
      //     bright() {
      //         let name = this.card.getResourceName();
      //         this.spr_item.spriteFrame = MiniPokerGameView.getInstance().loaded_card_normal.filter(x => x.name.indexOf(name) >= 0)[0];
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Downloader.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './LobbyViewController.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, LobbyViewController;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1d8859GvwFEDL6Gr0cL0Ypp", "Downloader", undefined); // import CCMiniGameRoot from "../CCMiniGameRoot";


      class SpineData {
        constructor() {
          _defineProperty(this, "texture", void 0);

          _defineProperty(this, "atlas", void 0);

          _defineProperty(this, "json", void 0);
        }

      }

      exports('SpineData', SpineData);

      class DownloaderClient {
        downloadAndExtractZipData(path, onError, onCompleted, onProgress) {//let path_splited = path.split("/");
          //let file_name = path_splited[path_splited.length - 1];
          //let dirpath = path.slice(0, path.length - file_name.length);
          //let localFilePath = jsb.fileUtils.getWritablePath() + path;
          //let fullPath = Downloader.HOST_URL + path;
          //let unzipped = cc.sys.localStorage.getItem("unzipped_" + path);
          //console.log("cuong check unzip 1",path,unzipped);
          //if (unzipped != null) {
          //onProgress(1.0);
          //onCompleted();
          //cc.systemEvent.emit(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,path));
          //return;
          //} else {
          //onProgress(0.15);
          //}
          //Downloader.httpArrayBufferRequest(fullPath, (arraybuffer, url) => {
          //onProgress(0.35); // completed 50%
          //let data = new Uint8Array(arraybuffer);
          //let unzipped = cc.sys.localStorage.getItem("unzipped_" + path);
          //console.log("cuong check unzip 2",path,unzipped);
          //if (unzipped != null) {
          //onProgress(0.5);
          //onCompleted();
          //cc.systemEvent.emit(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,path));
          //} else {
          //let localDirpath = jsb.fileUtils.getWritablePath() + dirpath;
          //if (!jsb.fileUtils.isDirectoryExist(localDirpath)) {
          //jsb.fileUtils.createDirectory(localDirpath);
          //}
          //if (jsb.fileUtils.writeDataToFile(data, localFilePath)) {
          //cc.log('Downloader::Remote write file ZIP succeed', localFilePath, jsb.fileUtils.isFileExist(localFilePath));
          //this.extractZipData(path, data, onCompleted, onProgress, 0.5);
          //} else {
          //cc.log('Downloader::Remote write file ZIP failed.');
          //}
          //}
          //}, onError);
        }

        extractZipData(zip_path, arraybuffer, onCompleted, onProgress, maxPercent = 1) {//let is_valid = (file_name) => {
          //file_name = Downloader.ZIP_FOLDER + file_name;
          //return file_name.indexOf(".meta") < 0 && file_name.indexOf("__MACOSX") < 0
          //&& (file_name.indexOf(".png") >= 0 || file_name.indexOf(".atlas") >= 0 || file_name.indexOf(".json") >= 0);
          //};
          //var zip = new JSZip();
          //zip.loadAsync(arraybuffer).then((content) => {
          //let count = 0;
          //let total = Object.keys(content.files).filter(file_name => is_valid(file_name)).length - 1;
          //let percent = maxPercent / total;
          //content.forEach((path, zipObj) => {
          //path = Downloader.ZIP_FOLDER + path;
          //let path_splited = path.split("/");
          //let file_name = path_splited[path_splited.length - 1];
          //let dirpath = path.slice(0, path.length - file_name.length);
          //let localFilePath = jsb.fileUtils.getWritablePath() + path;
          //if (is_valid(path)) {
          //if (!jsb.fileUtils.isFileExist(localFilePath)) {
          //let localDirpath = jsb.fileUtils.getWritablePath() + dirpath;
          //if (!jsb.fileUtils.isDirectoryExist(localDirpath)) {
          //jsb.fileUtils.createDirectory(localDirpath);
          //}
          //if (file_name.indexOf(".png") >= 0) {
          //zipObj.async("uint8array").then(data => {
          //if (jsb.fileUtils.writeDataToFile(data, localFilePath)) {
          //cc.log('Downloader::extractZipData::Remote write file ', localFilePath, ' succeed');
          //} else {
          //cc.log('Downloader::extractZipData::Remote write file ', localFilePath, ' failed');
          //}
          //onProgress(percent);
          //count += 1;
          //if (count >= total) {
          //onCompleted();
          //cc.sys.localStorage.setItem("unzipped_" + zip_path,true);
          //cc.systemEvent.emit(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,zip_path));
          //}
          //});
          //} else if (file_name.indexOf(".atlas") >= 0 || file_name.indexOf(".json") >= 0) {
          //zipObj.async("text").then(data => {
          //jsb.fileUtils.writeToFile({ "data": data }, localFilePath);
          //onProgress(percent);
          //count += 1;
          //if (count >= total) {
          //onCompleted();
          //cc.sys.localStorage.setItem("unzipped_" + zip_path,true);
          //cc.systemEvent.emit(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,zip_path));
          //}
          //});
          //} else {
          // cc.log("Downloader::extractZipData","Don't support ",file_name," in zip");
          //}
          //}
          //}
          //});
          //});
        }

        downloadSpriteFrameAsset(path, loadFromCache, onError, onCompleted) {//let isExist = false;
          //let path_splited = path.split("/");
          //let file_name = path_splited[path_splited.length - 1];
          //let dirpath = path.slice(0, path.length - file_name.length);
          //if (cc.sys.isMobile && loadFromCache) {
          //isExist = jsb.fileUtils.isFileExist(jsb.fileUtils.getWritablePath() + path);
          //}
          //let fullPath = (isExist && cc.sys.isMobile ? jsb.fileUtils.getWritablePath() : Downloader.HOST_URL) + path;
          //let load = (load_path) => {
          //try {
          //cc.loader.load(load_path, (err, tex: cc.Texture2D) => {
          //if (err == null) {
          //} else {
          //onError && onError(err);
          //}
          //let sprFrame = new cc.SpriteFrame(tex);
          //sprFrame.name = path;
          //cc.systemEvent.emit(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY, path), sprFrame);
          //onCompleted && onCompleted(tex);
          //});
          //} catch (ex) {
          //console.log("init failed!!!");
          //}
          //};
          //load(jsb.fileUtils.getWritablePath() + path);
          //return;
          //if (!isExist) {
          //if (cc.sys.isMobile) {
          //Downloader.httpArrayBufferRequest(fullPath, (arraybuffer, url) => {
          //let fileFullPath = jsb.fileUtils.getWritablePath() + path;
          //if (!jsb.fileUtils.isFileExist(fileFullPath)) {
          //let localDirpath = jsb.fileUtils.getWritablePath() + dirpath;
          //if (!jsb.fileUtils.isDirectoryExist(localDirpath)) {
          //jsb.fileUtils.createDirectory(localDirpath);
          //}
          //if (jsb.fileUtils.writeDataToFile(new Uint8Array(arraybuffer), fileFullPath)) {
          //cc.log('Downloader::Remote write file succeed.', path, loadFromCache, jsb.fileUtils.isFileExist(fileFullPath));
          //} else {
          //cc.log('Downloader::Remote write file failed.');
          //}
          //} else {
          //cc.log('Downloader::Remote write file failed because we had this file:', fileFullPath);
          //}
          //load(fileFullPath);
          //}, () => {
          //onCompleted && onCompleted(null);
          //});
          //} else {
          //load(fullPath);
          //}
          //} else {
          //load(fullPath);
          //}
        }

        downloadSpineTextData(path, loadFromCache, onError, onCompleted) {//let isExist = false;
          //if (cc.sys.isMobile && loadFromCache) {
          //isExist = jsb.fileUtils.isFileExist(jsb.fileUtils.getWritablePath() + path);
          //}
          //let fullPath = (isExist && cc.sys.isMobile ? jsb.fileUtils.getWritablePath() : Downloader.HOST_URL) + path;
          //if (!Downloader.isFileExist(path)) {
          //}
          //if (isExist) {
          //let localPath = jsb.fileUtils.getWritablePath() + path;
          //let string = jsb.fileUtils.getValueMapFromFile(localPath);
          //let jsonString = JSON.stringify(string);
          //let data = JSON.parse(jsonString)["data"];
          //onCompleted(data);
          //} else {
          //Downloader.httpTextRequest(fullPath, function (res, url) {
          //if (res != null && res != undefined && res != "") {
          //if (cc.sys.isMobile) {
          //let localPath = jsb.fileUtils.getWritablePath() + path;
          //if (!jsb.fileUtils.isFileExist(localPath)) {
          //jsb.fileUtils.writeToFile({ "data": res }, localPath);
          //}
          //}
          //onCompleted(res);
          //}
          //}, () => onCompleted(null));
          //}
        }

        downloadSpriteFrameAssets(paths, loadFromCache, onError, onProgress, onCompleted, onUncompleted) {//let progress = 0;
          //let offset = 1 / paths.length;
          //let count = 0;
          //let errorCount = 0;
          //paths.forEach(path => {
          //this.downloadSpriteFrameAsset(path, loadFromCache, (err) => {
          //onError && onError(err);
          //}, (tex) => {
          //progress += offset;
          //onProgress && onProgress(progress);
          //count++;
          //if (tex == null) {
          //errorCount++;
          //}
          //if (count == paths.length) {
          //if (errorCount <= 0) {
          //onCompleted && onCompleted();
          //} else {
          //onUncompleted && onUncompleted();
          //}
          //}
          //});
          //});
        }

        downloadSpineAssets(paths, loadFromCache, onError, onProgress, onCompletedAll, onUncompletedAll, onComplete) {//let progress = 0;
          //let offset = 1 / paths.length;
          //let count = 0;
          //let errorCount = 0;
          //let onCheckComplete = (tex1, tex2, skeletonJson, atlasText, index, spineData) => {
          //count++;
          //if (tex1 != null && tex2 != null && skeletonJson != null && atlasText != null) {
          //onComplete && onComplete(index, spineData);
          //} else {
          //errorCount++;
          //}
          //if (count == paths.length) {
          //if (errorCount <= 0) {
          //onCompletedAll && onCompletedAll();
          //} else {
          //onUncompletedAll && onUncompletedAll();
          //}
          //}
          //};
          //paths.forEach((path, index) => {
          //this.downloadSpriteFrameAsset(path[0], loadFromCache, (err) => {
          //onError && onError(err);
          //}, (tex1) => {
          //progress += offset / path.length;
          //onProgress && onProgress(progress);
          //this.downloadSpriteFrameAsset(path[1], loadFromCache, (err) => {
          //onError && onError(err);
          //}, (tex2) => {
          //progress += offset / path.length;
          //onProgress && onProgress(progress);
          //let fileName1 = path[0].split("/")[path[0].split("/").length - 1];
          //let fileName2 = path[1].split("/")[path[1].split("/").length - 1];
          //let spineData = new sp.SkeletonData();
          //spineData.name = path[0];
          //spineData.textures = [tex1, tex2];
          //spineData.textureNames = [fileName1, fileName2];
          //this.downloadSpineTextData(path[2], loadFromCache, () => { }, (skeletonJson) => {
          //progress += offset / path.length;
          //onProgress && onProgress(progress);
          //try {
          //spineData.skeletonJson = JSON.parse(skeletonJson);
          //this.downloadSpineTextData(path[3], loadFromCache, () => { }, (atlasText) => {
          //try {
          //spineData.atlasText = atlasText;
          //progress += offset / path.length;
          //onProgress && onProgress(progress);
          //onCheckComplete(tex1, tex2, skeletonJson, atlasText, index, spineData);
          //} catch (ex) {
          //cc.log("Downloader failed atlasText with :", ex);
          //onCheckComplete(tex1, tex2, skeletonJson, null, index, spineData);
          //}
          //});
          //} catch (ex) {
          //cc.log("Downloader failed skeletonJson with :", ex);
          //onCheckComplete(tex1, tex2, skeletonJson, null, index, spineData);
          //}
          //});
          //});
          //});
          //});
        }

      }

      exports('DownloaderClient', DownloaderClient);

      class Downloader {
        static createKey(key, name) {//return key.replace("{key}", name);
        }

        static isLocalConfigExist(configPath) {//let path_splited = configPath.split("/");
          //let file_name = path_splited[path_splited.length - 1];
          //let dirpath = configPath.slice(0, configPath.length - file_name.length);
          //let localConfigDir = jsb.fileUtils.getWritablePath() + dirpath;
          //let localConfigPath = jsb.fileUtils.getWritablePath() + configPath;
          //if (!jsb.fileUtils.isDirectoryExist(localConfigDir)) {
          //jsb.fileUtils.createDirectory(localConfigDir);
          //jsb.fileUtils.writeToFile({ "ver": "0.0.0" }, localConfigPath);
          //return false;
          //}
          //return true;
        }

        static isFileExist(path) {//if (!cc.sys.isMobile) return false;
          //let path_splited = path.split("/");
          //let file_name = path_splited[path_splited.length - 1];
          //let dirpath = path.slice(0, path.length - file_name.length);
          //let localDir = jsb.fileUtils.getWritablePath() + dirpath;
          //let localPath = jsb.fileUtils.getWritablePath() + path;
          //if (!jsb.fileUtils.isDirectoryExist(localDir)) {
          //jsb.fileUtils.createDirectory(localDir);
          //jsb.fileUtils.writeToFile({ "data": "none" }, localPath);
          //return false;
          //}
          //return true;
        }

        static updateRemoteVersion(configPath) {//if (!cc.sys.isMobile) return;
          //let localConfigPath = jsb.fileUtils.getWritablePath() + configPath;
          //if (!Downloader.isLocalConfigExist(configPath)) {
          //cc.log("Downloader::updateRemoteVersion", "created local config path");
          //}
          //let remoteConfigPath = Downloader.HOST_URL + configPath;
          //Downloader.httpTextRequest(remoteConfigPath, (res, url) => {
          //cc.log("Downloader::updateRemoteVersion", configPath, "-", res, "-");
          //if (res != null && res != undefined && res != "") {
          //let remote_str = res;
          //let remoteVersion = JSON.parse(remote_str)["ver"];
          //jsb.fileUtils.writeToFile({ "ver": remoteVersion }, localConfigPath);
          //}
          //});
        }

        static checkVersion(configPath, onCompleted) {//if (!cc.sys.isMobile) {
          //onCompleted(DOWNLOAD_STATE.UNDOWNLOADED);
          //return;
          //}
          //let localConfigPath = jsb.fileUtils.getWritablePath() + configPath;
          //if (!Downloader.isLocalConfigExist(configPath)) {
          //cc.log("Downloader", "created local config path");
          //}
          //let remoteConfigPath = Downloader.HOST_URL + configPath;
          //Downloader.httpTextRequest(remoteConfigPath, (res, url) => {
          //cc.log("Downloader::remoteVersion", configPath, "-", res, "-");
          //if (res != null && res != undefined && res != "") {
          //let remote_str = res;
          //let remoteVersion = JSON.parse(remote_str)["ver"];
          //let localVersion = jsb.fileUtils.getValueMapFromFile(localConfigPath)["ver"];
          //cc.log("Downloader::checkVersion", remoteVersion, localVersion);
          //if (remoteVersion == localVersion) {
          //onCompleted(DOWNLOAD_STATE.CACHED);
          //} else {
          //onCompleted(DOWNLOAD_STATE.UNDOWNLOADED);
          //}
          //} else {
          //cc.log("Downloader::remoteVersion error");
          //onCompleted(DOWNLOAD_STATE.UNDOWNLOADED);
          //}
          //});
        }

        static downloadAndExtractZipData(paths, onError, onProgress, onCompleted, progressMax = 1.0) {//let client = new DownloaderClient();
          //let count = 0;
          //paths.forEach(path => {
          //cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,path),() => {
          //});
          //client.downloadAndExtractZipData(path, onError, () => {
          //count++;
          //if (count >= paths.length) {
          //onCompleted();
          //}
          //}, (pro) => {
          //onProgress && onProgress((pro * progressMax) / paths.length);
          //});
          //});
        }

        static downloadSpriteFrameAssets(paths, loadFromCache, onError, onProgress, onCompleted, onUnCompleted, progressMax = 1.0) {//let client = new DownloaderClient();
          //client.downloadSpriteFrameAssets(paths, loadFromCache, onError, (pro) => {
          //onProgress && onProgress(pro * progressMax);
          //}, () => {
          //onCompleted();
          //}, () => {
          //onUnCompleted();
          //});
        }

        static downloadSpineAsset(paths, loadFromCache, onError, onProgress, onCompletedAll, onUnCompletedAll, onCompleted, progressMax = 1.0) {//let client = new DownloaderClient();
          //client.downloadSpineAssets(paths, loadFromCache, onError, (pro) => {
          //onProgress && onProgress(pro * progressMax);
          //}, () => {
          //onCompletedAll();
          //}, () => {
          //onUnCompletedAll();
          //}, onCompleted);
        }

        static httpTextRequest(url, onCompleted, onError = null) {//let onRetry = (req: XMLHttpRequest) => {
          //console.log("Downloader failed", "onRetry", url, req.readyState, req.status);
          //if (req.readyState != 4 || req.status != 200) {
          //req.abort();
          //}
          //Downloader.httpTextRequest(url, onCompleted, onError);
          //};
          //var oReq = new XMLHttpRequest();
          //oReq.timeout = Downloader.TIMEOUT;
          //oReq.onload = function (e) {
          //var res = oReq.responseText;
          //onCompleted(res, url);
          //}
          //oReq.onerror = () => {
          //onRetry && onRetry(oReq);
          //console.log("Downloader failed", "onerror", url);
          //};
          //oReq.ontimeout = () => {
          //onRetry && onRetry(oReq);
          //console.log("Downloader failed", "ontimeout", url);
          //};
          //oReq.open("GET", url + "?_=" + new Date().getTime(), true);
          //oReq.send(null);
        }

        static httpArrayBufferRequest(url, onCompleted, onError = null) {//let onRetry = (req: XMLHttpRequest) => {
          //console.log("Downloader failed", "onRetry", url, req.readyState, req.status);
          //if (req.readyState != 4 || req.status != 200) {
          //req.abort();
          //}
          //Downloader.httpArrayBufferRequest(url, onCompleted, onError);
          //};
          //var oReq = new XMLHttpRequest();
          //oReq.responseType = "arraybuffer";
          //oReq.timeout = Downloader.TIMEOUT;
          //oReq.onload = function (e) {
          //var arraybuffer = oReq.response;
          //onCompleted(arraybuffer, url);
          //};
          //oReq.onerror = () => {
          //onRetry && onRetry(oReq);
          //console.log("Downloader failed", "onerror", url);
          //};
          //oReq.ontimeout = () => {
          //onRetry && onRetry(oReq);
          //console.log("Downloader failed", "ontimeout", url);
          //};
          //oReq.open("GET", url + "?_=" + new Date().getTime(), true);
          //try {
          //oReq.send(null);
          //} catch (ex) {
          //console.log("Downloader failed", "error", url);
          //}
        }

        static loadRemoteSpriteFrame(url, onCompleted) {
          var _LobbyViewController$;

          let split = url.split("/");
          let avatarName = split[split.length - 1];
          let avatars = (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.sprFrame_avatars.filter(a => {
            return avatarName.indexOf(a.name) >= 0;
          });
          onCompleted((avatars === null || avatars === void 0 ? void 0 : avatars.length) > 0 ? avatars[0] : null); // assetManager.loadRemote(GameConfigManager.avaURL,(err,imageAsset : ImageAsset) => {
          //     if(err == null) {
          //         let spriteFrame = new SpriteFrame();
          //         let texture = new Texture2D();
          //         texture.image = imageAsset;
          //         spriteFrame.texture = texture;
          //         this.spr_avatar.spriteFrame = spriteFrame;
          //     }
          // });
        }

      }

      exports('default', Downloader);
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import JSZip = require("jszip");
      // import CCMiniGameRoot from "../CCMiniGameRoot";
      // import { DOWNLOAD_STATE } from "../MiniGameNodeController";
      // 
      // export class SpineData {
      //     public texture;
      //     public atlas;
      //     public json;
      // }
      // 
      // export class DownloaderClient {
      //     public downloadAndExtractZipData(path: string, onError, onCompleted, onProgress) {
      //         let path_splited = path.split("/");
      //         let file_name = path_splited[path_splited.length - 1];
      //         let dirpath = path.slice(0, path.length - file_name.length);
      //         let localFilePath = jsb.fileUtils.getWritablePath() + path;
      // 
      //         let fullPath = Downloader.HOST_URL + path;
      // 
      //         let unzipped = cc.sys.localStorage.getItem("unzipped_" + path);
      //         console.log("cuong check unzip 1",path,unzipped);
      //         if (unzipped != null) {
      //             onProgress(1.0);
      //             onCompleted();
      //             cc.systemEvent.emit(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,path));
      //             return;
      //         } else {
      //             onProgress(0.15);
      //         }
      // 
      //         Downloader.httpArrayBufferRequest(fullPath, (arraybuffer, url) => {
      //             onProgress(0.35); // completed 50%
      //             let data = new Uint8Array(arraybuffer);
      //             let unzipped = cc.sys.localStorage.getItem("unzipped_" + path);
      //             console.log("cuong check unzip 2",path,unzipped);
      //             if (unzipped != null) {
      //                 onProgress(0.5);
      //                 onCompleted();
      //                 cc.systemEvent.emit(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,path));
      //             } else {
      //                 let localDirpath = jsb.fileUtils.getWritablePath() + dirpath;
      //                 if (!jsb.fileUtils.isDirectoryExist(localDirpath)) {
      //                     jsb.fileUtils.createDirectory(localDirpath);
      //                 }
      // 
      //                 if (jsb.fileUtils.writeDataToFile(data, localFilePath)) {
      //                     cc.log('Downloader::Remote write file ZIP succeed', localFilePath, jsb.fileUtils.isFileExist(localFilePath));
      //                     this.extractZipData(path, data, onCompleted, onProgress, 0.5);
      //                 } else {
      //                     cc.log('Downloader::Remote write file ZIP failed.');
      //                 }
      //             }
      // 
      //         }, onError);
      //     }
      // 
      //     private extractZipData(zip_path, arraybuffer: Uint8Array, onCompleted, onProgress, maxPercent = 1) {
      //         let is_valid = (file_name) => {
      //             file_name = Downloader.ZIP_FOLDER + file_name;
      //             return file_name.indexOf(".meta") < 0 && file_name.indexOf("__MACOSX") < 0
      //                 && (file_name.indexOf(".png") >= 0 || file_name.indexOf(".atlas") >= 0 || file_name.indexOf(".json") >= 0);
      //         };
      // 
      //         var zip = new JSZip();
      //         zip.loadAsync(arraybuffer).then((content) => {
      //             let count = 0;
      //             let total = Object.keys(content.files).filter(file_name => is_valid(file_name)).length - 1;
      //             let percent = maxPercent / total;
      // 
      //             content.forEach((path, zipObj) => {
      //                 path = Downloader.ZIP_FOLDER + path;
      //                 let path_splited = path.split("/");
      //                 let file_name = path_splited[path_splited.length - 1];
      //                 let dirpath = path.slice(0, path.length - file_name.length);
      // 
      //                 let localFilePath = jsb.fileUtils.getWritablePath() + path;
      // 
      //                 if (is_valid(path)) {
      //                     if (!jsb.fileUtils.isFileExist(localFilePath)) {
      //                         let localDirpath = jsb.fileUtils.getWritablePath() + dirpath;
      //                         if (!jsb.fileUtils.isDirectoryExist(localDirpath)) {
      //                             jsb.fileUtils.createDirectory(localDirpath);
      //                         }
      // 
      //                         if (file_name.indexOf(".png") >= 0) {
      //                             zipObj.async("uint8array").then(data => {
      //                                 if (jsb.fileUtils.writeDataToFile(data, localFilePath)) {
      //                                     cc.log('Downloader::extractZipData::Remote write file ', localFilePath, ' succeed');
      //                                 } else {
      //                                     cc.log('Downloader::extractZipData::Remote write file ', localFilePath, ' failed');
      //                                 }
      // 
      //                                 onProgress(percent);
      //                                 count += 1;
      //                                 if (count >= total) {
      //                                     onCompleted();
      //                                     cc.sys.localStorage.setItem("unzipped_" + zip_path,true);
      //                                     cc.systemEvent.emit(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,zip_path));
      //                                 }
      //                             });
      //                         } else if (file_name.indexOf(".atlas") >= 0 || file_name.indexOf(".json") >= 0) {
      //                             zipObj.async("text").then(data => {
      //                                 jsb.fileUtils.writeToFile({ "data": data }, localFilePath);
      // 
      //                                 onProgress(percent);
      //                                 count += 1;
      //                                 if (count >= total) {
      //                                     onCompleted();
      //                                     cc.sys.localStorage.setItem("unzipped_" + zip_path,true);
      //                                     cc.systemEvent.emit(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,zip_path));
      //                                 }
      //                             });
      //                         } else {
      //                             // cc.log("Downloader::extractZipData","Don't support ",file_name," in zip");
      //                         }
      //                     }
      //                 }
      //             });
      //         });
      //     }
      // 
      //     public downloadSpriteFrameAsset(path: string, loadFromCache, onError, onCompleted) {
      //         let isExist = false;
      //         let path_splited = path.split("/");
      //         let file_name = path_splited[path_splited.length - 1];
      //         let dirpath = path.slice(0, path.length - file_name.length);
      // 
      //         if (cc.sys.isMobile && loadFromCache) {
      //             isExist = jsb.fileUtils.isFileExist(jsb.fileUtils.getWritablePath() + path);
      //         }
      // 
      //         let fullPath = (isExist && cc.sys.isMobile ? jsb.fileUtils.getWritablePath() : Downloader.HOST_URL) + path;
      // 
      //         let load = (load_path) => {
      //             try {
      //                 cc.loader.load(load_path, (err, tex: cc.Texture2D) => {
      //                     if (err == null) {
      //                     } else {
      //                         onError && onError(err);
      //                     }
      //                     let sprFrame = new cc.SpriteFrame(tex);
      //                     sprFrame.name = path;
      //                     cc.systemEvent.emit(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY, path), sprFrame);
      //                     onCompleted && onCompleted(tex);
      //                 });
      //             } catch (ex) {
      //                 console.log("init failed!!!");
      //             }
      //         };
      // 
      //         load(jsb.fileUtils.getWritablePath() + path);
      //         return;
      // 
      //         if (!isExist) {
      //             if (cc.sys.isMobile) {
      //                 Downloader.httpArrayBufferRequest(fullPath, (arraybuffer, url) => {
      //                     let fileFullPath = jsb.fileUtils.getWritablePath() + path;
      // 
      //                     if (!jsb.fileUtils.isFileExist(fileFullPath)) {
      //                         let localDirpath = jsb.fileUtils.getWritablePath() + dirpath;
      //                         if (!jsb.fileUtils.isDirectoryExist(localDirpath)) {
      //                             jsb.fileUtils.createDirectory(localDirpath);
      //                         }
      // 
      //                         if (jsb.fileUtils.writeDataToFile(new Uint8Array(arraybuffer), fileFullPath)) {
      //                             cc.log('Downloader::Remote write file succeed.', path, loadFromCache, jsb.fileUtils.isFileExist(fileFullPath));
      //                         } else {
      //                             cc.log('Downloader::Remote write file failed.');
      //                         }
      //                     } else {
      //                         cc.log('Downloader::Remote write file failed because we had this file:', fileFullPath);
      //                     }
      //                     load(fileFullPath);
      //                 }, () => {
      //                     onCompleted && onCompleted(null);
      //                 });
      //             } else {
      //                 load(fullPath);
      //             }
      //         } else {
      //             load(fullPath);
      //         }
      //     }
      // 
      //     public downloadSpineTextData(path: string, loadFromCache, onError, onCompleted) {
      //         let isExist = false;
      // 
      //         if (cc.sys.isMobile && loadFromCache) {
      //             isExist = jsb.fileUtils.isFileExist(jsb.fileUtils.getWritablePath() + path);
      //         }
      // 
      //         let fullPath = (isExist && cc.sys.isMobile ? jsb.fileUtils.getWritablePath() : Downloader.HOST_URL) + path;
      // 
      //         if (!Downloader.isFileExist(path)) {
      //         }
      // 
      //         if (isExist) {
      //             let localPath = jsb.fileUtils.getWritablePath() + path;
      //             let string = jsb.fileUtils.getValueMapFromFile(localPath);
      //             let jsonString = JSON.stringify(string);
      //             let data = JSON.parse(jsonString)["data"];
      //             onCompleted(data);
      //         } else {
      //             Downloader.httpTextRequest(fullPath, function (res, url) {
      //                 if (res != null && res != undefined && res != "") {
      //                     if (cc.sys.isMobile) {
      //                         let localPath = jsb.fileUtils.getWritablePath() + path;
      //                         if (!jsb.fileUtils.isFileExist(localPath)) {
      //                             jsb.fileUtils.writeToFile({ "data": res }, localPath);
      //                         }
      //                     }
      //                     onCompleted(res);
      //                 }
      //             }, () => onCompleted(null));
      //         }
      //     }
      // 
      //     public downloadSpriteFrameAssets(paths: string[], loadFromCache, onError, onProgress, onCompleted, onUncompleted) {
      //         let progress = 0;
      //         let offset = 1 / paths.length;
      //         let count = 0;
      //         let errorCount = 0;
      //         paths.forEach(path => {
      //             this.downloadSpriteFrameAsset(path, loadFromCache, (err) => {
      //                 onError && onError(err);
      //             }, (tex) => {
      //                 progress += offset;
      //                 onProgress && onProgress(progress);
      //                 count++;
      //                 if (tex == null) {
      //                     errorCount++;
      //                 }
      //                 if (count == paths.length) {
      //                     if (errorCount <= 0) {
      //                         onCompleted && onCompleted();
      //                     } else {
      //                         onUncompleted && onUncompleted();
      //                     }
      //                 }
      //             });
      //         });
      //     }
      // 
      //     public downloadSpineAssets(paths: any[], loadFromCache, onError, onProgress, onCompletedAll, onUncompletedAll, onComplete) {
      //         let progress = 0;
      //         let offset = 1 / paths.length;
      //         let count = 0;
      //         let errorCount = 0;
      // 
      //         let onCheckComplete = (tex1, tex2, skeletonJson, atlasText, index, spineData) => {
      //             count++;
      //             if (tex1 != null && tex2 != null && skeletonJson != null && atlasText != null) {
      //                 onComplete && onComplete(index, spineData);
      //             } else {
      //                 errorCount++;
      //             }
      //             if (count == paths.length) {
      //                 if (errorCount <= 0) {
      //                     onCompletedAll && onCompletedAll();
      //                 } else {
      //                     onUncompletedAll && onUncompletedAll();
      //                 }
      //             }
      //         };
      // 
      //         paths.forEach((path, index) => {
      //             this.downloadSpriteFrameAsset(path[0], loadFromCache, (err) => {
      //                 onError && onError(err);
      //             }, (tex1) => {
      //                 progress += offset / path.length;
      //                 onProgress && onProgress(progress);
      // 
      //                 this.downloadSpriteFrameAsset(path[1], loadFromCache, (err) => {
      //                     onError && onError(err);
      //                 }, (tex2) => {
      //                     progress += offset / path.length;
      //                     onProgress && onProgress(progress);
      // 
      //                     let fileName1 = path[0].split("/")[path[0].split("/").length - 1];
      //                     let fileName2 = path[1].split("/")[path[1].split("/").length - 1];
      //                     let spineData = new sp.SkeletonData();
      //                     spineData.name = path[0];
      //                     spineData.textures = [tex1, tex2];
      //                     spineData.textureNames = [fileName1, fileName2];
      //                     this.downloadSpineTextData(path[2], loadFromCache, () => { }, (skeletonJson) => {
      //                         progress += offset / path.length;
      //                         onProgress && onProgress(progress);
      //                         try {
      //                             spineData.skeletonJson = JSON.parse(skeletonJson);
      //                             this.downloadSpineTextData(path[3], loadFromCache, () => { }, (atlasText) => {
      //                                 try {
      //                                     spineData.atlasText = atlasText;
      // 
      //                                     progress += offset / path.length;
      //                                     onProgress && onProgress(progress);
      // 
      //                                     onCheckComplete(tex1, tex2, skeletonJson, atlasText, index, spineData);
      //                                 } catch (ex) {
      //                                     cc.log("Downloader failed atlasText with :", ex);
      //                                     onCheckComplete(tex1, tex2, skeletonJson, null, index, spineData);
      //                                 }
      //                             });
      //                         } catch (ex) {
      //                             cc.log("Downloader failed skeletonJson with :", ex);
      //                             onCheckComplete(tex1, tex2, skeletonJson, null, index, spineData);
      //                         }
      //                     });
      //                 });
      //             });
      //         });
      //     }
      // }
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class Downloader extends cc.Component {
      //     public static DOWNLOADED_EVENT_KEY = "downloaded_asset_{key}";
      // 
      //     public static TIMEOUT = 30000;
      // 
      //     public static HOST_URL = "";
      // 
      //     public static ZIP_FOLDER = "cc-mini-game/";
      // 
      //     public static createKey(key, name) {
      //         return key.replace("{key}", name);
      //     }
      // 
      //     public static isLocalConfigExist(configPath) {
      //         let path_splited = configPath.split("/");
      //         let file_name = path_splited[path_splited.length - 1];
      //         let dirpath = configPath.slice(0, configPath.length - file_name.length);
      //         let localConfigDir = jsb.fileUtils.getWritablePath() + dirpath;
      //         let localConfigPath = jsb.fileUtils.getWritablePath() + configPath;
      //         if (!jsb.fileUtils.isDirectoryExist(localConfigDir)) {
      //             jsb.fileUtils.createDirectory(localConfigDir);
      //             jsb.fileUtils.writeToFile({ "ver": "0.0.0" }, localConfigPath);
      //             return false;
      //         }
      //         return true;
      //     }
      // 
      //     public static isFileExist(path) {
      //         if (!cc.sys.isMobile) return false;
      //         let path_splited = path.split("/");
      //         let file_name = path_splited[path_splited.length - 1];
      //         let dirpath = path.slice(0, path.length - file_name.length);
      //         let localDir = jsb.fileUtils.getWritablePath() + dirpath;
      //         let localPath = jsb.fileUtils.getWritablePath() + path;
      //         if (!jsb.fileUtils.isDirectoryExist(localDir)) {
      //             jsb.fileUtils.createDirectory(localDir);
      //             jsb.fileUtils.writeToFile({ "data": "none" }, localPath);
      //             return false;
      //         }
      //         return true;
      //     }
      // 
      //     public static updateRemoteVersion(configPath) {
      //         if (!cc.sys.isMobile) return;
      // 
      //         let localConfigPath = jsb.fileUtils.getWritablePath() + configPath;
      // 
      //         if (!Downloader.isLocalConfigExist(configPath)) {
      //             cc.log("Downloader::updateRemoteVersion", "created local config path");
      //         }
      // 
      //         let remoteConfigPath = Downloader.HOST_URL + configPath;
      //         Downloader.httpTextRequest(remoteConfigPath, (res, url) => {
      //             cc.log("Downloader::updateRemoteVersion", configPath, "-", res, "-");
      //             if (res != null && res != undefined && res != "") {
      //                 let remote_str = res;
      //                 let remoteVersion = JSON.parse(remote_str)["ver"];
      //                 jsb.fileUtils.writeToFile({ "ver": remoteVersion }, localConfigPath);
      //             }
      //         });
      //     }
      // 
      //     public static checkVersion(configPath, onCompleted) {
      //         if (!cc.sys.isMobile) {
      //             onCompleted(DOWNLOAD_STATE.UNDOWNLOADED);
      //             return;
      //         }
      // 
      //         let localConfigPath = jsb.fileUtils.getWritablePath() + configPath;
      // 
      //         if (!Downloader.isLocalConfigExist(configPath)) {
      //             cc.log("Downloader", "created local config path");
      //         }
      // 
      //         let remoteConfigPath = Downloader.HOST_URL + configPath;
      // 
      //         Downloader.httpTextRequest(remoteConfigPath, (res, url) => {
      //             cc.log("Downloader::remoteVersion", configPath, "-", res, "-");
      //             if (res != null && res != undefined && res != "") {
      //                 let remote_str = res;
      //                 let remoteVersion = JSON.parse(remote_str)["ver"];
      // 
      //                 let localVersion = jsb.fileUtils.getValueMapFromFile(localConfigPath)["ver"];
      //                 cc.log("Downloader::checkVersion", remoteVersion, localVersion);
      //                 if (remoteVersion == localVersion) {
      //                     onCompleted(DOWNLOAD_STATE.CACHED);
      //                 } else {
      //                     onCompleted(DOWNLOAD_STATE.UNDOWNLOADED);
      //                 }
      //             } else {
      //                 cc.log("Downloader::remoteVersion error");
      //                 onCompleted(DOWNLOAD_STATE.UNDOWNLOADED);
      //             }
      //         });
      //     }
      // 
      //     public static downloadAndExtractZipData(paths: string[], onError, onProgress, onCompleted, progressMax = 1.0) {
      //         let client = new DownloaderClient();
      //         let count = 0;
      //         paths.forEach(path => {
      //             cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,path),() => {
      //                 
      //             });
      //             client.downloadAndExtractZipData(path, onError, () => {
      //                 count++;
      //                 if (count >= paths.length) {
      //                     onCompleted();
      //                 }
      //             }, (pro) => {
      //                 onProgress && onProgress((pro * progressMax) / paths.length);
      //             });
      //         });
      //     }
      // 
      //     public static downloadSpriteFrameAssets(paths: string[], loadFromCache, onError, onProgress, onCompleted, onUnCompleted, progressMax = 1.0) {
      //         let client = new DownloaderClient();
      //         client.downloadSpriteFrameAssets(paths, loadFromCache, onError, (pro) => {
      //             onProgress && onProgress(pro * progressMax);
      //         }, () => {
      //             onCompleted();
      //         }, () => {
      //             onUnCompleted();
      //         });
      //     }
      // 
      //     public static downloadSpineAsset(paths: any[], loadFromCache, onError, onProgress, onCompletedAll, onUnCompletedAll, onCompleted, progressMax = 1.0) {
      //         let client = new DownloaderClient();
      //         client.downloadSpineAssets(paths, loadFromCache, onError, (pro) => {
      //             onProgress && onProgress(pro * progressMax);
      //         }, () => {
      //             onCompletedAll();
      //         }, () => {
      //             onUnCompletedAll();
      //         }, onCompleted);
      //     }
      // 
      //     public static httpTextRequest(url, onCompleted, onError = null) {
      //         let onRetry = (req: XMLHttpRequest) => {
      //             console.log("Downloader failed", "onRetry", url, req.readyState, req.status);
      //             if (req.readyState != 4 || req.status != 200) {
      //                 req.abort();
      //             }
      // 
      //             Downloader.httpTextRequest(url, onCompleted, onError);
      //         };
      // 
      //         var oReq = new XMLHttpRequest();
      //         oReq.timeout = Downloader.TIMEOUT;
      //         oReq.onload = function (e) {
      //             var res = oReq.responseText;
      //             onCompleted(res, url);
      //         }
      //         oReq.onerror = () => {
      //             onRetry && onRetry(oReq);
      //             console.log("Downloader failed", "onerror", url);
      //         };
      //         oReq.ontimeout = () => {
      //             onRetry && onRetry(oReq);
      //             console.log("Downloader failed", "ontimeout", url);
      //         };
      //         oReq.open("GET", url + "?_=" + new Date().getTime(), true);
      //         oReq.send(null);
      //     }
      // 
      //     public static httpArrayBufferRequest(url, onCompleted, onError = null) {
      //         let onRetry = (req: XMLHttpRequest) => {
      //             console.log("Downloader failed", "onRetry", url, req.readyState, req.status);
      //             if (req.readyState != 4 || req.status != 200) {
      //                 req.abort();
      //             }
      // 
      //             Downloader.httpArrayBufferRequest(url, onCompleted, onError);
      //         };
      // 
      //         var oReq = new XMLHttpRequest();
      //         oReq.responseType = "arraybuffer";
      //         oReq.timeout = Downloader.TIMEOUT;
      //         oReq.onload = function (e) {
      //             var arraybuffer = oReq.response;
      //             onCompleted(arraybuffer, url);
      //         };
      //         oReq.onerror = () => {
      //             onRetry && onRetry(oReq);
      //             console.log("Downloader failed", "onerror", url);
      //         };
      //         oReq.ontimeout = () => {
      //             onRetry && onRetry(oReq);
      //             console.log("Downloader failed", "ontimeout", url);
      //         };
      //         oReq.open("GET", url + "?_=" + new Date().getTime(), true);
      //         try {
      //             oReq.send(null);
      //         } catch (ex) {
      //             console.log("Downloader failed", "error", url);
      //         }
      //     }
      // }

      _defineProperty(Downloader, "DOWNLOADED_EVENT_KEY", "downloaded_asset_{key}");

      _defineProperty(Downloader, "TIMEOUT", 30000);

      _defineProperty(Downloader, "HOST_URL", "");

      _defineProperty(Downloader, "ZIP_FOLDER", "mini-game/");

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KimCuongBetHistoryView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './StringUtils.ts', './GlobalVariables.ts', './GameHTTPNetwork.ts', './KimCuongBetHistoryDetail.ts', './KimCuongBetHistoryItemView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Button, Label, Node, _decorator, UIOpacity, CommonPopup, StringUtils, GlobalVariables, GameHTTPNetwork, KimCuongBetHistoryDetail, KimCuongBetHistoryItemView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      Node = module.Node;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      KimCuongBetHistoryDetail = module.default;
    }, function (module) {
      KimCuongBetHistoryItemView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "1dbc6roRXBPGr4kQFYTAcY0", "KimCuongBetHistoryView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class KimCuongBetResult {
        constructor() {
          _defineProperty(this, "bet", void 0);

          _defineProperty(this, "sessionID", void 0);

          _defineProperty(this, "money", void 0);

          _defineProperty(this, "totalBet", void 0);

          _defineProperty(this, "numLines", void 0);

          _defineProperty(this, "symbols", void 0);

          _defineProperty(this, "payoutLines", void 0);

          _defineProperty(this, "betTime", void 0);
        }

      }

      let KimCuongBetHistoryView = exports('default', (_dec = ccclass('KimCuongBetHistoryView'), _dec2 = property(Button), _dec3 = property(Button), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property([Node]), _dec(_class = (_class2 = (_temp = class KimCuongBetHistoryView extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "btn_prev", _descriptor, this);

          _initializerDefineProperty(this, "btn_next", _descriptor2, this);

          _initializerDefineProperty(this, "lbl_page", _descriptor3, this);

          _initializerDefineProperty(this, "kimCuongBetHistoryDetailNode", _descriptor4, this);

          _initializerDefineProperty(this, "kimCuongBetingNode", _descriptor5, this);

          _initializerDefineProperty(this, "item_nodes", _descriptor6, this);

          _defineProperty(this, "_bets", []);

          _defineProperty(this, "currentPage", 1);

          _defineProperty(this, "max_pages", 0);

          _defineProperty(this, "item_views", []);

          _defineProperty(this, "kimCuongBetHistoryDetail", null);
        }

        onLoad() {
          super.onLoad();
          this.btn_prev.node.on("click", () => {
            if (this.currentPage > 1) {
              this.currentPage -= 1;
              this.lbl_page.string = this.currentPage.toString();
            }

            this.fetchHistory(false);
          });
          this.btn_next.node.on("click", () => {
            if (this.currentPage < this.max_pages) {
              this.currentPage += 1;
              this.lbl_page.string = this.currentPage.toString();
            }

            this.fetchHistory(false);
          });
          this.kimCuongBetHistoryDetail = this.kimCuongBetHistoryDetailNode.getComponent(KimCuongBetHistoryDetail);

          this.kimCuongBetHistoryDetail.onBack = () => {
            this.backToBetting();
          };
        }

        goToFirstPage() {
          this.currentPage = 1;
          this.lbl_page.string = this.currentPage.toString();
        }

        fetchHistory(hasFx = true) {
          if (hasFx) this.goToFirstPage();
          let skip = (this.currentPage - 1) * 6;
          let url = GlobalVariables.BET_HISTORY_URL.replace("%gameid%", GlobalVariables.TRUNGPS.toString()).replace("%skip%", skip.toString());
          GameHTTPNetwork.sendGET(url, response => {
            this._bets = [];
            let doc = JSON.parse(response);
            let data = doc["data"];
            let jarr = data["items"];
            let count = data["count"];
            this.max_pages = Math.ceil(count / 6);

            for (let i = 0; i < jarr.length; i++) {
              let jsonMNPKItem = jarr[i];
              let newBetHistory = new KimCuongBetResult();
              newBetHistory.sessionID = jsonMNPKItem["sessionId"];
              newBetHistory.bet = jsonMNPKItem["betting"];
              newBetHistory.money = jsonMNPKItem["money"];
              newBetHistory.totalBet = jsonMNPKItem["totalBet"];
              newBetHistory.numLines = jsonMNPKItem["numLines"];
              let requestTime = jsonMNPKItem["createdTime"];
              let date = new Date(requestTime);
              newBetHistory.betTime = StringUtils.formatTime(date);
              newBetHistory.symbols = [];
              newBetHistory.payoutLines = [];
              let symbols = jsonMNPKItem["symbols"];

              for (let j = 0; j < symbols.length; j++) {
                newBetHistory.symbols.push(symbols[j]);
              }

              let payoutLines = jsonMNPKItem["payoutLines"];

              for (let j = 0; j < payoutLines.length; j++) {
                let payoutLine = payoutLines[j];
                let id = payoutLine["id"];
                newBetHistory.payoutLines.push(id);
              }

              this._bets.push(newBetHistory);
            }

            this.showBetHistory(hasFx);
          });
        }

        showBetHistory(hasFx = true) {
          if (this.item_views.length <= 0) this.item_views = this.item_nodes.map(x => x.getComponent(KimCuongBetHistoryItemView));
          this.item_views.forEach((item, index) => {
            let info = this._bets[index];

            if (info != null && info != undefined) {
              item.node.getComponent(UIOpacity).opacity = 255;
              item.show(info.sessionID, info.betTime, info.bet, info.numLines, info.totalBet, info.payoutLines.length, info.money, info.symbols, info.payoutLines, (sessionID, symbols, payoutLines) => {
                this.showDetail(sessionID, symbols, payoutLines);
              });
            } else {
              item.node.getComponent(UIOpacity).opacity = 1;
            }
          });
          this.backToBetting();
          if (hasFx) this.show();
        }

        showDetail(sessionID, symbols, payoutLines) {
          this.kimCuongBetingNode.active = false;
          this.kimCuongBetHistoryDetail.show(sessionID, symbols, payoutLines);
        }

        backToBetting() {
          this.kimCuongBetingNode.active = true;
          this.kimCuongBetHistoryDetailNode.active = false;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_prev", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_next", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbl_page", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "kimCuongBetHistoryDetailNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "kimCuongBetingNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "item_nodes", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class)); //  * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
      //  */
      // // // Learn TypeScript:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // // Learn Attribute:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // // Learn life-cycle callbacks:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // // 
      // // import GameHTTPNetwork from "../../Network/GameHTTPNetwork";
      // // import { GlobalVariables } from "../../Utils/GlobalVariables";
      // // import { StringUtils } from "../../Utils/StringUtils";
      // // import TaiXiuPopupCmp from "../TaiXiu/TaiXiuPopupCmp";
      // // import KimCuongBetHistoryDetail from "./KimCuongBetHistoryDetail";
      // // import KimCuongBetHistoryItemView from "./KimCuongBetHistoryItemView";
      // // 
      // // class KimCuongBetResult {
      // //     public bet;
      // //     public sessionID;
      // //     public money;
      // //     public totalBet;
      // //     public numLines;
      // //     public symbols: number[];
      // //     public payoutLines : number[];
      // //     public betTime;
      // // };
      // // 
      // // const { ccclass, property } = cc._decorator;
      // // 
      // // @ccclass
      // // export default class KimCuongBetHistoryView extends TaiXiuPopupCmp {
      // //     @property(cc.Button)
      // //     private btn_close: cc.Button = null;
      // // 
      // //     @property(cc.Button)
      // //     private btn_prev: cc.Button = null;
      // // 
      // //     @property(cc.Button)
      // //     private btn_next: cc.Button = null;
      // // 
      // //     @property(cc.Label)
      // //     private lbl_page: cc.Label = null;
      // // 
      // //     @property(cc.Node)
      // //     private kimCuongBetHistoryDetailNode: cc.Node = null;
      // // 
      // //     @property(cc.Node)
      // //     private kimCuongBetingNode: cc.Node = null;
      // // 
      // //     @property([cc.Node])
      // //     private item_nodes: cc.Node[] = [];
      // // 
      // //     private _bets: KimCuongBetResult[] = [];
      // // 
      // //     private currentPage = 1;
      // // 
      // //     private max_pages = 0;
      // // 
      // //     private item_views: KimCuongBetHistoryItemView[] = [];
      // // 
      // //     private kimCuongBetHistoryDetail: KimCuongBetHistoryDetail = null;
      // // 
      // //     onLoad() {
      // //         super.onLoad();
      // //         this.original_scale = this.node.scale;
      // //         this.btn_close.node.on("click", () => {
      // //             this.hide();
      // //         });
      // // 
      // //         this.btn_prev.node.on("click", () => {
      // //             if (this.currentPage > 1) {
      // //                 this.currentPage -= 1;
      // //                 this.lbl_page.string = this.currentPage.toString();
      // //             }
      // //             this.fetchHistory(false);
      // //         });
      // // 
      // //         this.btn_next.node.on("click", () => {
      // //             if (this.currentPage < this.max_pages) {
      // //                 this.currentPage += 1;
      // //                 this.lbl_page.string = this.currentPage.toString();
      // //             }
      // //             this.fetchHistory(false);
      // //         });
      // // 
      // //         this.kimCuongBetHistoryDetail = this.kimCuongBetHistoryDetailNode.getComponent(KimCuongBetHistoryDetail);
      // //         this.kimCuongBetHistoryDetail.onBack = () => {
      // //             this.backToBetting();
      // //         };
      // //     }
      // // 
      // //     goToFirstPage() {
      // //         this.currentPage = 1;
      // //         this.lbl_page.string = this.currentPage.toString();
      // //     }
      // // 
      // //     public fetchHistory(jumpToFirstPage = true) {
      // //         if (jumpToFirstPage) this.goToFirstPage();
      // // 
      // //         let skip = (this.currentPage - 1) * 6;
      // //         let url = GlobalVariables.BET_HISTORY_URL.replace("%gameid%",GlobalVariables.TRUNGPS.toString()).replace("%skip%", skip.toString());
      // // 
      // //         GameHTTPNetwork.sendGET(url, (response) => {
      // //             this._bets = [];
      // // 
      // //             let doc = JSON.parse(response);
      // // 
      // //             let data = doc["data"];
      // //             let jarr = data["items"];
      // //             let count = data["count"];
      // //             this.max_pages = Math.ceil(count / 6);
      // // 
      // //             for (let i = 0; i < jarr.length; i++) {
      // //                 let jsonMNPKItem = jarr[i];
      // // 
      // //                 let newBetHistory = new KimCuongBetResult();
      // // 
      // //                 newBetHistory.sessionID = jsonMNPKItem["sessionId"];
      // //                 newBetHistory.bet = jsonMNPKItem["betting"];
      // //                 newBetHistory.money = jsonMNPKItem["money"];
      // //                 newBetHistory.totalBet = jsonMNPKItem["totalBet"];
      // //                 newBetHistory.numLines = jsonMNPKItem["numLines"];
      // //                 let requestTime = jsonMNPKItem["createdTime"];
      // //                 let date = new Date(requestTime);
      // //                 newBetHistory.betTime = StringUtils.formatTime(date);
      // //                 newBetHistory.symbols = [];
      // //                 newBetHistory.payoutLines = [];
      // // 
      // //                 let symbols: number[] = jsonMNPKItem["symbols"];
      // //                 for (let j = 0; j < symbols.length; j++) {
      // //                     newBetHistory.symbols.push(symbols[j]);
      // //                 }
      // // 
      // //                 let payoutLines = jsonMNPKItem["payoutLines"];
      // //                 for (let j = 0; j < payoutLines.length; j++) {
      // //                     let payoutLine = payoutLines[j];
      // //                     let id = payoutLine["id"];
      // //                     newBetHistory.payoutLines.push(id);
      // //                 }
      // // 
      // //                 this._bets.push(newBetHistory);
      // //             }
      // // 
      // //             this.showBetHistory();
      // //         });
      // //     }
      // // 
      // //     public showBetHistory() {
      // //         if(this.item_views.length <= 0) this.item_views = this.item_nodes.map(x => x.getComponent(KimCuongBetHistoryItemView));
      // //         this.item_views.forEach((item, index) => {
      // //             let info = this._bets[index];
      // //             if (info != null && info != undefined) {
      // //                 item.node.opacity = 255;
      // //                 item.show(info.sessionID, info.betTime, info.bet, info.numLines,
      // //                     info.totalBet,info.payoutLines.length,info.money, info.symbols,info.payoutLines,(sessionID,symbols,payoutLines) => {
      // //                         this.showDetail(sessionID,symbols,payoutLines);
      // //                     });
      // //             } else {
      // //                 item.node.opacity = 0;
      // //             }
      // //         });
      // //         this.backToBetting();
      // //         this.show();
      // //     }
      // // 
      // //     private showDetail(sessionID,symbols,payoutLines) {
      // //         this.kimCuongBetingNode.active = false;
      // //         this.kimCuongBetHistoryDetail.show(sessionID,symbols,payoutLines);
      // //     }
      // // 
      // //     private backToBetting() {
      // //         this.kimCuongBetingNode.active = true;
      // //         this.kimCuongBetHistoryDetailNode.active = false;
      // //     }
      // // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CommonPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Button, Label, Node, _decorator, Component, Vec3, UITransform, UIOpacity, Tween, view, tween;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      UIOpacity = module.UIOpacity;
      Tween = module.Tween;
      view = module.view;
      tween = module.tween;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "22a9fpXD0JDWrTp320ayN49", "CommonPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CommonPopup = exports('CommonPopup', (_dec = ccclass('CommonPopup'), _dec2 = property(Button), _dec3 = property(Button), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec(_class = (_class2 = (_temp = class CommonPopup extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "btn_close", _descriptor, this);

          _initializerDefineProperty(this, "btn_ok", _descriptor2, this);

          _initializerDefineProperty(this, "lbl_message", _descriptor3, this);

          _initializerDefineProperty(this, "black_screen", _descriptor4, this);

          _initializerDefineProperty(this, "main", _descriptor5, this);

          _initializerDefineProperty(this, "root", _descriptor6, this);

          _defineProperty(this, "uiTransform", null);

          _defineProperty(this, "uiOpacity", null);

          _defineProperty(this, "inited", false);

          _defineProperty(this, "lastest_main_node_position", Vec3.ZERO);

          _defineProperty(this, "onOK", null);

          _defineProperty(this, "onCancel", null);
        }

        onLoad() {
          var _this$black_screen;

          let outside_area = (_this$black_screen = this.black_screen) === null || _this$black_screen === void 0 ? void 0 : _this$black_screen.getComponent(Button);

          if (outside_area != null) {
            outside_area === null || outside_area === void 0 ? void 0 : outside_area.node.on("click", () => {
              if (this.onCancel == null) {
                this.hide();
              } else {
                this.onCancel();
              }
            });
          }
        }

        init() {
          this.lastest_main_node_position = new Vec3(this.main.position);
          this.uiTransform = this.main.getComponent(UITransform);
          this.uiOpacity = this.main.getComponent(UIOpacity);

          if (this.btn_close != null) {
            this.btn_close.node.on("click", () => {
              if (this.onCancel == null) {
                this.hide();
              } else {
                this.onCancel();
              }
            });
          }

          if (this.btn_ok != null) {
            this.btn_ok.node.on("click", () => this.onOK && this.onOK());
          }

          this.inited = true;
        }

        setPopup(msg, onOK = null, onCancel = null) {
          if (this.lbl_message == null) return;
          this.lbl_message.string = msg;

          if (onOK == null) {
            this.btn_ok.node.active = false;
          } else {
            this.btn_ok.node.active = true;
            this.onOK = onOK;
          }

          if (onCancel == null) {
            this.btn_close.node.active = false;
          } else {
            this.btn_close.node.active = true;
            this.onCancel = onCancel;
          }
        }

        isCanDeactiveRoot() {
          return true;
        }

        show(onOpened = () => {}) {
          var _this$node$parent;

          if (!this.inited) {
            this.init();
          }

          if (this.root != null && this.isCanDeactiveRoot()) {
            this.root.active = true;
          }

          this.node.setSiblingIndex(((_this$node$parent = this.node.parent) === null || _this$node$parent === void 0 ? void 0 : _this$node$parent.children.length) - 1);
          this.black_screen.active = true;
          Tween.stopAllByTarget(this.main);
          Tween.stopAllByTarget(this.uiOpacity);
          let width = view.getCanvasSize().width / view.getScaleX();
          let start_pos = new Vec3(width / 2 + this.uiTransform.contentSize.width / 2, this.lastest_main_node_position.y, 0);
          this.main.setPosition(start_pos);
          this.uiOpacity.opacity = 1;
          this.main.setScale(Vec3.ONE);
          let timeToOpen = 0.5;
          let timeForFadingInPopUp = 0.2;
          let move = tween(this.main).sequence(tween().to(timeToOpen, {
            position: this.lastest_main_node_position
          }, {
            easing: 'expoOut'
          }), tween().call(() => {
            onOpened && onOpened();
          }));
          move.start();
          let fade = tween(this.uiOpacity).to(timeForFadingInPopUp, {
            opacity: 255
          }, {
            easing: 'linear'
          });
          fade.start();
        }

        hide(onHidden = () => {}) {
          if (!this.inited) {
            return;
          }

          this.lastest_main_node_position = new Vec3(this.main.position);
          this.black_screen.active = false;
          Tween.stopAllByTarget(this.main);
          Tween.stopAllByTarget(this.uiOpacity);
          this.uiOpacity.opacity = 255;
          this.main.setScale(Vec3.ONE);
          let timeToClose = 0.25;
          let fade = tween(this.uiOpacity).to(timeToClose - 0.1, {
            opacity: 1
          }, {
            easing: 'linear'
          });
          fade.start();
          let scale = tween(this.main).sequence(tween().to(timeToClose, {
            scale: Vec3.ZERO
          }, {
            easing: 'linear'
          }), tween().call(() => {
            if (this.root != null && this.isCanDeactiveRoot()) {
              this.root.active = false;
            }

            onHidden && onHidden();
          }));
          scale.start();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_close", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_ok", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbl_message", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "black_screen", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "main", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XocDiaFullScreenGameView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './MiniGameNetworkHandler.ts', './GameNetworkHandler.ts', './NotiView.ts', './GameUtils.ts', './GlobalVariables.ts', './BaseFullScreenGameView.ts', './ChipPanel.ts', './BauCuaBetEntry.ts', './BauCuaSettingPopup.ts', './ChipPooling.ts', './PlayerView.ts', './UserChatPopup.ts', './UserInvitePopup.ts', './UserOnlinePopup.ts', './BauCuaFullScreenGameView.ts', './XocDiaSoiCauPopup.ts', './LobbyViewController.ts', './MiniGameNodeController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, Label, Button, UITransform, Sprite, SpriteFrame, _decorator, Vec3, systemEvent, Tween, tween, GameConfigManager, MessageRequest, MessageResponse, GameNetworkHandler, NotiView, GameUtils, GlobalVariables, GLOBAL_MESSAGE, BaseFullScreenGameView, ChipPanel, BauCuaBetEntry, BauCuaSettingPopup, ChipPooling, PlayerView, UserChatPopup, UserInvitePopup, UserOnlinePopup, PlayerInfo, XocDiaSoiCauPopup, LobbyViewController, MiniGameNodeController, GamePlayManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      Label = module.Label;
      Button = module.Button;
      UITransform = module.UITransform;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      systemEvent = module.systemEvent;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MessageResponse = module.MessageResponse;
    }, function (module) {
      GameNetworkHandler = module.GameNetworkHandler;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GameUtils = module.default;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
      GLOBAL_MESSAGE = module.GLOBAL_MESSAGE;
    }, function (module) {
      BaseFullScreenGameView = module.BaseFullScreenGameView;
    }, function (module) {
      ChipPanel = module.ChipPanel;
    }, function (module) {
      BauCuaBetEntry = module.BauCuaBetEntry;
    }, function (module) {
      BauCuaSettingPopup = module.BauCuaSettingPopup;
    }, function (module) {
      ChipPooling = module.ChipPooling;
    }, function (module) {
      PlayerView = module.PlayerView;
    }, function (module) {
      UserChatPopup = module.UserChatPopup;
    }, function (module) {
      UserInvitePopup = module.UserInvitePopup;
    }, function (module) {
      UserOnlinePopup = module.UserOnlinePopup;
    }, function (module) {
      PlayerInfo = module.PlayerInfo;
    }, function (module) {
      XocDiaSoiCauPopup = module.XocDiaSoiCauPopup;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      MiniGameNodeController = module.default;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      exports('XocDia_Message', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _class3, _temp;

      cclegacy._RF.push({}, "236dfQ7oXpLtIJqhH4UlyWx", "XocDiaFullScreenGameView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let XocDia_Message;

      (function (XocDia_Message) {
        XocDia_Message[XocDia_Message["SELF_BET"] = 900] = "SELF_BET";
        XocDia_Message[XocDia_Message["OTHERS_BET"] = 901] = "OTHERS_BET";
        XocDia_Message[XocDia_Message["SET_HOST"] = 902] = "SET_HOST";
        XocDia_Message[XocDia_Message["HOST_SELL_ENTRY"] = 903] = "HOST_SELL_ENTRY";
        XocDia_Message[XocDia_Message["CANCEL_HOST"] = 910] = "CANCEL_HOST";
        XocDia_Message[XocDia_Message["GET_MAX_VALUE_BUYING_ENTRY"] = 911] = "GET_MAX_VALUE_BUYING_ENTRY";
        XocDia_Message[XocDia_Message["START_GAME"] = 904] = "START_GAME";
        XocDia_Message[XocDia_Message["USER_BUY_ENTRY"] = 905] = "USER_BUY_ENTRY";
        XocDia_Message[XocDia_Message["START_SELLING_ENTRY"] = 906] = "START_SELLING_ENTRY";
        XocDia_Message[XocDia_Message["FINISH_GAME"] = 907] = "FINISH_GAME";
        XocDia_Message[XocDia_Message["REBET"] = 909] = "REBET";
        XocDia_Message[XocDia_Message["CAN_HET"] = 912] = "CAN_HET";
      })(XocDia_Message || (XocDia_Message = exports('XocDia_Message', {})));

      let XocDiaFullScreenGameView = exports('XocDiaFullScreenGameView', (_dec = ccclass('XocDiaFullScreenGameView'), _dec2 = property([BauCuaBetEntry]), _dec3 = property(sp.Skeleton), _dec4 = property(sp.Skeleton), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(ChipPooling), _dec8 = property([PlayerView]), _dec9 = property(PlayerView), _dec10 = property(UserOnlinePopup), _dec11 = property(UserChatPopup), _dec12 = property(UserInvitePopup), _dec13 = property(ChipPanel), _dec14 = property(Button), _dec15 = property(Button), _dec16 = property(Button), _dec17 = property(Button), _dec18 = property(Button), _dec19 = property(UITransform), _dec20 = property(XocDiaSoiCauPopup), _dec21 = property([Sprite]), _dec22 = property([SpriteFrame]), _dec23 = property(Label), _dec24 = property(Label), _dec25 = property(BauCuaSettingPopup), _dec(_class = (_class2 = (_temp = _class3 = class XocDiaFullScreenGameView extends BaseFullScreenGameView {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "bauCuaBetEntries", _descriptor, this);

          _initializerDefineProperty(this, "shake_anim_replace", _descriptor2, this);

          _initializerDefineProperty(this, "shake_anim", _descriptor3, this);

          _initializerDefineProperty(this, "lbl_countdown", _descriptor4, this);

          _initializerDefineProperty(this, "lbl_userOnline", _descriptor5, this);

          _initializerDefineProperty(this, "chipPooling", _descriptor6, this);

          _initializerDefineProperty(this, "playerViews", _descriptor7, this);

          _initializerDefineProperty(this, "my_info", _descriptor8, this);

          _initializerDefineProperty(this, "userOnlinePopup", _descriptor9, this);

          _initializerDefineProperty(this, "userChatPopup", _descriptor10, this);

          _initializerDefineProperty(this, "userInvitePopup", _descriptor11, this);

          _initializerDefineProperty(this, "chipPanel", _descriptor12, this);

          _initializerDefineProperty(this, "btn_user", _descriptor13, this);

          _initializerDefineProperty(this, "btn_invite", _descriptor14, this);

          _initializerDefineProperty(this, "btn_chat", _descriptor15, this);

          _initializerDefineProperty(this, "btn_soicau", _descriptor16, this);

          _initializerDefineProperty(this, "btn_exit", _descriptor17, this);

          _initializerDefineProperty(this, "dice_result_node", _descriptor18, this);

          _initializerDefineProperty(this, "soiCauPopup", _descriptor19, this);

          _initializerDefineProperty(this, "last_result", _descriptor20, this);

          _initializerDefineProperty(this, "sprFrame_cau_result", _descriptor21, this);

          _initializerDefineProperty(this, "lbl_chan_count", _descriptor22, this);

          _initializerDefineProperty(this, "lbl_le_count", _descriptor23, this);

          _initializerDefineProperty(this, "bauCuaSettingPopup", _descriptor24, this);

          _defineProperty(this, "_coinValues", []);

          _defineProperty(this, "_playerInfo", []);

          _defineProperty(this, "dice_result_origin_pos", Vec3.zero);

          _defineProperty(this, "_danhSachSoiCau", []);

          _defineProperty(this, "current_count_down", 0);
        }

        static getInstance() {
          return XocDiaFullScreenGameView.instance;
        }

        onLoad() {
          var _this$btn_user, _this$btn_invite, _this$btn_chat, _this$btn_soicau, _this$btn_exit;

          super.onLoad();
          this.dice_result_origin_pos = new Vec3(this.dice_result_node.node.position);
          XocDiaFullScreenGameView.instance = this;
          this.gameID = GlobalVariables.XOCDIA;
          this.chipPooling.pool();
          (_this$btn_user = this.btn_user) === null || _this$btn_user === void 0 ? void 0 : _this$btn_user.node.on("click", () => {
            var _this$userOnlinePopup;

            (_this$userOnlinePopup = this.userOnlinePopup) === null || _this$userOnlinePopup === void 0 ? void 0 : _this$userOnlinePopup.show();
          });
          (_this$btn_invite = this.btn_invite) === null || _this$btn_invite === void 0 ? void 0 : _this$btn_invite.node.on("click", () => {
            var _this$userInvitePopup;

            (_this$userInvitePopup = this.userInvitePopup) === null || _this$userInvitePopup === void 0 ? void 0 : _this$userInvitePopup.fetchUserInvitations();
          });
          (_this$btn_chat = this.btn_chat) === null || _this$btn_chat === void 0 ? void 0 : _this$btn_chat.node.on("click", () => {
            var _this$userChatPopup;

            (_this$userChatPopup = this.userChatPopup) === null || _this$userChatPopup === void 0 ? void 0 : _this$userChatPopup.show();
          });
          (_this$btn_soicau = this.btn_soicau) === null || _this$btn_soicau === void 0 ? void 0 : _this$btn_soicau.node.on("click", () => {
            var _this$soiCauPopup;

            (_this$soiCauPopup = this.soiCauPopup) === null || _this$soiCauPopup === void 0 ? void 0 : _this$soiCauPopup.show();
          });
          (_this$btn_exit = this.btn_exit) === null || _this$btn_exit === void 0 ? void 0 : _this$btn_exit.node.on("click", () => {
            var _this$bauCuaSettingPo;

            (_this$bauCuaSettingPo = this.bauCuaSettingPopup) === null || _this$bauCuaSettingPo === void 0 ? void 0 : _this$bauCuaSettingPo.show();
          });
        }

        sendBet(eid, bet) {
          if (!XocDiaFullScreenGameView.IS_START) {
            NotiView.getInstance().showMessage("Ván chơi chưa bắt đầu!", null, GlobalVariables.XOCDIA);
            return;
          }

          let dict = {};
          dict["cmd"] = XocDia_Message.SELF_BET;
          dict["eid"] = eid;
          dict["v"] = bet;
          let data = [MessageRequest.RoomPlugin_Type, "Simms", GamePlayManager.roomID, dict];
          GameNetworkHandler.send(data);
        }

        resetUI() {
          var _this$userChatPopup2, _this$bauCuaSettingPo2, _this$soiCauPopup2, _this$userOnlinePopup2, _this$userInvitePopup2;

          (_this$userChatPopup2 = this.userChatPopup) === null || _this$userChatPopup2 === void 0 ? void 0 : _this$userChatPopup2.close();
          (_this$bauCuaSettingPo2 = this.bauCuaSettingPopup) === null || _this$bauCuaSettingPo2 === void 0 ? void 0 : _this$bauCuaSettingPo2.close();
          (_this$soiCauPopup2 = this.soiCauPopup) === null || _this$soiCauPopup2 === void 0 ? void 0 : _this$soiCauPopup2.close();
          (_this$userOnlinePopup2 = this.userOnlinePopup) === null || _this$userOnlinePopup2 === void 0 ? void 0 : _this$userOnlinePopup2.close();
          (_this$userInvitePopup2 = this.userInvitePopup) === null || _this$userInvitePopup2 === void 0 ? void 0 : _this$userInvitePopup2.close();
        }

        handleRefreshMoney(money) {
          let player = this.getPlayerByUID(GameConfigManager.uid);

          if (player == null) {
            return;
          }

          let infos = this._playerInfo.filter(p => p.uid == GameConfigManager.uid);

          if (infos.length > 0) {
            infos[0].gold = money;
          }

          player.refresh();
        }

        handleBackGameFromInterupt(timeInterupted) {
          console.log("handleBackGameFromInterupt::baucua", timeInterupted);

          if (XocDiaFullScreenGameView.IS_END) {
            this.forceLeaveRoom();
          } else {
            this.continueCountDownBy(-timeInterupted);
          }
        }

        handleLeaveRoomResponse(message) {
          super.handleLeaveRoomResponse(message);
        }

        showChat(name, content) {
          var _this$bauCuaSettingPo3;

          if (((_this$bauCuaSettingPo3 = this.bauCuaSettingPopup) === null || _this$bauCuaSettingPo3 === void 0 ? void 0 : _this$bauCuaSettingPo3.isHideChat()) && name != GameConfigManager.uid) {
            return;
          }

          let player = this.getPlayerByUID(name);

          if (player == null) {
            return;
          }

          player.showBubbleChat(content);
        }

        handleInGameMessage(message) {
          let dict = message[1];
          let cmd = dict["cmd"];

          if (cmd == GLOBAL_MESSAGE.INGAME_USER_CHAT) {
            // chat
            let name = dict["uid"];
            let content = dict["mgs"];
            this.showChat(name, content);
          } else if (cmd == 303) {
            let playerArr = dict["us"];
            this.userInvitePopup.showPlayersToBeInvited(playerArr);
          } else if (cmd == GLOBAL_MESSAGE.REFRESH_MONEY) {
            let as = dict["As"];
            let vip = as["vip"];
            let gold = as["gold"];
            let chip = as["chip"];
            let goldSafe = as["safe"];
            GameConfigManager.gold = gold;
            systemEvent.emit(LobbyViewController.REFRESH_MONEY, GameConfigManager.gold + XocDiaFullScreenGameView.KEEP_MONEY);
          } // else if (cmd == 303) {
          //     // MsgPackArray * playerArr = dict->getArray("us");
          //     // gameView->showPlayersToBeInvited(playerArr);
          // }
          else {
              return false;
            }

          return true;
        }

        handleMessage(message) {
          if (this.handleInGameMessage(message)) {
            return;
          }

          let messageType = message[0];
          let dict = message[1];
          let cmd = dict["cmd"];

          switch (messageType) {
            case MessageResponse.Extension_Response:
              {
                if (cmd == GLOBAL_MESSAGE.INGAME_JOIN_TABLE_INFOS) {
                  let b = dict["b"]; // muc cuoc

                  let gS = dict["gS"]; // game state

                  let rmT = dict["rmT"]; // remaining time

                  rmT = rmT / 1000;
                  let aid = dict["aid"];
                  let maxUser = dict["Mu"]; // gameView->_state = GameInterface::WAITING;

                  if (gS == 4 || gS == 5 || gS == 6) {
                    this.continue(rmT);
                  } else {
                    this.wait();
                  } // gameView->setGameConfig(b, gS, rmT, aid, maxUser, false);


                  let arrPlayer = dict["ps"];

                  for (let i = 0; i < arrPlayer.length; i++) {
                    let playerInfoDict = arrPlayer[i];
                    let C = false; // chu ban

                    let m = playerInfoDict["m"]; // money

                    let pS = 0; // player state

                    let sit = 0; // cho ngoi

                    let dn = playerInfoDict["dn"]; // display name

                    let uid = playerInfoDict["uid"]; // user id

                    let r = false; // ready

                    let playing = true;
                    let platformID = playerInfoDict["pid"]; // platform

                    let as = playerInfoDict["As"];
                    let avaURL = playerInfoDict["a"];
                    let customerID = 0;

                    if (playerInfoDict["id"]) {
                      customerID = playerInfoDict["id"];
                    }

                    if (dn == "SD_Banker") {
                      continue;
                    }

                    this.addPlayer(dn, uid, C, m, pS, 0, sit, r, platformID, playing, as, avaURL, customerID);
                  }

                  this.updateViewPostions();
                  let coinsValue = dict["coins"];
                  this.setValueForCoinBtns(coinsValue);
                  let tr = dict["tr"];
                  this.setBangSoiCau(tr);
                  let rates = dict["ets"];
                  this.setRateLabels(rates);
                  return;
                } else if (cmd == GLOBAL_MESSAGE.INGAME_USER_LEAVE_AND_JOIN_TABLE) {
                  let t = dict["t"]; // t = 1: vao phong || t = 2: ra phong

                  if (t == 1) {
                    let playerInfoDict = dict["p"];
                    let C = false; // chu ban

                    let a = playerInfoDict["a"]; // avatar

                    let g = playerInfoDict["g"]; // gender

                    let m = playerInfoDict["m"]; // money

                    let sit = 0; // cho ngoi

                    let dn = playerInfoDict["dn"]; // display name

                    let uid = playerInfoDict["uid"]; // user id

                    let r = false; // ready

                    let platformID = playerInfoDict["pid"]; // platform

                    if (playerInfoDict["r"] != null && playerInfoDict["r"] != undefined) {
                      r = playerInfoDict["r"];
                    }

                    let as = playerInfoDict["As"];
                    let avaURL = playerInfoDict["a"];
                    let customerID = 0;

                    if (playerInfoDict["id"] != null && playerInfoDict["id"] != undefined) {
                      customerID = playerInfoDict["id"];
                    }

                    this.addPlayer(dn, uid, C, m, 0, 0, sit, r, platformID, true, as, avaURL, customerID);
                  }

                  if (t == 2) {
                    let playerInfoDict = dict["p"];
                    let uid = playerInfoDict["uid"]; // user id

                    this.removePlayer(uid);
                  }

                  this.updateViewPostions();
                  return;
                } else if (cmd == XocDia_Message.SELF_BET) {
                  // dat cuoc cua minh
                  let eid = dict["eid"];
                  let bet = dict["b"];
                  let money = dict["m"];
                  let teb = dict["teb"];
                  this.betResponse(GameConfigManager.displayName, money, bet, eid, teb);
                  XocDiaFullScreenGameView.IS_END = false;
                } else if (cmd == XocDia_Message.OTHERS_BET) {
                  // dat cuoc cua nguoi khac
                  let ets = dict["ets"];
                  let ps = dict["ps"];
                  this.otherBetResponse(ets, ps);
                } else if (cmd == XocDia_Message.START_GAME) {
                  // start game
                  let banker;

                  if (dict["B"] != null && dict["B"] != undefined) {
                    banker = dict["B"];
                  }

                  this.startGame(banker);
                } else if (cmd == XocDia_Message.FINISH_GAME) {
                  // finish game
                  let rt = dict["rt"];
                  let arrPlayer = dict["ps"];
                  let entryWinners = dict["ew"];

                  if (dict["kes"] != null && dict["kes"] != undefined) {
                    let kickEntries = dict["kes"];

                    if (kickEntries.length > 0) {
                      this.finishThisGame(arrPlayer, entryWinners, rt, true, kickEntries);
                    } else {
                      this.finishThisGame(arrPlayer, entryWinners, rt);
                    }
                  } else {
                    this.finishThisGame(arrPlayer, entryWinners, rt);
                  }
                } else if (cmd == GLOBAL_MESSAGE.ERROR_MESSAGE) {
                  let errorMessage;

                  if (dict["mgs"] != null && dict["mgs"] != undefined) {
                    errorMessage = dict["mgs"];
                  }

                  if (errorMessage.length > 0) {
                    NotiView.getInstance().showMessage(errorMessage, this.root, GlobalVariables.XOCDIA);
                    return;
                  }
                }
              }
          }
        }

        setBangSoiCau(tr) {
          for (let i = 0; i < tr.length; i++) {
            let rt = tr[i];

            this._danhSachSoiCau.push(rt);
          }

          this.updateBangSoiCau();
        }

        addPlayer(dn, uid, C, m, pS, rmC, sit, r, platform, playing, as, avatarURL, customerID) {
          let info = new PlayerInfo();
          info.displayName = dn;
          info.gold = m;
          info.avatarURL = avatarURL;
          info.uid = uid;

          this._playerInfo.push(info);

          this._playerInfo = this._playerInfo.sort((a, b) => a.gold < b.gold ? 1 : -1);
        }

        removePlayer(uid) {
          this._playerInfo = this._playerInfo.filter(p => p.uid != uid);
          this._playerInfo = this._playerInfo.sort((a, b) => a.gold < b.gold ? 1 : -1);
        }

        updateViewPostions() {
          var _this$userOnlinePopup3, _this$userOnlinePopup4, _this$userOnlinePopup5;

          (_this$userOnlinePopup3 = this.userOnlinePopup) === null || _this$userOnlinePopup3 === void 0 ? void 0 : _this$userOnlinePopup3.reset();
          let updatedInsightIndex = 0;

          this._playerInfo.forEach((p, i) => {
            if (p.displayName == GameConfigManager.displayName) {
              this.my_info.setUserInfo(p);
            } else if (updatedInsightIndex < this.playerViews.length) {
              this.playerViews[updatedInsightIndex].setUserInfo(p);
              updatedInsightIndex++;
            } else {
              this.userOnlinePopup.addPlayer(p);
            }
          });

          (_this$userOnlinePopup4 = this.userOnlinePopup) === null || _this$userOnlinePopup4 === void 0 ? void 0 : _this$userOnlinePopup4.refresh();
          this.lbl_userOnline.string = (_this$userOnlinePopup5 = this.userOnlinePopup) === null || _this$userOnlinePopup5 === void 0 ? void 0 : _this$userOnlinePopup5.getUserCount();
        }

        startGame(banker) {
          this.resetShakeDiskCoin();
          this.chipPooling.activeAll(false);
          Tween.stopAllByTarget(this.node);
          this.stopCountDown();
          this.bauCuaBetEntries.forEach(b => b.hideAll());
          let sequence = tween(this.node).sequence(tween().call(() => {
            this.playShakeAnim();
          }), tween().delay(0.3), tween().call(() => {// play shaking sound
          }), tween().delay(2.5), tween().call(() => {}), tween().delay(0.2), tween().call(() => {
            var _NotiView$getInstance;

            (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage("Xin mời đặt cược!", this.root, GlobalVariables.XOCDIA);
            this.startCountDown(20);
          }));
          sequence.start();
          XocDiaFullScreenGameView.IS_END = true;
        }

        continue(rmt) {
          this._danhSachSoiCau = [];
          this.resetAllPlayerViewAction();
          this.chipPooling.activeAll(false);
          Tween.stopAllByTarget(this.node);
          this.stopCountDown();
          this.bauCuaBetEntries.forEach(b => b.hideAll());
          this.startCountDown(rmt);
        }

        wait() {
          this._danhSachSoiCau = [];
          this.resetAllPlayerViewAction();
          this.chipPooling.activeAll(false);
          Tween.stopAllByTarget(this.node);
          this.stopCountDown();
          this.bauCuaBetEntries.forEach(b => b.hideAll());
        }

        resetAllPlayerViewAction() {
          this._playerInfo = [];
          this.playerViews.forEach(p => {
            Tween.stopAllByTarget(p.node);
          });
          this.resetShakeDiskCoin();
        }

        resetShakeDiskCoin() {
          this.playerViews.forEach(p => {
            p.shakeDiskCoins = [];
          });
          this.my_info.shakeDiskCoins = [];
        }

        resetDicePanel() {
          this.dice_result_node.node.active = false;
          this.dice_result_node.node.scale = new Vec3(0.4, 0.4, 0.4);
          this.dice_result_node.node.setPosition(this.dice_result_origin_pos);
          Tween.stopAllByTarget(this.dice_result_node.node);
        }

        continueCountDownBy(offset) {
          this.current_count_down += offset;

          if (this.current_count_down < 0) {
            this.current_count_down = 0;
          }

          Tween.stopAllByTarget(this.lbl_countdown);
          this.startCountDown(this.current_count_down);
        }

        startCountDown(time) {
          this.current_count_down = time;
          this.resetDicePanel();
          XocDiaFullScreenGameView.IS_START = true;
          this.current_count_down = Math.round(this.current_count_down);
          this.lbl_countdown.node.parent.active = true;
          this.lbl_countdown.string = this.current_count_down;
          let sequence = tween(this.lbl_countdown).repeat(this.current_count_down, tween(this.lbl_countdown).sequence(tween().delay(1), tween().call(() => {
            this.current_count_down -= 1;
            this.lbl_countdown.string = this.current_count_down;
          })));
          sequence.start();
        }

        stopCountDown() {
          this.resetDicePanel();
          XocDiaFullScreenGameView.IS_START = false;
          Tween.stopAllByTarget(this.lbl_countdown);
          this.lbl_countdown.node.parent.active = false;
        }

        finishThisGame(finishArray, entryWinners, rt, duoiCua = false, kickEntries = []) {
          NotiView.getInstance().showMessage("Mở Bát", this.root, GlobalVariables.XOCDIA);
          this.stopCountDown();
          this.showResult(rt);

          for (let i = 0; i < finishArray.length; i++) {
            let playerDict = finishArray[i];
            let name = playerDict["dn"];
            let player = this.getPlayer(name);

            if (player == null) {
              continue;
            }

            let money = playerDict["m"];
            player.money = money;
            let winning = playerDict["wm"];
            player.winning = winning;

            let infos = this._playerInfo.filter(p => p.displayName == name);

            if (infos.length > 0) {
              infos[0].gold = money;
            }
          }

          this.payChips(entryWinners, rt);
        }

        payChips(entryWinners, rt) {
          let entryBetWin = [];
          this.bauCuaBetEntries.forEach((be, i) => {
            if (be.isGlowing()) {
              entryBetWin.push(i);
            }
          });

          let isLoseEntry = index => {
            return entryBetWin.filter(x => x == index).length <= 0;
          };

          this.bauCuaBetEntries.forEach((b, i) => {
            b.payChipsForDealer(isLoseEntry(i));
          });

          for (let i = 0; i < entryWinners.length; i++) {
            let winnersDict = entryWinners[i];
            let eid = winnersDict["eid"];
            let winnersName = winnersDict["wns"];

            if (winnersName.length > 0) {
              for (let j = 0; j < winnersName.length; j++) {
                let name = winnersName[j];
                this.bauCuaBetEntries[eid].payChipsForPlayers(name);
              }
            }
          }
        }

        refreshUserOnlinePopup() {
          this.userOnlinePopup.refresh();
        }

        getPlayer(name) {
          if (name == GameConfigManager.displayName) {
            return this.my_info;
          }

          if (this.playerViews.length > 0) {
            let f = this.playerViews.filter(p => p.getName() == name);

            if (f.length > 0) {
              return f[0];
            }
          }

          return this.userOnlinePopup.getPlayer(name);
        }

        getPlayerByUID(uid) {
          var _this$userOnlinePopup6;

          if (uid == GameConfigManager.uid) {
            return this.my_info;
          }

          if (this.playerViews.length > 0) {
            let f = this.playerViews.filter(p => p.getUID() == uid);

            if (f.length > 0) {
              return f[0];
            }
          }

          return (_this$userOnlinePopup6 = this.userOnlinePopup) === null || _this$userOnlinePopup6 === void 0 ? void 0 : _this$userOnlinePopup6.getPlayerByUID(uid);
        }

        getVisiblePlayer(name) {
          if (name == GameConfigManager.displayName) {
            return this.my_info;
          }

          if (this.playerViews.length > 0) {
            let f = this.playerViews.filter(p => p.getName() == name);

            if (f.length > 0) {
              return f[0];
            }
          }

          return null;
        }

        getChipPooling() {
          return this.chipPooling;
        }

        getVisiblePlayerByID(uid) {
          if (uid == GameConfigManager.uid) {
            return this.my_info;
          }

          if (this.playerViews.length > 0) {
            let f = this.playerViews.filter(p => p.getUID() == uid);

            if (f.length > 0) {
              return f[0];
            }
          }

          return null;
        }

        setRateLabels(rates) {
          for (let i = 0; i < rates.length; i++) {
            let rateDict = rates[i];
            let eid = rateDict["eid"];
            let entryBtn = this.bauCuaBetEntries[eid];
            let rate = rateDict["ert"];
            entryBtn.setRate(rate);
          }
        }

        setValueForCoinBtns(values) {
          this._coinValues = [];

          for (let i = 0; i < values.length; i++) {
            let moneyValue = values[i];

            this._coinValues.push(moneyValue);
          }

          this.chipPanel.initChipPanel(this._coinValues);
        }

        betResponse(name, money, bet, eid, teb = 0, withFx = true) {
          var _this$chipPooling;

          let player = this.getPlayer(name);

          if (!player) {
            return;
          }

          let coinPath = 0;

          if (teb > 0) {
            this.bauCuaBetEntries[eid].setTotalBet(teb);
          }

          if (player.isThisPlayer()) {
            this.bauCuaBetEntries[eid].setCurrentBet(bet);

            for (let i = 0; i < this._coinValues.length; i++) {
              if (bet == this._coinValues[i]) {
                coinPath = i;
                break;
              }
            }
          } else {
            coinPath = GameUtils.getRandomInt(0, 11);
          }

          let newCoin = this.chipPooling.getChip(coinPath);

          if (newCoin == null) {
            return;
          }

          (_this$chipPooling = this.chipPooling) === null || _this$chipPooling === void 0 ? void 0 : _this$chipPooling.onTop(newCoin);
          newCoin.setPosition(player.node.position);
          let desPos = this.getRandomPositionAtEntry(eid);

          if (withFx) {
            let move = tween(newCoin).to(0.7, {
              position: desPos
            }, {
              easing: 'expoOut'
            });
            move.start();
          } else {
            newCoin.setPosition(desPos);
          }

          if (player.isVisible()) {
            newCoin.name = player.getUID() + "%" + eid;
          } else {
            let f = this._playerInfo.filter(p => p.displayName == name);

            let uid = "";

            if (f.length > 0) {
              uid = f[0].uid;
            }

            newCoin.name = uid + "%" + eid;
          }

          this.bauCuaBetEntries[eid].addCoin(newCoin);
          player.shakeDiskCoins.push(newCoin);

          let infos = this._playerInfo.filter(p => p.displayName == name);

          if (infos.length > 0) {
            infos[0].gold = money;
          }

          this.userOnlinePopup.refresh();
          player.refresh();
        }

        getRandomPositionAtEntry(eid) {
          let posX = this.bauCuaBetEntries[eid].node.position.x;
          let posY = this.bauCuaBetEntries[eid].node.position.y;
          let randNum1;
          let randNum2;

          if (eid == 2 || eid == 5) {
            randNum1 = GameUtils.getRandomInt(-60, 100);
            randNum2 = GameUtils.getRandomInt(-5, 44);
          } else {
            randNum1 = GameUtils.getRandomInt(-40, 55);
            randNum2 = GameUtils.getRandomInt(4, 36);
          }

          posX += randNum1;
          posY += randNum2;
          return new Vec3(posX, posY, 0);
        }

        otherBetResponse(ets, ps) {
          for (let i = 0; i < ets.length; i++) {
            let entryDict = ets[i];
            let eid = entryDict["eid"];
            let teb = entryDict["v"];

            if (teb > 0) {
              this.bauCuaBetEntries[eid].setTotalBet(teb);
            }
          }

          for (let i = 0; i < ps.length; i++) {
            let playerDict = ps[i];
            let uid = playerDict["uid"];
            let dn = playerDict["dn"];
            let betsArr = playerDict["b"];

            for (let j = 0; j < betsArr.length; j++) {
              let betDict = betsArr[j];
              let eid = betDict["eid"];
              let betValue = betDict["v"];
              let money = playerDict["m"];

              if (dn != GameConfigManager.displayName) {
                this.betResponse(dn, money, betValue, eid);
              }
            }
          }
        }

        showResult(rt) {
          this.shake_anim.setAnimation(0, "open", false);

          if (rt % 2 == 0) {
            this.bauCuaBetEntries[2].showGlow();

            this._danhSachSoiCau.push(true);
          } else {
            this.bauCuaBetEntries[5].showGlow();

            this._danhSachSoiCau.push(false);
          }

          if (rt != 2) {
            if (rt == 0) {
              this.bauCuaBetEntries[0].showGlow();
            } else if (rt == 1) {
              this.bauCuaBetEntries[1].showGlow();
            } else if (rt == 3) {
              this.bauCuaBetEntries[3].showGlow();
            } else if (rt == 4) {
              this.bauCuaBetEntries[4].showGlow();
            }
          }

          let count = 0;
          let coinArr = [];

          for (let i = 0; i < 4; i++) {
            coinArr.push(i);
          }

          for (let i = 0; i < coinArr.length; i++) {
            let index = coinArr[i];
            let coin = 1;

            if (count < rt) {
              coin = 0;
              count++;
            }

            let slot1_Name = "white";

            if (index > 0) {
              slot1_Name += index + 1;
            }

            let color = "red";

            if (coin == 0) {
              color = "white";
            }

            let slot2_Name = color;

            if (index > 0) {
              slot2_Name += index + 1;
            }

            let slot1 = this.shake_anim.findSlot(slot1_Name);
            let slot2 = this.shake_anim_replace.findSlot(slot2_Name);
            let attachment = slot2.getAttachment();
            slot1.setAttachment(attachment);
          }

          this.updateBangSoiCau();
        }

        updateBangSoiCau() {
          let rt = this._danhSachSoiCau[this._danhSachSoiCau.length - 1];

          if (this._danhSachSoiCau.length > 36) {
            this._danhSachSoiCau = this._danhSachSoiCau.filter((c, i) => i >= this._danhSachSoiCau.length - 36);
          }

          let chanCount = 0;
          let leCount = 0;

          this._danhSachSoiCau.forEach(cau => {
            if (!cau) {
              leCount++;
            } else {
              chanCount++;
            }
          });

          this.lbl_chan_count.string = (chanCount < 10 ? "0" : "") + chanCount;
          this.lbl_le_count.string = (leCount < 10 ? "0" : "") + leCount;

          let lastResult = this._danhSachSoiCau.filter((cau, index) => {
            return index >= this._danhSachSoiCau.length - 7;
          });

          lastResult.forEach((cau, index) => {
            if (index < this.last_result.length) {
              this.last_result[index].spriteFrame = cau ? this.sprFrame_cau_result[1] : this.sprFrame_cau_result[0];
            }
          });
          this.soiCauPopup.updateBangSoiCau(chanCount, leCount, this._danhSachSoiCau);
        }

        playShakeAnim() {
          var _this$shake_anim;

          let track = null;
          let currentAnimName = (_this$shake_anim = this.shake_anim) === null || _this$shake_anim === void 0 ? void 0 : _this$shake_anim.getCurrent(0).animation.name;

          if (currentAnimName == "idle") {
            var _this$shake_anim2;

            track = (_this$shake_anim2 = this.shake_anim) === null || _this$shake_anim2 === void 0 ? void 0 : _this$shake_anim2.setAnimation(0, "shake", false);
          } else {
            var _this$shake_anim3;

            track = (_this$shake_anim3 = this.shake_anim) === null || _this$shake_anim3 === void 0 ? void 0 : _this$shake_anim3.setAnimation(0, "close", false);
          }

          if (track) {
            var _this$shake_anim4;

            (_this$shake_anim4 = this.shake_anim) === null || _this$shake_anim4 === void 0 ? void 0 : _this$shake_anim4.setCompleteListener(trackEntry => {
              let name = trackEntry.animation ? trackEntry.animation.name : '';

              if (name == "shake") {
                var _this$shake_anim5;

                (_this$shake_anim5 = this.shake_anim) === null || _this$shake_anim5 === void 0 ? void 0 : _this$shake_anim5.setAnimation(0, "idle2", true);
              } else if (name == "close") {
                var _this$shake_anim6;

                track = (_this$shake_anim6 = this.shake_anim) === null || _this$shake_anim6 === void 0 ? void 0 : _this$shake_anim6.setAnimation(0, "shake", false);
              }
            });
          }
        }

        show(fadeTime = 0.4) {
          MiniGameNodeController.getInstance().adjustPosition(GlobalVariables.BAU_CUA_FULL);
          return super.show(fadeTime);
        }

      }, _defineProperty(_class3, "instance", null), _defineProperty(_class3, "IS_START", false), _defineProperty(_class3, "IS_END", true), _defineProperty(_class3, "KEEP_MONEY", 50000), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bauCuaBetEntries", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "shake_anim_replace", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "shake_anim", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbl_countdown", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbl_userOnline", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "chipPooling", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "playerViews", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "my_info", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "userOnlinePopup", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "userChatPopup", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "userInvitePopup", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "chipPanel", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "btn_user", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "btn_invite", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "btn_chat", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "btn_soicau", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "btn_exit", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "dice_result_node", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "soiCauPopup", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "last_result", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_cau_result", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "lbl_chan_count", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "lbl_le_count", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "bauCuaSettingPopup", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Sam_CardLib.ts", ['cc', './GlobalVariables.ts', './MauBinh_CardLib.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, GlobalVariables, GameCard;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      GameCard = module.GameCard;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "23ecdzuEhlKU7M6XQdDAWFI", "Sam_CardLib", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let Sam_CardLib = exports('default', (_dec = ccclass('Sam_CardLib'), _dec(_class = class Sam_CardLib {
        static getCombination(cards, n, r, vectorCombinationOfCards) {
          // A temporary array to store all combination one by one
          let cardsIn = [];

          for (let i = 0; i < r; i++) {
            let cardTemp = new GameCard();
            cardsIn.push(cardTemp);
          } // Print all combination using temprary array 'data[]'


          Sam_CardLib.combinationUtil(cards, n, r, 0, cardsIn, 0, vectorCombinationOfCards);
        }
        /* arr[]  ---> Input Array
         n      ---> Size of input array
         r      ---> Size of a combination to be printed
         index  ---> Current index in data[]
         data[] ---> Temporary array to store current combination
         i      ---> index of current element in arr[]     */


        static combinationUtil(cards, n, r, index, cardsIn, i, vectorCombinationOfCards) {
          // Current cobination is ready, print it
          if (index == r) {
            let newVectorCard = [];
            cardsIn.forEach(x => {
              let c = new GameCard();
              c.decodeCard(x.serverCode, GlobalVariables.SAM);
              newVectorCard.push(c);
            });
            vectorCombinationOfCards.push(newVectorCard);
            return newVectorCard;
          } // When no more elements are there to put in data[]


          if (i >= n) return; // current is included, put next at next location

          let card = cards[i];
          cardsIn[index] = card;
          Sam_CardLib.combinationUtil(cards, n, r, index + 1, cardsIn, i + 1, vectorCombinationOfCards); // current is excluded, replace it with next (Note that
          // i+1 is passed, but index is not changed)

          Sam_CardLib.combinationUtil(cards, n, r, index, cardsIn, i + 1, vectorCombinationOfCards);
        }

        static sortVector(vector, reverse) {
          if (reverse) {
            let i = 0;

            while (i < vector.length - 1) {
              let card1 = vector[i];
              let N1 = card1.N;
              let S1 = card1.S;
              let j;

              for (j = i + 1; j < vector.length; j++) {
                let card2 = vector[j];
                let N2 = card2.N;
                let S2 = card2.S;

                if (N1 > N2) {
                  let temp = card1;
                  vector[i] = vector[j];
                  vector[j] = temp;
                  i = 0;
                  break;
                } else if (N1 == N2) {
                  if (S1 < S2) {
                    let temp = card1;
                    vector[i] = vector[j];
                    vector[j] = temp;
                    i = 0;
                    break;
                  }
                }
              }

              if (i != 0 || j == vector.length) {
                i++;
              }
            }
          } else {
            let i = 0;

            while (i < vector.length - 1) {
              let card1 = vector[i];
              let N1 = card1.N;
              let S1 = card1.S;
              let j;

              for (j = i + 1; j < vector.length; j++) {
                let card2 = vector[j];
                let N2 = card2.N;
                let S2 = card2.S;

                if (N1 > N2) {
                  let temp = card1;
                  vector[i] = vector[j];
                  vector[j] = temp;
                  i = 0;
                  break;
                } else if (N1 == N2) {
                  if (S1 > S2) {
                    let temp = card1;
                    vector[i] = vector[j];
                    vector[j] = temp;
                    i = 0;
                    break;
                  }
                }
              }

              if (i != 0 || j == vector.length) {
                i++;
              }
            }
          }

          return vector;
        }

        static sortList(list) {
          if (list.length == 0) {
            return;
          }

          let i = 0;

          while (i < list.length - 1) {
            let p1 = list[i];
            let j;

            for (j = i + 1; j < list.length; j++) {
              let p2 = list[j];

              if (p1 > p2) {
                let temp = p1;
                list[i] = list[j];
                list[j] = temp;
                i = 0;
                break;
              }
            }

            if (i != 0 || j == list.length) {
              i++;
            }
          }

          return list;
        }

        static getRecommendCards2(list, myCards) {
          let _vectorCombinationOfCards = [];

          for (let i = 1; i <= myCards.length; i++) {
            Sam_CardLib.getCombination(myCards, myCards.length, i, _vectorCombinationOfCards);
          }

          let combinatedCards = [];

          _vectorCombinationOfCards.forEach(vectorCard => {
            vectorCard = Sam_CardLib.sortVector(vectorCard, false);

            if (Sam_CardLib.isPairs(vectorCard) || Sam_CardLib.isStraight(vectorCard) || Sam_CardLib.isStraight_Sam(vectorCard) || Sam_CardLib.isFourOfAKind(vectorCard) || Sam_CardLib.isThreeOfAKind(vectorCard)) {
              combinatedCards.push(vectorCard);
            }
          });

          let isIn = (arrCard, card) => {
            return arrCard.filter(c => c.serverCode == card.serverCode).length > 0;
          };

          let recommendCards = [];

          for (let i = 0; i < combinatedCards.length; i++) {
            let combinatedCard = combinatedCards[i];

            if (combinatedCard.filter(x => isIn(list, x)).length >= list.length) {
              if (combinatedCards.length > recommendCards.length) {
                recommendCards = combinatedCard;
              }
            }
          }

          return recommendCards;
        }

        static getRecommendCards(list, myCards) {
          // luon nho phai sort list
          //    list.Sort(ComparisionTienLen);
          list = Sam_CardLib.sortVector(list, false);
          let cards = [];

          if (list.length == 1) {
            let card = list[0];

            if (card.N == 15) {
              // neu la 2
              // tim tu quy
              cards = Sam_CardLib.getHigherFours2(0, myCards);
            } else {
              for (let i = 0; i < myCards.length; i++) {
                let c = myCards[i];

                if (c.N > card.N) {
                  cards.push(c);
                  break;
                }
              }
            }

            return cards;
          }

          if (Sam_CardLib.isPairs(list)) {
            // tim doi 2 lon hon
            cards = Sam_CardLib.getHigherPairs(list, myCards, true);

            if (cards.length > 0) {
              return cards;
            }

            if (list[0].N == 15) {
              cards = Sam_CardLib.getFourOfAKindPair(myCards);

              if (cards.length > 0) {
                return cards;
              }
            }
          }

          if (Sam_CardLib.isThreeOfAKind(list)) return Sam_CardLib.getHigherThrees(list, myCards, true);
          if (Sam_CardLib.isFourOfAKind(list)) return Sam_CardLib.getHigherFours(list, myCards);
          if (Sam_CardLib.isStraight_Sam(list)) return Sam_CardLib.getHigherStraight(list, myCards, true);
          return cards;
        }

        static isStraight(cards) {
          let isStraight = true;
          if (cards.length < 3) return false;

          for (let i = 0; i < cards.length - 1; i++) {
            let n1 = cards[i].N;
            let n2 = cards[i + 1].N;
            if (n1 == 15 || n2 == 15) return false;
            isStraight = isStraight && n1 + 1 == n2;
          }

          return isStraight;
        }

        static isStraight_Sam(cards) {
          // sanh 2,3,4 Q,K,A
          let valueList1 = []; // sanh 1,2,3,4

          let valueList2 = [];

          for (let i = 0; i < cards.length; i++) {
            let card = cards[i];
            valueList1.push(card.N == 15 ? 2 : card.N);
            valueList2.push(card.N == 15 ? 2 : card.N == 14 ? 1 : card.N);
          }

          if (Sam_CardLib.checkSanh_sam(valueList1)) {
            return true;
          }

          if (Sam_CardLib.checkSanh_sam(valueList2)) {
            return true;
          }

          return false;
        }

        static checkSanh_sam(cards) {
          if (cards.length < 3) return false; //    cards.Sort();

          cards = Sam_CardLib.sortList(cards);
          let isSanh = true;
          let n_start = cards[0];

          for (let i = 1; i < cards.length; i++) {
            isSanh = isSanh && cards[i] == n_start + i;
          }

          return isSanh;
        }

        static loaiboxamvatuquy(myCardsIn) {
          myCardsIn = Sam_CardLib.sortVector(myCardsIn, true);
          let list = [];
          let n = 0;
          let c = 0; // so lan gap cay n
          // danh sach nhung cay bai bi bo

          for (let i = 0; i < myCardsIn.length; i++) {
            if (n == myCardsIn[i].N) {
              c++;
              if (c < 3) list.push(myCardsIn[i]);
            } else {
              c = 1;
              n = myCardsIn[i].N;
              list.push(myCardsIn[i]);
            }
          } // sort lai input list
          //    myCardsIn.Sort(ComparisionTienLen);


          myCardsIn = Sam_CardLib.sortVector(myCardsIn, false);
          return list;
        }

        static loaiboxamdoivatuquy(myCardsIn) {
          myCardsIn = Sam_CardLib.sortVector(myCardsIn, true);
          let list = [];
          let n = 0;
          let c = 0; // so lan gap cay n
          // danh sach nhung cay bai bi bo

          for (let i = 0; i < myCardsIn.length; i++) {
            if (n == myCardsIn[i].N) {
              c++;
              if (c < 2) list.push(myCardsIn[i]);
            } else {
              c = 1;
              n = myCardsIn[i].N;
              list.push(myCardsIn[i]);
            }
          } // sort lai input list
          //    myCardsIn.Sort(ComparisionTienLen);


          myCardsIn = Sam_CardLib.sortVector(myCardsIn, false);
          return list;
        }

        static isPairs(list) {
          if (list.length != 2) return false;
          return list[0].N == list[1].N;
        }

        static isThreeOfAKind(list) {
          if (list.length != 3) return false;
          return list[0].N == list[1].N && list[1].N == list[2].N;
        }

        static isFourOfAKind(list) {
          if (list.length != 4) return false;
          return list[0].N == list[1].N && list[1].N == list[2].N && list[2].N == list[3].N;
        }

        static getHigherStraight(list, myCardsIn, sam) {
          let myCards = Sam_CardLib.loaiboxamdoivatuquy(myCardsIn); //    myCards.Sort(ComparisionTienLen);

          myCards = Sam_CardLib.sortVector(myCards, false);
          let straight = [];
          if (myCards.length < list.length) return straight;
          let myCardsValues = [];
          let listValues = [];
          let containsA = false;

          if (list[list.length - 2].N == 14) {
            //kiem tra co A va 2 hay ko
            containsA = true;
          }

          for (let i = 0; i < myCards.length; i++) {
            let card = myCards[i];
            let n = card.N;

            if (n == 15) {
              n = 2;
            }

            myCardsValues.push(n);
          }

          for (let i = 0; i < list.length; i++) {
            let card = list[i];
            let n = card.N;

            if (n == 15) {
              n = 2;
            }

            if (containsA && n == 14) {
              n = 1;
            }

            listValues.push(n);
          }

          myCardsValues = Sam_CardLib.sortList(myCardsValues);
          listValues = Sam_CardLib.sortList(listValues);
          let check = -1;

          for (let i = 0; i < myCardsValues.length; i++) {
            if (myCardsValues[i] > listValues[0]) {
              let maxMyCardValuesSize = myCardsValues.length - i;

              if (maxMyCardValuesSize < listValues.length) {
                break;
              } else {
                let temp1 = listValues.length - 1;
                let temp2 = myCardsValues[i + temp1] - myCardsValues[i];

                if (temp1 == temp2) {
                  check = i;
                  break;
                }
              }
            }
          }

          if (check != -1) {
            for (let i = check; i < check + listValues.length; i++) {
              for (let j = 0; j < myCards.length; j++) {
                let card = myCards[j];
                let n = card.N;

                if (n == 15) {
                  n = 2;
                }

                if (n == myCardsValues[i]) {
                  straight.push(card);
                  break;
                }
              }
            }
          }

          return straight;
        }

        static getHigherPairs(list, myCards, sam) {
          let pairs = [];
          if (myCards.length < 2) return pairs; //    myCards.Sort(ComparisionTienLen);

          myCards = Sam_CardLib.sortVector(myCards, false); //		Debug.LogError("N :"+ list.at(0).N);

          for (let i = 0; i < myCards.length - 1; i++) {
            if (myCards[i].N < list[0].N) continue;
            if (myCards[i].N == list[0].N && sam) continue;

            if (myCards[i].N == myCards[i + 1].N) {
              if (myCards[i].N == list[0].N) {
                if (myCards[i + 1].S > list[1].S) {
                  pairs.push(myCards[i]);
                  pairs.push(myCards[i + 1]);
                  return pairs;
                }
              } else {
                pairs.push(myCards[i]);
                pairs.push(myCards[i + 1]);
                return pairs;
              }
            }
          }

          return pairs;
        }

        static getHigherThrees(list, myCards, sam) {
          let threes = [];
          if (myCards.length < 3) return threes; //    myCards.Sort(ComparisionTienLen);

          myCards = Sam_CardLib.sortVector(myCards, false);

          for (let i = 0; i < myCards.length - 2; i++) {
            if (myCards[i].N < list[0].N) continue;
            if (myCards[i].N == list[0].N && sam) continue;

            if (myCards[i].N == myCards[i + 1].N && myCards[i + 1].N == myCards[i + 2].N) {
              if (myCards[i].N == list[0].N) {
                if (myCards[i + 2].S > list[2].S) {
                  threes.push(myCards[i]);
                  threes.push(myCards[i + 1]);
                  threes.push(myCards[i + 2]);
                  return threes;
                }
              } else {
                threes.push(myCards[i]);
                threes.push(myCards[i + 1]);
                threes.push(myCards[i + 2]);
                return threes;
              }
            }
          }

          return threes;
        }

        static getHigherFours(list, myCards) {
          return Sam_CardLib.getHigherFours2(list[0].N, myCards);
        }

        static getHigherFours2(n, myCards) {
          let fours = [];
          if (myCards.length < 4) return fours; //    myCards.Sort(ComparisionTienLen);

          myCards = Sam_CardLib.sortVector(myCards, false);

          for (let i = 0; i < myCards.length - 3; i++) {
            if (myCards[i].N < n) continue;

            if (myCards[i].N == myCards[i + 1].N && myCards[i + 1].N == myCards[i + 2].N && myCards[i + 2].N == myCards[i + 3].N) {
              fours.push(myCards[i]);
              fours.push(myCards[i + 1]);
              fours.push(myCards[i + 2]);
              fours.push(myCards[i + 3]);
              return fours;
            }
          }

          return fours;
        }

        static getFourOfAKind(list) {
          list = Sam_CardLib.sortVector(list, false);
          let tempCards = [];

          if (list.length < 4) {
            return tempCards;
          }

          for (let i = 0; i < list.length - 3; i++) {
            let card1 = list[i];
            let card2 = list[i + 1];
            let card3 = list[i + 2];
            let card4 = list[i + 3];

            if (card1.N == card2.N && card2.N == card3.N && card3.N == card4.N) {
              tempCards.push(list[i]);
              tempCards.push(list[i + 1]);
              tempCards.push(list[i + 2]);
              tempCards.push(list[i + 3]);
              break;
            }
          }

          return tempCards;
        }

        static getFourOfAKindPair(list) {
          let tempCards = [];
          list.forEach(x => {
            let c = new GameCard();
            c.decodeCard(x.serverCode, GlobalVariables.TIENLEN);
            tempCards.push(x);
          });
          tempCards = Sam_CardLib.sortVector(tempCards, false);
          let tuQuy1 = [];
          let tuQuy2 = [];

          if (tempCards.length < 8) {
            return tuQuy1;
          }

          tuQuy1 = Sam_CardLib.getFourOfAKind(tempCards);

          if (tuQuy1.length > 0) {
            for (let i = 0; i < tuQuy1.length; i++) {
              let card = tuQuy1[i];
              tempCards = tempCards.filter(x => x.serverCode != card.serverCode);
            }

            tuQuy2 = Sam_CardLib.getFourOfAKind(tempCards);

            if (tuQuy2.length > 0) {
              tuQuy2.forEach(card => {
                tuQuy1.push(card);
              });
            } else {
              tuQuy1 = [];
            }
          }

          return tuQuy1;
        }

        static isEquals(list1, list2) {
          let tempList1 = list1;
          let tempList2 = list2;
          tempList1 = Sam_CardLib.sortVector(tempList1, false);
          tempList2 = Sam_CardLib.sortVector(tempList2, false);

          if (tempList1.length != tempList2.length) {
            return false;
          }

          for (let i = 0; i < tempList1.length; i++) {
            if (tempList1[i].N != tempList2[i].N) {
              return false;
            }
          }

          return true;
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniGameNetworkHandler.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './MiniGameNodeController.ts', './CCMiniGameRoot.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, log, sys, url, GameConfigManager, MiniGameNodeController, CCMiniGameRoot, GamePlayManager, NETWORK_STATE;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      sys = module.sys;
      url = module.url;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      MiniGameNodeController = module.default;
    }, function (module) {
      CCMiniGameRoot = module.CCMiniGameRoot;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
      NETWORK_STATE = module.NETWORK_STATE;
    }],
    execute: function () {
      exports({
        MessageRequest: void 0,
        MessageResponse: void 0
      });

      cclegacy._RF.push({}, "2862aCyENxJ44uCiSPt6RvZ", "MiniGameNetworkHandler", undefined);

      let MessageResponse;

      (function (MessageResponse) {
        MessageResponse[MessageResponse["LogIn_Response"] = 1] = "LogIn_Response";
        MessageResponse[MessageResponse["LogOut_Response"] = 2] = "LogOut_Response";
        MessageResponse[MessageResponse["JoinRoom_Response"] = 3] = "JoinRoom_Response";
        MessageResponse[MessageResponse["LeaveRoom_Response"] = 4] = "LeaveRoom_Response";
        MessageResponse[MessageResponse["Extension_Response"] = 5] = "Extension_Response";
        MessageResponse[MessageResponse["Ping_Response"] = 6] = "Ping_Response";
      })(MessageResponse || (MessageResponse = exports('MessageResponse', {})));

      let MessageRequest;

      (function (MessageRequest) {
        MessageRequest[MessageRequest["LogIn_Type"] = 1] = "LogIn_Type";
        MessageRequest[MessageRequest["LogOut_Type"] = 2] = "LogOut_Type";
        MessageRequest[MessageRequest["JoinRoom_Type"] = 3] = "JoinRoom_Type";
        MessageRequest[MessageRequest["LeaveRoom_Type"] = 4] = "LeaveRoom_Type";
        MessageRequest[MessageRequest["RoomPlugin_Type"] = 5] = "RoomPlugin_Type";
        MessageRequest[MessageRequest["ZonePlugin_Type"] = 6] = "ZonePlugin_Type";
        MessageRequest[MessageRequest["Ping_Type"] = 7] = "Ping_Type";
      })(MessageRequest || (MessageRequest = exports('MessageRequest', {})));

      class MiniGameNetworkHandler {
        static init(miniGameWSURL) {
          log("MiniGameNetworkHandler::Connecting to mini game server:" + miniGameWSURL);

          if (this.ws != null) {
            this.ws.onopen = null;
            this.ws.onclose = null;
            this.ws.onmessage = null;
            this.ws.onerror = null;
          }

          if (sys.ANDROID === sys.platform) {
            console.log("cuong check android mini!!"); //@ts-ignore

            this.ws = new WebSocket(miniGameWSURL, null, url.raw('resources/cacert.pem'));
          } else {
            this.ws = new WebSocket(miniGameWSURL);
          }

          this.ws.onopen = function (event) {
            var _CCMiniGameRoot$getIn;

            log("MiniGameNetworkHandler::Connected to mini game server " + miniGameWSURL + "," + this.readyState);
            (_CCMiniGameRoot$getIn = CCMiniGameRoot.getInstance()) === null || _CCMiniGameRoot$getIn === void 0 ? void 0 : _CCMiniGameRoot$getIn.openMiniGameNode();
            let username = GameConfigManager.username;
            let password = GameConfigManager.password;
            let info = GameConfigManager.loginInfo;
            let signature = GameConfigManager.signature;
            let loginInfo = {};
            loginInfo["info"] = info;
            loginInfo["signature"] = signature;
            console.log(info, signature);
            let loginMessage = [MessageRequest.LogIn_Type, "MiniGame", username, password, loginInfo];
            MiniGameNetworkHandler.send(loginMessage);
          };

          this.ws.onmessage = function (event) {
            var _MiniGameNodeControll;

            if (MiniGameNodeController.getInstance() != null && ((_MiniGameNodeControll = MiniGameNodeController.getInstance()) === null || _MiniGameNodeControll === void 0 ? void 0 : _MiniGameNodeControll.onMiniGameReceivedMsgCb) != null) {
              MiniGameNodeController.getInstance().onMiniGameReceivedMsgCb(event);
            }
          };

          this.ws.onerror = function (event) {
            var _MiniGameNodeControll2;

            log("MiniGameNetworkHandler::Send Text fired an error:", event);
            (_MiniGameNodeControll2 = MiniGameNodeController.getInstance()) === null || _MiniGameNodeControll2 === void 0 ? void 0 : _MiniGameNodeControll2.forceAllMachineStop();
          };

          this.ws.onclose = function (event) {
            log("MiniGameNetworkHandler::WebSocket instance closed.");

            if (GamePlayManager.STATE == NETWORK_STATE.LOGGED_IN) {
              log("MiniGameNetworkHandler::reconnect");
              GamePlayManager.STATE = NETWORK_STATE.UNLOGGED_IN;
              GamePlayManager.reconnect();
            }
          };
        }

        static send(data) {
          MiniGameNetworkHandler.ws && MiniGameNetworkHandler.ws.send(JSON.stringify(data));
        }

        static close() {
          MiniGameNetworkHandler.ws && MiniGameNetworkHandler.ws.close();
        }

      }

      exports('MiniGameNetworkHandler', MiniGameNetworkHandler);
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // import { Md5 } from "ts-md5";
      // import CCMiniGameRoot from "../CCMiniGameRoot";
      // import DragonBallGameView from "../Games/DragonBall/DragonBallGameView";
      // import KimCuongGameView from "../Games/KimCuong/KimCuongGameView";
      // import MiniPokerGameView from "../Games/MiniPoker/MiniPokerGameView";
      // import NotiView from "../Games/TaiXiu/NotiView";
      // import MiniGameNodeController from "../MiniGameNodeController";
      // import { GlobalVariables, GLOBAL_MESSAGE } from "../Utils/GlobalVariables";
      // import GameHTTPNetwork from "./GameHTTPNetwork";
      // import { GameNetworkHandler } from "./GameNetworkHandler";
      // 
      // export enum MessageResponse {
      //     LogIn_Response = 1,
      //     LogOut_Response,
      //     JoinRoom_Response,
      //     LeaveRoom_Response,
      //     Extension_Response,
      //     Ping_Response
      // };
      // 
      // export enum MessageRequest {
      //     LogIn_Type = 1,
      //     LogOut_Type,
      //     JoinRoom_Type,
      //     LeaveRoom_Type,
      //     RoomPlugin_Type,
      //     ZonePlugin_Type,
      //     Ping_Type
      // }
      // 
      // export class MiniGameNetworkHandler {
      //     private static ws: WebSocket = null;
      // 
      //     public static init(miniGameWSURL) {
      //         cc.log("MiniGameNetworkHandler::Connecting to mini game server:" + miniGameWSURL);
      // 
      //         if(this.ws != null)
      //         {
      //             this.ws.onopen = null;
      //             this.ws.onclose = null;
      //             this.ws.onmessage = null;
      //             this.ws.onerror = null;
      //         }
      // 
      //         this.ws = new WebSocket(miniGameWSURL);
      //         this.ws.onopen = function (event) {
      //             cc.log("MiniGameNetworkHandler::Connected to mini game server " + miniGameWSURL + "," + this.readyState);
      // 
      //             CCMiniGameRoot.getInstance().openMiniGameNode();
      // 
      //             let token = "";
      //             let username = "";
      //             let password = "";
      //             if(MiniGameNodeController.DEBUG){
      //                 username = "kushi12345";
      //                 password = "kushi@12345";
      //                 token = "fc7ab4129177409d97937b7456c007b0";
      //             } else {
      //                 username = cc.sys.localStorage.getItem("user_name");
      //                 password = cc.sys.localStorage.getItem("user_password");
      //                 token = cc.sys.localStorage.getItem("user_token");
      //             }
      //             GlobalVariables.SERVER_ACCESS_TOKEN = token;
      // 
      //             GameHTTPNetwork.sendGET(GlobalVariables.GET_LOGIN_INFO,(res) => {
      //                 let doc = JSON.parse(res);
      //                 let status = doc["status"];
      //                 let data = doc["data"];
      //             
      //                 if (status == 0) {
      //                     cc.sys.localStorage.setItem("login_info",JSON.stringify(data["info"]));
      //                     cc.sys.localStorage.setItem("login_signature",data["signature"]);
      //                     cc.sys.localStorage.setItem("user_token",data["accessToken"]);
      //                     cc.sys.localStorage.setItem("refresh_token",data["refreshToken"]);
      // 
      //                     // Login to mini game server
      //                     let loginMessage = [];
      //                     let token = cc.sys.localStorage.getItem("user_token");
      //                     GlobalVariables.SERVER_ACCESS_TOKEN = token;
      //                     let refresh_token = cc.sys.localStorage.getItem("refresh_token");
      //                     GlobalVariables.REFRESH_TOKEN = refresh_token;
      //                     let info = cc.sys.localStorage.getItem("login_info");
      //                     let signature = cc.sys.localStorage.getItem("login_signature");
      //                     let loginInfo = {};
      //                     loginInfo["info"] = info;
      //                     loginInfo["signature"] = signature;
      //                     console.log(info,signature);
      //                     loginMessage = [MessageRequest.LogIn_Type, "MiniGame", username, password, loginInfo];
      //                     MiniGameNetworkHandler.send(loginMessage);
      //                     MiniGameNodeController.getInstance() && MiniGameNodeController.getInstance().sendRefreshMoney();
      //                     // GameNetworkHandler.init(wsGameURL);
      //                 }
      //                 else {
      //                     let data = doc["data"];
      //                     let mes = data["message"];
      //                     
      //                     NotiView.getInstance().showMessage(mes);
      //                 }
      //             },false,true);
      //         };
      //         this.ws.onmessage = function (event) {
      //             if(MiniGameNodeController.getInstance() != null) {
      //                 MiniGameNodeController.getInstance().onMiniGameReceivedMsgCb &&  MiniGameNodeController.getInstance().onMiniGameReceivedMsgCb(event);
      //             }
      //         };
      //         this.ws.onerror = function (event) {
      //             cc.log("MiniGameNetworkHandler::Send Text fired an error:",event);
      //             MiniGameNodeController.getInstance().forceAllMachineStop();
      //         };
      //         this.ws.onclose = function (event) {
      //             cc.log("MiniGameNetworkHandler::WebSocket instance closed.");
      //             CCMiniGameRoot.getInstance().reconnect();
      //         };
      //     }
      // 
      //     public static send(data) {
      //         MiniGameNetworkHandler.ws && MiniGameNetworkHandler.ws.send(JSON.stringify(data));
      //     }
      // 
      //     public static close() {
      //         MiniGameNetworkHandler.ws && MiniGameNetworkHandler.ws.close();
      //     }
      // }

      _defineProperty(MiniGameNetworkHandler, "ws", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniPokerBetRankView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './StringUtils.ts', './GlobalVariables.ts', './GameHTTPNetwork.ts', './MiniPokerBetRankItemView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Button, Label, _decorator, UIOpacity, CommonPopup, StringUtils, GlobalVariables, GameHTTPNetwork, MiniPokerBetRankItemView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      MiniPokerBetRankItemView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "28b5fKpJSpFlKcWl3lca3QX", "MiniPokerBetRankView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class MiniPokerBetRankDict {
        constructor() {
          _defineProperty(this, "rank", void 0);

          _defineProperty(this, "money", void 0);

          _defineProperty(this, "displayName", void 0);

          _defineProperty(this, "bet", void 0);

          _defineProperty(this, "type", void 0);

          _defineProperty(this, "betTime", void 0);
        }

      }

      let MiniPokerBetRankView = exports('default', (_dec = ccclass('MiniPokerBetRankView'), _dec2 = property([MiniPokerBetRankItemView]), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(Label), _dec(_class = (_class2 = (_temp = class MiniPokerBetRankView extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "item_views", _descriptor, this);

          _initializerDefineProperty(this, "btn_prev", _descriptor2, this);

          _initializerDefineProperty(this, "btn_next", _descriptor3, this);

          _initializerDefineProperty(this, "lbl_current_page", _descriptor4, this);

          _defineProperty(this, "_rank", []);

          _defineProperty(this, "current_page", 1);

          _defineProperty(this, "maxPage", 0);
        }

        onLoad() {
          super.onLoad();
          this.btn_prev.node.on("click", () => {
            if (this.current_page <= 1) return;
            this.current_page -= 1;
            this.lbl_current_page.string = this.current_page.toString();
            this.fetchRank(false);
          });
          this.btn_next.node.on("click", () => {
            if (this.current_page >= this.maxPage) return;
            this.current_page += 1;
            this.lbl_current_page.string = this.current_page.toString();
            this.fetchRank(false);
          });
        }

        fetchRank(hasFx = true) {
          if (hasFx) {
            this.current_page = 1;
            this.lbl_current_page.string = this.current_page.toString();
          }

          let skip = (this.current_page - 1) * 6;
          let url = GlobalVariables.BET_RANK_TOP_URL.replace("%gameid%", GlobalVariables.MINIPOKER.toString()).replace("%skip%", skip.toString());
          GameHTTPNetwork.sendGET(url, response => {
            this._rank = [];
            let doc = JSON.parse(response);
            let data = doc["data"];
            let jarr = data["items"];
            let count = data["count"];
            this.maxPage = Math.ceil(count / 6);

            for (let i = 0; i < jarr.length; i++) {
              let jsonMNPKItem = jarr[i];
              let newBetRank = new MiniPokerBetRankDict();
              newBetRank.bet = jsonMNPKItem["betting"];
              newBetRank.displayName = jsonMNPKItem["displayName"];
              newBetRank.money = jsonMNPKItem["money"];
              newBetRank.type = jsonMNPKItem["description"];
              let requestTime = jsonMNPKItem["createdTime"];
              let date = new Date(requestTime);
              newBetRank.betTime = StringUtils.formatTime(date);

              this._rank.push(newBetRank);
            }

            this.showRank(hasFx);
          });
        }

        showRank(hasFx = true) {
          this.item_views.forEach((item, index) => {
            let info = this._rank[index];

            if (info != null && info != undefined) {
              item.node.getComponent(UIOpacity).opacity = 255;
              item.show(info.betTime, info.displayName, info.bet, info.money, info.type);
            } else {
              item.node.getComponent(UIOpacity).opacity = 1;
            }
          });

          if (hasFx) {
            this.show();
          }
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item_views", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_prev", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_next", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbl_current_page", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import GameHTTPNetwork from "../../Network/GameHTTPNetwork";
      // import { GlobalVariables } from "../../Utils/GlobalVariables";
      // import { StringUtils } from "../../Utils/StringUtils";
      // import TaiXiuPopupCmp from "../TaiXiu/TaiXiuPopupCmp";
      // import MiniPokerBetRankItemView from "./MiniPokerBetRankItemView";
      // 
      // class MiniPokerBetRankDict {
      //     public rank;
      //     public money;
      //     public displayName;
      //     public bet;
      //     public type;
      //     public betTime;
      // };
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class MiniPokerBetRankView extends TaiXiuPopupCmp {
      //     @property([MiniPokerBetRankItemView])
      //     private item_views: MiniPokerBetRankItemView[] = [];
      // 
      //     @property(cc.Button)
      //     private btn_close: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_prev: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_next: cc.Button = null;
      // 
      //     @property(cc.Label)
      //     private lbl_current_page: cc.Label = null;
      // 
      //     private _rank: MiniPokerBetRankDict[] = [];
      // 
      //     private current_page = 1;
      // 
      //     private maxPage = 0;
      // 
      //     onLoad() {
      //         super.onLoad();
      // 
      //         this.original_scale = this.node.scale;
      //         this.btn_close.node.on("click", () => {
      //             this.hide();
      //         });
      // 
      //         this.btn_prev.node.on("click", () => {
      //             if (this.current_page <= 1) return;
      //             this.current_page -= 1;
      //             this.lbl_current_page.string = this.current_page.toString();
      //             this.fetchRank(false);
      //         });
      // 
      //         this.btn_next.node.on("click", () => {
      //             if (this.current_page >= this.maxPage) return;
      //             this.current_page += 1;
      //             this.lbl_current_page.string = this.current_page.toString();
      //             this.fetchRank(false);
      //         });
      // 
      //     }
      // 
      //     public fetchRank(jumpToFirstPage = true) {
      //         if(jumpToFirstPage) {
      //             this.current_page = 1;
      //             this.lbl_current_page.string = this.current_page.toString();
      //         }
      // 
      //         let skip = (this.current_page - 1) * 6;
      //         let url = GlobalVariables.BET_RANK_TOP_URL.replace("%gameid%",GlobalVariables.MINIPOKER.toString()).replace("%skip%",skip.toString());
      // 
      //         GameHTTPNetwork.sendGET(url, (response) => {
      //             this._rank = [];
      // 
      //             let doc = JSON.parse(response);
      // 
      //             let data = doc["data"];
      //             let jarr = data["items"];
      //             let count = data["count"];
      //             this.maxPage = Math.ceil(count / 6);
      // 
      //             for (let i = 0; i < jarr.length; i++) {
      //                 let jsonMNPKItem = jarr[i];
      // 
      //                 let newBetRank = new MiniPokerBetRankDict();
      // 
      //                 newBetRank.bet = jsonMNPKItem["betting"];
      //                 newBetRank.displayName = jsonMNPKItem["displayName"];
      //                 newBetRank.money = jsonMNPKItem["money"];
      //                 newBetRank.type = jsonMNPKItem["description"];
      // 
      //                 let requestTime = jsonMNPKItem["createdTime"];
      //                 let date = new Date(requestTime);
      //                 newBetRank.betTime = StringUtils.formatTime(date);
      // 
      //                 this._rank.push(newBetRank);
      //             }
      // 
      //             this.showRank();
      //         });
      //     }
      // 
      //     public showRank() {
      //         this.item_views.forEach((item, index) => {
      //             let info = this._rank[index];
      //             if (info != null && info != undefined) {
      //                 item.node.opacity = 255;
      //                 item.show(info.betTime, info.displayName, info.bet, info.money, info.type);
      //             } else {
      //                 item.node.opacity = 0;
      //             }
      //         });
      // 
      //         this.show();
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniPokerGameView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './StringUtils.ts', './MiniGameNetworkHandler.ts', './NotiView.ts', './GlobalVariables.ts', './MauBinh_CardLib.ts', './MiniPokerMessageHandler.ts', './BaseMiniGameView.ts', './MiniPokerBetHistoryView.ts', './MiniPokerBetRankView.ts', './MiniPokerNoHuView.ts', './MiniPoker_SlotMachineCmp.ts', './MiniGameNodeController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Button, Node, sp, Toggle, SpriteFrame, _decorator, sys, tween, Tween, UIOpacity, Vec3, Color, GameConfigManager, StringUtils, MessageRequest, MiniGameNetworkHandler, NotiView, GlobalVariables, MauBinh_CardLib, MAU_BINH_RESULT, GameCard, MiniPokerMessageHandler, MiniPoker_Message, BaseMiniGameView, MiniPokerBetHistoryView, MiniPokerBetRankView, MiniPokerNoHuView, MiniPokerSlotMachineCmp_SlotMachineCmp, MiniGameNodeController, GamePlayManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Button = module.Button;
      Node = module.Node;
      sp = module.sp;
      Toggle = module.Toggle;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      sys = module.sys;
      tween = module.tween;
      Tween = module.Tween;
      UIOpacity = module.UIOpacity;
      Vec3 = module.Vec3;
      Color = module.Color;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MiniGameNetworkHandler = module.MiniGameNetworkHandler;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      MauBinh_CardLib = module.default;
      MAU_BINH_RESULT = module.MAU_BINH_RESULT;
      GameCard = module.GameCard;
    }, function (module) {
      MiniPokerMessageHandler = module.default;
      MiniPoker_Message = module.MiniPoker_Message;
    }, function (module) {
      BaseMiniGameView = module.default;
    }, function (module) {
      MiniPokerBetHistoryView = module.default;
    }, function (module) {
      MiniPokerBetRankView = module.default;
    }, function (module) {
      MiniPokerNoHuView = module.default;
    }, function (module) {
      MiniPokerSlotMachineCmp_SlotMachineCmp = module.default;
    }, function (module) {
      MiniGameNodeController = module.default;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _class3, _temp;

      cclegacy._RF.push({}, "29658cf5wRFxp/x7Wny4LCJ", "MiniPokerGameView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class MiniPokerJackpotInfo {
        constructor() {
          _defineProperty(this, "aid", void 0);

          _defineProperty(this, "jackpot", void 0);

          _defineProperty(this, "bet", void 0);
        }

      }

      let MiniPokerGameView = exports('default', (_dec = ccclass('MiniPokerGameView'), _dec2 = property(Label), _dec3 = property(MiniPokerBetHistoryView), _dec4 = property(MiniPokerBetRankView), _dec5 = property([Button]), _dec6 = property(Button), _dec7 = property(Button), _dec8 = property(Button), _dec9 = property(Button), _dec10 = property(Button), _dec11 = property(Node), _dec12 = property(sp.Skeleton), _dec13 = property(Label), _dec14 = property(Label), _dec15 = property(MiniPokerSlotMachineCmp_SlotMachineCmp), _dec16 = property(sp.Skeleton), _dec17 = property(Toggle), _dec18 = property(Toggle), _dec19 = property(MiniPokerNoHuView), _dec20 = property([SpriteFrame]), _dec21 = property([SpriteFrame]), _dec(_class = (_class2 = (_temp = _class3 = class MiniPokerGameView extends BaseMiniGameView {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lblJackpot", _descriptor, this);

          _initializerDefineProperty(this, "miniPokerBetHistoryView", _descriptor2, this);

          _initializerDefineProperty(this, "miniPokerBetRankView", _descriptor3, this);

          _initializerDefineProperty(this, "btn_chips", _descriptor4, this);

          _defineProperty(this, "chip_values", [100, 1000, 5000, 10000]);

          _initializerDefineProperty(this, "btn_rank", _descriptor5, this);

          _initializerDefineProperty(this, "btn_bet_history", _descriptor6, this);

          _initializerDefineProperty(this, "btn_help", _descriptor7, this);

          _initializerDefineProperty(this, "btn_spin", _descriptor8, this);

          _initializerDefineProperty(this, "btn_spin2", _descriptor9, this);

          _initializerDefineProperty(this, "result_node", _descriptor10, this);

          _initializerDefineProperty(this, "bg_result_node", _descriptor11, this);

          _initializerDefineProperty(this, "lbl_result_text", _descriptor12, this);

          _initializerDefineProperty(this, "lbl_result_amount", _descriptor13, this);

          _initializerDefineProperty(this, "miniPoker_SlotMachineCmp", _descriptor14, this);

          _initializerDefineProperty(this, "anim_spin", _descriptor15, this);

          _initializerDefineProperty(this, "tog_auto", _descriptor16, this);

          _initializerDefineProperty(this, "tog_fast", _descriptor17, this);

          _initializerDefineProperty(this, "miniPokerNoHuView", _descriptor18, this);

          _initializerDefineProperty(this, "loaded_card_normal", _descriptor19, this);

          _initializerDefineProperty(this, "loaded_card_blur", _descriptor20, this);

          _defineProperty(this, "_aid", 1);

          _defineProperty(this, "bet", 0);

          _defineProperty(this, "_jackpotInfos", []);

          _defineProperty(this, "jackpot_amount", 0);

          _defineProperty(this, "jackpot_tween", null);

          _defineProperty(this, "cards", []);

          _defineProperty(this, "moneyExchange", 0);

          _defineProperty(this, "wonJackpot", 0);
        }

        isSpinning() {
          return this.miniPoker_SlotMachineCmp.isSpinning();
        }

        forceMachineStop(stopAuto = true) {
          if (this.tog_auto.isChecked && stopAuto) {
            this.tog_auto.isChecked = false;
          }

          this.stop([]);
        }

        turnOffAutoSpin() {
          this.tog_auto.isChecked = false;
        }

        onLoad() {
          super.onLoad();
          MiniPokerGameView.instance = this;

          MiniPokerMessageHandler.onResultError = mes => {
            NotiView.getInstance().showMessage(mes, this.node, GlobalVariables.MINIPOKER);
            this.forceMachineStop();
          };

          this.bet = this.chip_values[0];
          this.init();
          this.btn_spin.node.on("click", () => {
            if (!this.miniPoker_SlotMachineCmp.isStopped()) {
              NotiView.getInstance().showMessage("Đang Quay", this.node, GlobalVariables.MINIPOKER);
              return;
            }

            this.spin();
          });
          this.btn_spin2.node.on("click", () => {
            if (!this.miniPoker_SlotMachineCmp.isStopped()) {
              NotiView.getInstance().showMessage("Đang Quay", this.node, GlobalVariables.MINIPOKER);
              return;
            }

            this.spin();
          });
          this.btn_rank.node.on("click", () => {
            this.showRank();
          });
          this.btn_bet_history.node.on("click", () => {
            this.showBetHistory();
          });
          this.btn_help.node.on("click", () => {
            sys.openURL(GameConfigManager.helpURL);
          });
          this.btn_chips.forEach((chip, index) => {
            let ind = index;
            chip.node.on("click", () => {
              var _this$tog_auto;

              if (!this.miniPoker_SlotMachineCmp.isStopped() || ((_this$tog_auto = this.tog_auto) === null || _this$tog_auto === void 0 ? void 0 : _this$tog_auto.isChecked)) {
                NotiView.getInstance().showMessage("Đang Quay", this.node, GlobalVariables.MINIPOKER);
                return;
              }

              this.highlightBet(ind);
              this.bet = this.chip_values[ind];
              this.subscribeJackpot();
            });
          });
          this.tog_auto.node.on("toggle", () => {
            if (this.tog_auto.isChecked && this.miniPoker_SlotMachineCmp.isStopped()) {
              this.spin();
            }
          });

          this.miniPoker_SlotMachineCmp.onMachineStopped = () => {
            let showNoHuEffect = tween(this.node).sequence(tween().call(() => {
              this.miniPokerNoHuView.show(this.cards, this.moneyExchange);
            }), this.tog_auto.isChecked ? tween(this.node).sequence(tween().delay(14.5), tween().call(() => {
              this.miniPokerNoHuView.hide();
            })) : tween(this.node).sequence(tween().delay(6.5), tween().call(() => {
              this.miniPokerNoHuView.activeClick();
            })));
            let showResult = this.wonJackpot ? showNoHuEffect : tween(this.node).call(() => {
              this.showResult();
            });
            let finishAct = tween(this.node).sequence(showResult, tween().delay(0.5), tween().call(() => {
              if (this.tog_auto.isChecked && this.miniPoker_SlotMachineCmp.isStopped()) {
                this.spin();
              }
            }));
            finishAct.start();
            GamePlayManager.sendRefreshMoney();
          };

          this.miniPoker_SlotMachineCmp.init();
        }

        highlightBet(ind) {
          this.btn_chips.forEach((chip, index) => {
            let checkmark = chip.node.children[1];
            checkmark.active = index == ind;
          });
        }

        showResult() {
          let result = MauBinh_CardLib.getPokerMiniResult(this.cards);
          if (result == MAU_BINH_RESULT.MAU_THAU || this.moneyExchange <= 0) return;
          let showLight = result == MAU_BINH_RESULT.THUNG_PHA_SANH || result == MAU_BINH_RESULT.TU_QUY || result == MAU_BINH_RESULT.THUNG || result == MAU_BINH_RESULT.SANH || result == MAU_BINH_RESULT.CU_LU;
          Tween.stopAllByTarget(this.result_node);
          Tween.stopAllByTarget(this.result_node.getComponent(UIOpacity));
          let pos = new Vec3(this.result_node.position);
          pos.y = -220;
          this.result_node.setPosition(pos);
          let result_str = MauBinh_CardLib.getPokerMiniResultString(this.cards);
          this.lbl_result_text.string = result_str;
          this.lbl_result_amount.string = "+" + StringUtils.formatNumber(this.moneyExchange);
          this.result_node.getComponent(UIOpacity).opacity = 255;
          this.bg_result_node.color = Color.WHITE;
          let track = this.bg_result_node.setAnimation(0, "animation", false);

          if (track != null) {
            this.bg_result_node.setCompleteListener(trackEntry => {
              let name = trackEntry.animation ? trackEntry.animation.name : '';

              if (name == "animation") {
                this.bg_result_node.setAnimation(0, "loop", true);
              }
            });
          }

          if (this.moneyExchange >= 1000000000) {
            this.bg_result_node.node.setScale(1.1, 1, 1);
          } else if (this.moneyExchange <= 1000) {
            this.bg_result_node.node.setScale(0.6, 1, 1);
          } else if (this.moneyExchange <= 10000) {
            this.bg_result_node.node.setScale(0.7, 1, 1);
          } else if (this.moneyExchange <= 100000) {
            this.bg_result_node.node.setScale(0.8, 1, 1);
          } else if (this.moneyExchange <= 1000000) {
            this.bg_result_node.node.setScale(0.9, 1, 1);
          } else if (this.moneyExchange <= 10000000) ;

          let seq = tween(this.result_node).sequence(tween().by(0.3, {
            position: new Vec3(0, 20, 0)
          }), tween().delay(this.tog_fast.isChecked ? 0.5 : 1), tween().call(() => {
            this.result_node.getComponent(UIOpacity).opacity = 0;
            this.bg_result_node.color = Color.TRANSPARENT;
          }));
          seq.start();
        }

        static getInstance() {
          return MiniPokerGameView.instance;
        }

        showRank() {
          this.miniPokerBetRankView.fetchRank();
        }

        spin() {
          this.anim_spin.setAnimation(0, "animation", false);
          this.miniPoker_SlotMachineCmp.spin();
          this.requestSpin();
        }

        requestSpin() {
          let dict = {};
          dict["cmd"] = MiniPoker_Message.SPIN_RESULT;
          dict["b"] = this.bet;
          dict["aid"] = this._aid;
          let lineArr = [0];
          dict["ls"] = lineArr;
          dict["gid"] = GlobalVariables.MINIPOKER;
          let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
          MiniGameNetworkHandler.send(mes);
        }

        stop(cardsArr) {
          if (!this.miniPoker_SlotMachineCmp.isSpinning()) return;
          let seq = tween(this.node).sequence(tween().delay(MiniPokerSlotMachineCmp_SlotMachineCmp.TIME_TO_SHOW_RESULT), tween().call(() => {
            if (this.tog_fast.isChecked) this.miniPoker_SlotMachineCmp.stopImmediately(cardsArr);else this.miniPoker_SlotMachineCmp.stop(cardsArr);
          }));
          seq.start();
        }

        showBetHistory() {
          this.miniPokerBetHistoryView.fetchHistory();
        }

        receiveData(aid, moneyExchange, cardsArr, wonJackpot) {
          this._aid = aid;
          this.cards = cardsArr.map(x => {
            let a = new GameCard();
            a.decodeCard(x, GlobalVariables.BINH);
            return a;
          });
          this.moneyExchange = moneyExchange;
          this.wonJackpot = wonJackpot; // this.wonJackpot = moneyExchange > 0 ? true : false;

          this.stop(this.cards);
        }

        subscribeJackpot(subscribe = true) {
          let cmd = MiniPoker_Message.SUBSCRIBE_JACKPOT;

          if (!subscribe) {
            cmd = MiniPoker_Message.UNSUBSCRIBE_JACKPOT;
          }

          let dict = {};
          dict["cmd"] = cmd;
          dict["gid"] = GlobalVariables.MINIPOKER;
          let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
          MiniGameNetworkHandler.send(mes);
        }

        updateJackpot(jars, isSubcribe = false) {
          if (isSubcribe) this._jackpotInfos = [];

          for (let i = 0; i < jars.length; i++) {
            let jackpotDict = jars[i];
            let jackpot = jackpotDict["J"];
            let aid = jackpotDict["aid"];
            let bet = jackpotDict["b"];

            if (isSubcribe) {
              let newJackpot = new MiniPokerJackpotInfo();
              newJackpot.jackpot = jackpot;
              newJackpot.aid = aid;
              newJackpot.bet = bet;

              this._jackpotInfos.push(newJackpot);
            } else {
              for (let j = 0; j < this._jackpotInfos.length; j++) {
                if (this._jackpotInfos[j].aid == aid && this._jackpotInfos[j].bet == bet) {
                  this._jackpotInfos[j].jackpot = jackpot;
                  break;
                }
              }
            }
          }

          if (isSubcribe) {
            let tempSortedJackpot = [];

            for (let i = 0; i < this._jackpotInfos.length; i++) {
              if (this._jackpotInfos[i].aid == 1) {
                let newJackpot = new MiniPokerJackpotInfo();
                newJackpot.jackpot = this._jackpotInfos[i].jackpot;
                newJackpot.aid = this._jackpotInfos[i].aid;
                newJackpot.bet = this._jackpotInfos[i].bet;
                tempSortedJackpot.push(newJackpot);
              }
            }

            for (let i = 0; i < this._jackpotInfos.length; i++) {
              if (this._jackpotInfos[i].aid == 2) {
                let newJackpot = new MiniPokerJackpotInfo();
                newJackpot.jackpot = this._jackpotInfos[i].jackpot;
                newJackpot.aid = this._jackpotInfos[i].aid;
                newJackpot.bet = this._jackpotInfos[i].bet;
                tempSortedJackpot.push(newJackpot);
              }
            }

            let tempAid = 1;

            for (let i = 0; i < tempSortedJackpot.length - 1; i++) {
              for (let j = i + 1; j < tempSortedJackpot.length; j++) {
                if (tempSortedJackpot[i].aid == tempAid && tempSortedJackpot[j].aid == tempAid) {
                  if (tempSortedJackpot[j].bet < tempSortedJackpot[i].bet) {
                    let tempBet = tempSortedJackpot[i].bet;
                    let tempJackpot = tempSortedJackpot[i].jackpot;
                    tempSortedJackpot[i].bet = tempSortedJackpot[j].bet;
                    tempSortedJackpot[i].jackpot = tempSortedJackpot[j].jackpot;
                    tempSortedJackpot[j].bet = tempBet;
                    tempSortedJackpot[j].jackpot = tempJackpot;
                    j = i + 1;
                  }
                }
              }

              if (i == tempSortedJackpot.length - 2 && tempAid == 1) {
                i = 0;
                tempAid = 2;
              }
            }

            this._jackpotInfos = tempSortedJackpot;
          }

          this.updateJackpotLabels(!isSubcribe);
        }

        updateJackpotLabels(withFx) {
          for (let i = 0; i < this._jackpotInfos.length; i++) {
            if (this._jackpotInfos[i].aid == this._aid && this._jackpotInfos[i].bet == this.bet) {
              this.jackpot_tween && this.jackpot_tween.stop();

              if (!withFx) {
                this.jackpot_amount = this._jackpotInfos[i].jackpot;
                this.lblJackpot.string = StringUtils.formatNumber(this.jackpot_amount);
              } else {
                let obj = {
                  a: this.jackpot_amount
                };
                this.jackpot_tween = tween(obj).to(0.5, {
                  a: this._jackpotInfos[i].jackpot
                }, {
                  progress: (start, end, current, ratio) => {
                    if (this.lblJackpot != undefined) {
                      this.lblJackpot.string = StringUtils.formatNumber(Math.floor(current));
                    }

                    return start + (end - start) * ratio;
                  }
                }).start();
                this.jackpot_amount = this._jackpotInfos[i].jackpot;
              }

              break;
            }
          }
        }

        isCanDeactiveRoot() {
          var _this$tog_auto2;

          return !((_this$tog_auto2 = this.tog_auto) === null || _this$tog_auto2 === void 0 ? void 0 : _this$tog_auto2.isChecked);
        }

        show() {
          MiniGameNodeController.getInstance().bringGameViewToTop(this, true);
          super.show();
          return true;
        }

        hide() {
          super.hide();
        }

        init() {
          super.init();
          super.hide();
        }

      }, _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lblJackpot", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "miniPokerBetHistoryView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "miniPokerBetRankView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_chips", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btn_rank", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btn_bet_history", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btn_help", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btn_spin", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btn_spin2", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "result_node", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "bg_result_node", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "lbl_result_text", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "lbl_result_amount", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "miniPoker_SlotMachineCmp", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "anim_spin", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "tog_auto", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "tog_fast", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "miniPokerNoHuView", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "loaded_card_normal", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "loaded_card_blur", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import CCMiniGameRoot from "../../CCMiniGameRoot";
      // import CCSpriteFrameLoader from "../../Downloader/CCSpriteFrameLoader";
      // import Downloader from "../../Downloader/Downloader";
      // import MiniGameNodeController, { DOWNLOAD_STATE } from "../../MiniGameNodeController";
      // import MiniPokerMessageHandler, { MiniPoker_Message } from "../../Network/MiniGame/MiniPokerMessageHandler";
      // import { MessageRequest, MiniGameNetworkHandler } from "../../Network/MiniGameNetworkHandler";
      // import { GlobalVariables } from "../../Utils/GlobalVariables";
      // import MauBinh_CardLib, { GameCard, MAU_BINH_RESULT } from "../../Utils/MauBinh_CardLib";
      // import { StringUtils } from "../../Utils/StringUtils";
      // import BaseMiniGameView from "../BaseMiniGameView";
      // import BlinkCmp from "../TaiXiu/BlinkCmp";
      // import NotiView from "../TaiXiu/NotiView";
      // import MiniPokerBetHistoryView from "./MiniPokerBetHistoryView";
      // import MiniPokerBetRankView from "./MiniPokerBetRankView";
      // import MiniPokerNoHuView from "./MiniPokerNoHuView";
      // import MiniPoker_SlotMachineCmp from "./SlotMachineCmp/MiniPoker_SlotMachineCmp";
      // 
      // class MiniPokerJackpotInfo {
      //     aid;
      //     jackpot;
      //     bet;
      // };
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class MiniPokerGameView extends BaseMiniGameView {
      //     @property(cc.String)
      //     private config_path: string = "";
      // 
      //     @property([cc.String])
      //     private download_assets: string[] = [];
      // 
      //     @property([cc.String])
      //     private download_zip: string[] = [];
      // 
      //     @property(cc.Label)
      //     private lblJackpot: cc.Label = null;
      // 
      //     @property(MiniPokerBetHistoryView)
      //     private miniPokerBetHistoryView: MiniPokerBetHistoryView = null;
      // 
      //     @property(MiniPokerBetRankView)
      //     private miniPokerBetRankView: MiniPokerBetRankView = null;
      // 
      //     @property([cc.Button])
      //     private btn_chips: cc.Button[] = [];
      // 
      //     private chip_values: number[] = [100, 1000, 10000];
      // 
      //     @property(cc.Button)
      //     private btn_rank: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_bet_history: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_help: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_close: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_spin: cc.Button = null;
      // 
      //     @property(cc.Node)
      //     private result_node: cc.Node = null;
      // 
      //     @property(cc.Label)
      //     private lbl_result_text: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private lbl_result_amount: cc.Label = null;
      // 
      //     @property(MiniPoker_SlotMachineCmp)
      //     private miniPoker_SlotMachineCmp: MiniPoker_SlotMachineCmp = null;
      // 
      //     @property(cc.Animation)
      //     private anim_spin: cc.Animation = null;
      // 
      //     @property(cc.Animation)
      //     private arrow_anim: cc.Animation = null;
      // 
      //     @property(cc.Node)
      //     private main: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private black_screen: cc.Node = null;
      // 
      //     @property(cc.Toggle)
      //     private tog_auto: cc.Toggle = null;
      // 
      //     @property(cc.Toggle)
      //     private tog_fast: cc.Toggle = null;
      // 
      //     @property(BlinkCmp)
      //     private light: BlinkCmp = null;
      // 
      //     @property(MiniPokerNoHuView)
      //     private miniPokerNoHuView: MiniPokerNoHuView = null;
      // 
      //     @property(cc.Sprite)
      //     private spr_download_circle: cc.Sprite = null;
      // 
      //     /*@property(cc.AudioClip)
      //     private sfx_win_big : cc.AudioClip = null;
      // 
      //     @property(cc.AudioClip)
      //     private sfx_win_small : cc.AudioClip = null;*/
      // 
      //     private lastest_main_node_position: cc.Vec2;
      // 
      //     private static instance: MiniPokerGameView = null;
      // 
      //     private _aid = 1;
      // 
      //     public loaded_card_normal: cc.SpriteFrame[] = [];
      // 
      //     public loaded_card_blur: cc.SpriteFrame[] = [];
      // 
      //     public bet: number = 0;
      // 
      //     private _jackpotInfos: MiniPokerJackpotInfo[] = [];
      // 
      //     private jackpot_amount = 0;
      // 
      //     private jackpot_tween: cc.Tween = null;
      // 
      //     private cards: GameCard[] = [];
      // 
      //     private moneyExchange: number = 0;
      // 
      //     private wonJackpot: number = 0;
      // 
      //     private download_state = DOWNLOAD_STATE.UNDOWNLOADED;
      // 
      //     getDownloadState() {
      //         return this.download_state;
      //     }
      // 
      //     isSpinning() {
      //         return this.miniPoker_SlotMachineCmp.isSpinning();
      //     }
      // 
      //     forceMachineStop(stopAuto = true) {
      //         if(this.download_state != DOWNLOAD_STATE.DOWNLOADED) return;
      //         if(this.tog_auto.isChecked && stopAuto) {
      //             this.tog_auto.isChecked = false;
      //         }
      //         this.stop([]);
      //     }
      // 
      //     turnOffAutoSpin() {
      //         this.tog_auto.isChecked = false;
      //     }
      // 
      //     onLoad() {
      //         super.onLoad();
      //         MiniPokerGameView.instance = this;
      // 
      //         let self = this;
      // 
      //         for (let i = 1; i <= 13; i++) {
      //             this.download_assets.push("cc-mini-game/minipoker/sprites/card/Card_" + i + "C.png");
      //             this.download_assets.push("cc-mini-game/minipoker/sprites/card/Card_" + i + "T.png");
      //             this.download_assets.push("cc-mini-game/minipoker/sprites/card/Card_" + i + "R.png");
      //             this.download_assets.push("cc-mini-game/minipoker/sprites/card/Card_" + i + "B.png");
      // 
      //             this.download_assets.push("cc-mini-game/minipoker/sprites/cardblur/Card_" + i + "C_blur.png");
      //             this.download_assets.push("cc-mini-game/minipoker/sprites/cardblur/Card_" + i + "T_blur.png");
      //             this.download_assets.push("cc-mini-game/minipoker/sprites/cardblur/Card_" + i + "R_blur.png");
      //             this.download_assets.push("cc-mini-game/minipoker/sprites/cardblur/Card_" + i + "B_blur.png");
      //         }
      // 
      //         this.download_assets.forEach(x => {
      //             cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY, x), (sf: cc.SpriteFrame) => {
      //                 if (sf.name.indexOf("card/Card") >= 0) {
      //                     self.loaded_card_normal.push(sf);
      //                 } else if (sf.name.indexOf("cardblur/Card") >= 0) {
      //                     self.loaded_card_blur.push(sf);
      //                 }
      //             }, this.node);
      //         });
      //         this.node.getComponentsInChildren(CCSpriteFrameLoader).forEach(x => {
      //             x.init();
      //             this.download_assets.push(x.asset_path);
      //         });
      // 
      //         MiniPokerMessageHandler.onResultError = (mes) => {
      //             NotiView.getInstance().showMessage(mes, this.node);
      //             this.forceMachineStop();
      //         };
      // 
      //         this.bet = this.chip_values[0];
      // 
      //         this.miniPokerBetRankView.followNode(this.btn_rank.node);
      //         this.miniPokerBetHistoryView.followNode(this.btn_bet_history.node);
      // 
      //         this.init();
      // 
      //         this.btn_spin.node.on("click", () => {
      //             if (!this.miniPoker_SlotMachineCmp.isStopped()) {
      //                 NotiView.getInstance().showMessage("Đang Quay");
      //                 return;
      //             }
      //             this.spin();
      //         });
      // 
      //         this.btn_rank.node.on("click", () => {
      //             this.showRank();
      //         });
      // 
      //         this.btn_bet_history.node.on("click", () => {
      //             this.showBetHistory();
      //         });
      // 
      //         this.btn_help.node.on("click", () => {
      //             cc.sys.openURL(GlobalVariables.HELP_URL);
      //         });
      // 
      //         this.btn_close.node.on("click", () => {
      //             this.hide();
      //         });
      // 
      //         this.btn_chips.forEach((chip, index) => {
      //             let ind = index;
      //             chip.node.on("click", () => {
      //                 if (!this.miniPoker_SlotMachineCmp.isStopped()) {
      //                     NotiView.getInstance().showMessage("Đang Quay");
      //                     return;
      //                 }
      // 
      //                 this.highlightBet(ind);
      //                 this.bet = this.chip_values[ind];
      //                 this.subscribeJackpot();
      //             });
      //         });
      // 
      //         this.tog_auto.node.on("toggle", () => {
      //             if (this.tog_auto.isChecked && this.miniPoker_SlotMachineCmp.isStopped()) {
      //                 this.spin();
      //             }
      //         });
      // 
      //         this.miniPoker_SlotMachineCmp.onMachineStopped = () => {
      //             let showNoHuEffect = cc.sequence(cc.callFunc(() => {
      //                 this.miniPokerNoHuView.show(this.cards, this.moneyExchange);
      //             }), this.tog_auto.isChecked ?
      //                 cc.sequence(cc.delayTime(14.5), cc.callFunc(() => {
      //                     this.miniPokerNoHuView.hide();
      //                 })) : cc.sequence(cc.delayTime(6.5), cc.callFunc(() => {
      //                     this.miniPokerNoHuView.activeClick();
      //                 })));
      //             let showResult = this.wonJackpot ? showNoHuEffect : cc.callFunc(() => {
      //                 this.showResult();
      //             });
      // 
      //             let finishAct = cc.sequence(showResult, cc.delayTime(0.5), cc.callFunc(() => {
      //                 if (this.tog_auto.isChecked && this.miniPoker_SlotMachineCmp.isStopped()) {
      //                     this.spin();
      //                 }
      //             }));
      //             this.node.runAction(finishAct);
      // 
      //             MiniGameNodeController.getInstance() && MiniGameNodeController.getInstance().sendRefreshMoney();
      //         };
      // 
      //         Downloader.checkVersion(this.config_path, (state) => {
      //             this.download_state = state;
      //         });
      //     }
      // 
      //     private highlightBet(ind) {
      //         this.btn_chips.forEach((chip, index) => {
      //             let checkmark = chip.node.children[1];
      //             checkmark.active = index == ind;
      //         });
      //     }
      // 
      //     private showResult() {
      //         let result = MauBinh_CardLib.getPokerMiniResult(this.cards);
      //         if (result == MAU_BINH_RESULT.MAU_THAU || this.moneyExchange <= 0) return;
      // 
      //         let showLight = result == MAU_BINH_RESULT.THUNG_PHA_SANH
      //             || result == MAU_BINH_RESULT.TU_QUY ||
      //             result == MAU_BINH_RESULT.THUNG ||
      //             result == MAU_BINH_RESULT.SANH ||
      //             result == MAU_BINH_RESULT.CU_LU;
      // 
      //         if (showLight) {
      //             let timeToRepeat = this.tog_fast.isChecked && this.tog_auto.isChecked ? 3 : 6;
      //             this.light.repeatTime = timeToRepeat;
      // 
      //             this.light.run();
      // 
      //             // cc.audioEngine.play(this.sfx_win_big,false,1.0);
      //         } else {
      //             // cc.audioEngine.play(this.sfx_win_small,false,1.0);
      //         }
      // 
      //         this.light.node.active = showLight;
      //         this.result_node.stopAllActions();
      // 
      //         let pos = this.result_node.position;
      //         pos.y = -120;
      //         this.result_node.position = pos;
      // 
      //         let result_str = MauBinh_CardLib.getPokerMiniResultString(this.cards);
      //         this.lbl_result_text.string = result_str;
      //         this.lbl_result_text.node.color = cc.Color.ORANGE;
      // 
      //         this.lbl_result_amount.string = "+" + StringUtils.formatNumber(this.moneyExchange);
      // 
      //         this.result_node.opacity = 255;
      // 
      //         let seq = cc.sequence(
      //             cc.moveBy(0.3, cc.v2(0, 20)),
      //             cc.delayTime(this.tog_fast.isChecked ? 0.5 : 1),
      //             cc.fadeOut(this.tog_fast.isChecked ? 0.5 : 1),
      //         )
      // 
      //         this.result_node.runAction(seq);
      //     }
      // 
      //     public static getInstance() {
      //         return MiniPokerGameView.instance;
      //     }
      // 
      //     public showRank() {
      //         this.miniPokerBetRankView.fetchRank();
      //     }
      // 
      //     public spin() {
      //         this.anim_spin.play();
      //         this.arrow_anim.node.active = false;
      //         this.miniPoker_SlotMachineCmp.spin();
      // 
      //         this.requestSpin();
      //     }
      // 
      //     public requestSpin() {
      //         let dict = {};
      //         dict["cmd"] = MiniPoker_Message.SPIN_RESULT;
      //         dict["b"] = this.bet;
      //         dict["aid"] = this._aid;
      // 
      //         let lineArr = [0];
      //         dict["ls"] = lineArr;
      // 
      //         dict["gid"] = GlobalVariables.MINIPOKER;
      // 
      //         let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
      //         MiniGameNetworkHandler.send(mes);
      //     }
      // 
      //     public stop(cardsArr: GameCard[]) {
      //         if(!this.miniPoker_SlotMachineCmp.isSpinning()) return;
      //         this.node.runAction(cc.sequence(cc.delayTime(MiniPoker_SlotMachineCmp.TIME_TO_SHOW_RESULT), cc.callFunc(() => {
      //             if (this.tog_fast.isChecked) this.miniPoker_SlotMachineCmp.stopImmediately(cardsArr);
      //             else this.miniPoker_SlotMachineCmp.stop(cardsArr);
      //         })));
      //     }
      // 
      //     public showBetHistory() {
      //         this.miniPokerBetHistoryView.fetchHistory();
      //     }
      // 
      //     public receiveData(aid, moneyExchange, cardsArr: number[], wonJackpot) {
      //         this._aid = aid;
      // 
      //         this.cards = cardsArr.map(x => {
      //             let a = new GameCard();
      //             a.decodeCard(x, GlobalVariables.BINH);
      //             return a;
      //         });
      //         this.moneyExchange = moneyExchange;
      //         this.wonJackpot = wonJackpot;
      //         this.stop(this.cards);
      //     }
      // 
      //     public subscribeJackpot(subscribe = true) {
      //         let cmd = MiniPoker_Message.SUBSCRIBE_JACKPOT;
      //         if (!subscribe) {
      //             cmd = MiniPoker_Message.UNSUBSCRIBE_JACKPOT;
      //         }
      // 
      //         let dict = {};
      //         dict["cmd"] = cmd;
      //         dict["gid"] = GlobalVariables.MINIPOKER;
      // 
      //         let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
      //         MiniGameNetworkHandler.send(mes);
      //     }
      // 
      //     public updateJackpot(jars: [], isSubcribe = false) {
      //         if (isSubcribe) this._jackpotInfos = [];
      // 
      //         for (let i = 0; i < jars.length; i++) {
      //             let jackpotDict = jars[i];
      // 
      //             let jackpot = jackpotDict["J"];
      //             let aid = jackpotDict["aid"];
      //             let bet = jackpotDict["b"];
      // 
      //             if (isSubcribe) {
      //                 let newJackpot = new MiniPokerJackpotInfo();
      //                 newJackpot.jackpot = jackpot;
      //                 newJackpot.aid = aid;
      //                 newJackpot.bet = bet;
      // 
      //                 this._jackpotInfos.push(newJackpot);
      //             }
      //             else {
      //                 for (let j = 0; j < this._jackpotInfos.length; j++) {
      //                     if (this._jackpotInfos[j].aid == aid && this._jackpotInfos[j].bet == bet) {
      //                         this._jackpotInfos[j].jackpot = jackpot;
      //                         break;
      //                     }
      //                 }
      //             }
      //         }
      // 
      //         if (isSubcribe) {
      //             let tempSortedJackpot: MiniPokerJackpotInfo[] = [];
      //             for (let i = 0; i < this._jackpotInfos.length; i++) {
      //                 if (this._jackpotInfos[i].aid == 1) {
      //                     let newJackpot = new MiniPokerJackpotInfo();
      //                     newJackpot.jackpot = this._jackpotInfos[i].jackpot;
      //                     newJackpot.aid = this._jackpotInfos[i].aid;
      //                     newJackpot.bet = this._jackpotInfos[i].bet;
      // 
      //                     tempSortedJackpot.push(newJackpot);
      //                 }
      //             }
      //             for (let i = 0; i < this._jackpotInfos.length; i++) {
      //                 if (this._jackpotInfos[i].aid == 2) {
      //                     let newJackpot = new MiniPokerJackpotInfo();
      //                     newJackpot.jackpot = this._jackpotInfos[i].jackpot;
      //                     newJackpot.aid = this._jackpotInfos[i].aid;
      //                     newJackpot.bet = this._jackpotInfos[i].bet;
      // 
      //                     tempSortedJackpot.push(newJackpot);
      //                 }
      //             }
      // 
      //             let tempAid = 1;
      //             for (let i = 0; i < tempSortedJackpot.length - 1; i++) {
      // 
      //                 for (let j = i + 1; j < tempSortedJackpot.length; j++) {
      //                     if (tempSortedJackpot[i].aid == tempAid && tempSortedJackpot[j].aid == tempAid) {
      // 
      //                         if (tempSortedJackpot[j].bet < tempSortedJackpot[i].bet) {
      //                             let tempBet = tempSortedJackpot[i].bet;
      //                             let tempJackpot = tempSortedJackpot[i].jackpot;
      // 
      //                             tempSortedJackpot[i].bet = tempSortedJackpot[j].bet;
      //                             tempSortedJackpot[i].jackpot = tempSortedJackpot[j].jackpot;
      // 
      //                             tempSortedJackpot[j].bet = tempBet;
      //                             tempSortedJackpot[j].jackpot = tempJackpot;
      // 
      //                             j = i + 1;
      //                         }
      //                     }
      //                 }
      // 
      //                 if (i == tempSortedJackpot.length - 2 && tempAid == 1) {
      //                     i = 0;
      //                     tempAid = 2;
      //                 }
      //             }
      // 
      //             this._jackpotInfos = tempSortedJackpot;
      //         }
      // 
      //         this.updateJackpotLabels(!isSubcribe);
      //     }
      // 
      //     public updateJackpotLabels(withFx) {
      //         for (let i = 0; i < this._jackpotInfos.length; i++) {
      //             if (this._jackpotInfos[i].aid == this._aid && this._jackpotInfos[i].bet == this.bet) {
      //                 this.jackpot_tween && this.jackpot_tween.stop();
      // 
      //                 if (!withFx) {
      //                     this.jackpot_amount = this._jackpotInfos[i].jackpot;
      //                     this.lblJackpot.string = StringUtils.formatNumber(this.jackpot_amount);
      //                 } else {
      //                     let obj = { a: this.jackpot_amount };
      // 
      //                     this.jackpot_tween = cc.tween(obj)
      //                         .to(0.5, { a: this._jackpotInfos[i].jackpot }, {
      //                             progress: (start, end, current, ratio) => {
      //                                 if (this.lblJackpot != undefined) {
      //                                     this.lblJackpot.string = StringUtils.formatNumber(Math.floor(current));
      //                                 }
      //                                 return start + (end - start) * ratio;
      //                             }
      //                         })
      //                         .start();
      // 
      //                     this.jackpot_amount = this._jackpotInfos[i].jackpot;
      //                 }
      //                 break;
      //             }
      //         }
      //     }
      // 
      //     private downloadZip(paths: string[], onCompleted, onProgress, onError, maxProgress = 1) {
      //         if (this.download_state == DOWNLOAD_STATE.CACHED) {
      //             onProgress(maxProgress);
      //             onCompleted();
      //         } else {
      //             Downloader.downloadAndExtractZipData(paths, onError, onProgress, onCompleted, maxProgress);
      //         }
      //     }
      // 
      //     public show() {
      //         if(MiniGameNodeController.getInstance().isDownloading()) {
      //             NotiView.getInstance().showMessage('Xin vui lòng đợi game tải xong.');
      //             return;
      //         }
      //         
      //         let onOpen = () => {
      //             this.main.stopAllActions();
      // 
      //             MiniGameNodeController.getInstance().bringGameViewToTop(this, true);
      // 
      //             this.black_screen.active = true;
      //             this.node.opacity = 255;
      // 
      //             this.main.opacity = 0;
      //             this.main.scale = 0;
      // 
      //             this.main.position = MiniGameNodeController.getInstance().getClosedNodePosition();
      // 
      //             let scaleUp = cc.spawn(
      //                 cc.moveTo(0.3, this.lastest_main_node_position).easing(cc.easeOut(2.5)),
      //                 cc.fadeIn(0.3).easing(cc.easeIn(2.5)),
      //                 cc.scaleTo(0.3, 1.0).easing(cc.easeOut(2.5)));
      //             this.main.runAction(cc.sequence(scaleUp, cc.callFunc(() => {
      //             })));
      //         };
      // 
      //         if (this.download_state == DOWNLOAD_STATE.DOWNLOADING) {
      //             return false;
      //         }
      //         else if (this.download_state == DOWNLOAD_STATE.UNDOWNLOADED || this.download_state == DOWNLOAD_STATE.CACHED) {
      //             this.spr_download_circle.node.active = true;
      //             this.spr_download_circle.fillRange = 0;
      //             this.downloadZip(this.download_zip,
      //                 () => { // // completed download zip
      //                     Downloader.downloadSpriteFrameAssets(this.download_assets,true, (err) => {
      //                             cc.log("Failed to download mini poker:", err);
      //                         }, (pro) => {
      //                             this.spr_download_circle.fillRange += pro;
      //                         }, () => {
      //                             this.download_state = DOWNLOAD_STATE.DOWNLOADED;
      //                             this.spr_download_circle.node.active = false;
      //                             this.miniPoker_SlotMachineCmp.init();
      //                             Downloader.updateRemoteVersion(this.config_path);
      //                             if (MiniGameNodeController.getInstance().isOpened()) {
      //                                 MiniGameNodeController.getInstance().close();
      //                                 onOpen();
      //                             }
      //                         }, () => {
      //                             this.download_state = DOWNLOAD_STATE.UNDOWNLOADED;
      //                             this.spr_download_circle.node.active = false;
      // 
      //                         }, 0.5);
      //                 }, (pro) => { // progress download zip
      //                     this.spr_download_circle.fillRange += pro;
      //                 }, () => { // error download zip
      //                     this.download_state = DOWNLOAD_STATE.UNDOWNLOADED;
      //                     this.spr_download_circle.node.active = false;
      //                 }, 0.5);
      //             this.download_state = DOWNLOAD_STATE.DOWNLOADING;
      //             return false;
      //         }
      // 
      //         onOpen();
      // 
      //         return true;
      //     }
      // 
      //     public hide(isImmediately = false) {
      //         if (this.node.opacity == 0) return;
      // 
      //         let time_offset = isImmediately ? 0 : 1;
      //         this.main.stopAllActions();
      // 
      //         this.lastest_main_node_position = this.main.position;
      // 
      //         this.black_screen.active = false;
      //         this.main.opacity = 255;
      //         this.main.scale = 1;
      // 
      //         let scaleDown = cc.spawn(
      //             cc.moveTo(0.4 * time_offset, MiniGameNodeController.getInstance().getClosedNodePosition()).easing(cc.easeIn(1.5)),
      //             cc.fadeOut(0.3 * time_offset).easing(cc.easeOut(1.5)),
      //             cc.scaleTo(0.4 * time_offset, 0).easing(cc.easeIn(1.5))
      //         );
      //         this.main.runAction(cc.sequence(scaleDown, cc.callFunc(() => {
      //             this.node.opacity = 0;
      //             MiniGameNodeController.getInstance().bringGameViewToTop(this, false);
      //         })));
      //     }
      // 
      //     public init() {
      //         this.main.stopAllActions();
      // 
      //         this.lastest_main_node_position = this.main.position;
      // 
      //         this.black_screen.active = false;
      // 
      //         let scaleDown = cc.spawn(
      //             cc.moveTo(0.4, MiniGameNodeController.getInstance().getClosedNodePosition()).easing(cc.easeIn(1.5)),
      //             cc.fadeOut(0.3).easing(cc.easeOut(1.5)),
      //             cc.scaleTo(0.4, 0).easing(cc.easeIn(1.5))
      //         );
      //         this.main.runAction(cc.sequence(scaleDown, cc.callFunc(() => {
      //             this.node.opacity = 0;
      //             MiniGameNodeController.getInstance().bringGameViewToTop(this, false);
      //         })));
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KimCuongBetRankView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './StringUtils.ts', './GlobalVariables.ts', './GameHTTPNetwork.ts', './KimCuongBetRankItemView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Button, Label, _decorator, UIOpacity, CommonPopup, StringUtils, GlobalVariables, GameHTTPNetwork, KimCuongBetRankItemView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      KimCuongBetRankItemView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "2a6a2HTbPZGKaGGgClGz8mx", "KimCuongBetRankView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class MiniPokerBetRankDict {
        constructor() {
          _defineProperty(this, "rank", void 0);

          _defineProperty(this, "money", void 0);

          _defineProperty(this, "displayName", void 0);

          _defineProperty(this, "bet", void 0);

          _defineProperty(this, "type", void 0);

          _defineProperty(this, "betTime", void 0);
        }

      }

      let KimCuongBetRankView = exports('default', (_dec = ccclass('KimCuongBetRankView'), _dec2 = property([KimCuongBetRankItemView]), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(Label), _dec(_class = (_class2 = (_temp = class KimCuongBetRankView extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "item_views", _descriptor, this);

          _initializerDefineProperty(this, "btn_prev", _descriptor2, this);

          _initializerDefineProperty(this, "btn_next", _descriptor3, this);

          _initializerDefineProperty(this, "lbl_current_page", _descriptor4, this);

          _defineProperty(this, "_rank", []);

          _defineProperty(this, "current_page", 1);

          _defineProperty(this, "maxPage", 0);
        }

        onLoad() {
          super.onLoad();
          this.btn_prev.node.on("click", () => {
            if (this.current_page <= 1) return;
            this.current_page -= 1;
            this.lbl_current_page.string = this.current_page.toString();
            this.fetchRank(false);
          });
          this.btn_next.node.on("click", () => {
            if (this.current_page >= this.maxPage) return;
            this.current_page += 1;
            this.lbl_current_page.string = this.current_page.toString();
            this.fetchRank(false);
          });
        }

        fetchRank(hasFx = true) {
          if (hasFx) {
            this.current_page = 1;
            this.lbl_current_page.string = this.current_page.toString();
          }

          let skip = (this.current_page - 1) * 6;
          let url = GlobalVariables.BET_RANK_TOP_URL.replace("%gameid%", GlobalVariables.TRUNGPS.toString()).replace("%skip%", skip.toString());
          GameHTTPNetwork.sendGET(url, response => {
            this._rank = [];
            let doc = JSON.parse(response);
            let data = doc["data"];
            let jarr = data["items"];
            let count = data["count"];
            this.maxPage = Math.ceil(count / 6);

            for (let i = 0; i < jarr.length; i++) {
              let jsonMNPKItem = jarr[i];
              let newBetRank = new MiniPokerBetRankDict();
              newBetRank.bet = jsonMNPKItem["betting"];
              newBetRank.displayName = jsonMNPKItem["displayName"];
              newBetRank.money = jsonMNPKItem["money"];
              newBetRank.type = jsonMNPKItem["description"];
              let requestTime = jsonMNPKItem["createdTime"];
              let date = new Date(requestTime);
              newBetRank.betTime = StringUtils.formatTime(date);

              this._rank.push(newBetRank);
            }

            this.showRank(hasFx);
          });
        }

        showRank(hasFx = true) {
          this.item_views.forEach((item, index) => {
            let info = this._rank[index];

            if (info != null && info != undefined) {
              item.node.getComponent(UIOpacity).opacity = 255;
              item.show(info.betTime, info.displayName, info.bet, info.money, info.type);
            } else {
              item.node.getComponent(UIOpacity).opacity = 1;
            }
          });
          if (hasFx) this.show();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item_views", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_prev", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_next", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbl_current_page", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class)); //  * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
      //  */
      // // // Learn TypeScript:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // // Learn Attribute:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // // Learn life-cycle callbacks:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // // 
      // // import GameHTTPNetwork from "../../Network/GameHTTPNetwork";
      // // import { GlobalVariables } from "../../Utils/GlobalVariables";
      // // import { StringUtils } from "../../Utils/StringUtils";
      // // import TaiXiuPopupCmp from "../TaiXiu/TaiXiuPopupCmp";
      // // import KimCuongBetRankItemView from "./KimCuongBetRankItemView";
      // // 
      // // class MiniPokerBetRankDict {
      // //     public rank;
      // //     public money;
      // //     public displayName;
      // //     public bet;
      // //     public type;
      // //     public betTime;
      // // };
      // // 
      // // const { ccclass, property } = cc._decorator;
      // // 
      // // @ccclass
      // // export default class KimCuongBetRankView extends TaiXiuPopupCmp {
      // //     @property([KimCuongBetRankItemView])
      // //     private item_views: KimCuongBetRankItemView[] = [];
      // // 
      // //     @property(cc.Button)
      // //     private btn_close: cc.Button = null;
      // // 
      // //     @property(cc.Button)
      // //     private btn_prev: cc.Button = null;
      // // 
      // //     @property(cc.Button)
      // //     private btn_next: cc.Button = null;
      // // 
      // //     @property(cc.Label)
      // //     private lbl_current_page: cc.Label = null;
      // // 
      // //     private _rank: MiniPokerBetRankDict[] = [];
      // // 
      // //     private current_page = 1;
      // // 
      // //     private maxPage = 0;
      // // 
      // //     onLoad() {
      // //         super.onLoad();
      // // 
      // //         this.original_scale = this.node.scale;
      // //         this.btn_close.node.on("click", () => {
      // //             this.hide();
      // //         });
      // // 
      // //         this.btn_prev.node.on("click", () => {
      // //             if (this.current_page <= 1) return;
      // //             this.current_page -= 1;
      // //             this.lbl_current_page.string = this.current_page.toString();
      // //             this.fetchRank(false);
      // //         });
      // // 
      // //         this.btn_next.node.on("click", () => {
      // //             if (this.current_page >= this.maxPage) return;
      // //             this.current_page += 1;
      // //             this.lbl_current_page.string = this.current_page.toString();
      // //             this.fetchRank(false);
      // //         });
      // // 
      // //     }
      // // 
      // //     public fetchRank(jumpToFirstPage = true) {
      // //         if(jumpToFirstPage) {
      // //             this.current_page = 1;
      // //             this.lbl_current_page.string = this.current_page.toString();
      // //         }
      // // 
      // //         let skip = (this.current_page - 1) * 6;
      // //         let url = GlobalVariables.BET_RANK_TOP_URL.replace("%gameid%",GlobalVariables.TRUNGPS.toString()).replace("%skip%",skip.toString());
      // // 
      // //         GameHTTPNetwork.sendGET(url, (response) => {
      // //             this._rank = [];
      // // 
      // //             let doc = JSON.parse(response);
      // // 
      // //             let data = doc["data"];
      // //             let jarr = data["items"];
      // //             let count = data["count"];
      // //             this.maxPage = Math.ceil(count / 6);
      // // 
      // //             for (let i = 0; i < jarr.length; i++) {
      // //                 let jsonMNPKItem = jarr[i];
      // // 
      // //                 let newBetRank = new MiniPokerBetRankDict();
      // // 
      // //                 newBetRank.bet = jsonMNPKItem["betting"];
      // //                 newBetRank.displayName = jsonMNPKItem["displayName"];
      // //                 newBetRank.money = jsonMNPKItem["money"];
      // //                 newBetRank.type = jsonMNPKItem["description"];
      // // 
      // //                 let requestTime = jsonMNPKItem["createdTime"];
      // //                 let date = new Date(requestTime);
      // //                 newBetRank.betTime = StringUtils.formatTime(date);
      // // 
      // //                 this._rank.push(newBetRank);
      // //             }
      // // 
      // //             this.showRank();
      // //         });
      // //     }
      // // 
      // //     public showRank() {
      // //         this.item_views.forEach((item, index) => {
      // //             let info = this._rank[index];
      // //             if (info != null && info != undefined) {
      // //                 item.node.opacity = 255;
      // //                 item.show(info.betTime, info.displayName, info.bet, info.money, info.type);
      // //             } else {
      // //                 item.node.opacity = 0;
      // //             }
      // //         });
      // // 
      // //         this.show();
      // //     }
      // // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BatCmp.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './DragView.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, _decorator, Component, Vec3, UITransform, Node, DragView;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Node = module.Node;
    }, function (module) {
      DragView = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "2daf9IXt3xFa6fhmeS2qBDT", "BatCmp", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BatCmp = exports('default', (_dec = ccclass('BatCmp'), _dec(_class = (_temp = class BatCmp extends Component {
        constructor(...args) {
          super(...args);

          _defineProperty(this, "onOpenBat", null);

          _defineProperty(this, "originalPos", Vec3.ZERO);
        }

        init() {
          this.originalPos = new Vec3(this.node.position);
          let rect = this.node.getComponent(UITransform).getBoundingBox();
          this.node.on(Node.EventType.TOUCH_MOVE, e => {
            DragView.DISABLE = true;
            this.node.position = new Vec3(this.node.position.x + e.getDelta().x, this.node.position.y + e.getDelta().y, 0);

            if (this.node.position.x > rect.xMax * 1.5 || this.node.position.x < rect.xMin * 1.5 || this.node.position.y > rect.yMax * 1.5 || this.node.position.y < rect.yMin * 1.5) {
              this.onOpenBat && this.onOpenBat();
            }
          });
          this.node.on(Node.EventType.TOUCH_END, () => {
            DragView.DISABLE = false;
            this.node.setPosition(this.originalPos);
          });
          this.node.on(Node.EventType.TOUCH_CANCEL, () => {
            DragView.DISABLE = false;
            this.node.setPosition(this.originalPos);
          });
        }

        hide() {
          setTimeout(() => {
            DragView.DISABLE = false;
          }, 500);

          if (this.originalPos == undefined) {
            this.originalPos = new Vec3(this.node.position);
          }

          this.node.setPosition(this.originalPos);
          this.node.active = false;
          this.onOpenBat = null;
        }

      }, _temp)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import DragView from "../../Utils/DragView";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class BatCmp extends cc.Component {
      //     public onOpenBat = null;
      //     private originalPos : cc.Vec2;
      //     onLoad(){
      //         this.originalPos = this.node.position;
      //         let rect = this.node.getBoundingBox();
      // 
      //         this.node.on(cc.Node.EventType.TOUCH_MOVE,(e : cc.Event.EventTouch) => {
      //             DragView.DISABLE = true;
      //             this.node.position = new cc.Vec2(this.node.position.x + e.getDelta().x,this.node.position.y + e.getDelta().y);
      // 
      //             if(this.node.position.x > rect.xMax * 1.5 || this.node.position.x < rect.xMin * 1.5
      //                 || this.node.position.y > rect.yMax * 1.5 || this.node.position.y < rect.yMin * 1.5){
      //                     this.onOpenBat && this.onOpenBat();
      //                 }
      //         });
      //         this.node.on(cc.Node.EventType.TOUCH_END,() => {
      //             DragView.DISABLE = false;
      //             this.node.position = this.originalPos;
      //         });
      //         this.node.on(cc.Node.EventType.TOUCH_CANCEL,() => {
      //             DragView.DISABLE = false;
      //             this.node.position = this.originalPos;
      //         });
      //     }
      // 
      //     public hide(){
      //         DragView.DISABLE = false;
      //         this.node.position = this.originalPos;
      //         this.node.active = false;
      //         this.onOpenBat = null;
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyViewController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './StringUtils.ts', './MiniGameNetworkHandler.ts', './GamePlatformManager.ts', './GameNetworkHandler.ts', './NotiView.ts', './GlobalVariables.ts', './LoadingView.ts', './BaseFullScreenGameView.ts', './Downloader.ts', './BauCuaFullScreenGameView.ts', './GameHTTPNetwork.ts', './ProfilesPopup.ts', './MD5Algorithm.ts', './PopupController.ts', './SamFullScreenGameView.ts', './TienLenFullScreenGameView.ts', './XocDiaFullScreenGameView.ts', './FloatStringCmp.ts', './TransitionFadeScreen.ts', './GameListView.ts', './TableListView.ts', './MiniGameNodeController.ts', './CCMiniGameRoot.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Button, sp, UITransform, UIOpacity, Label, Sprite, SpriteFrame, _decorator, sys, systemEvent, game, Game, director, log, Tween, Vec3, tween, GameConfigManager, StringUtils, MessageResponse, MessageRequest, GamePlatformManager, GameNetworkHandler, NotiView, GlobalVariables, GLOBAL_MESSAGE, LoadingView, BaseFullScreenGameView, Downloader, BauCuaFullScreenGameView, GameHTTPNetwork, ProfilesPopup, MD5Algorithm, PopupController, SamFullScreenGameView, TienLenFullScreenGameView, XocDiaFullScreenGameView, FloatStringCmp, TransitionFadeScreen, GameListView, TableListView, MiniGameNodeController, CCMiniGameRoot, GameState, GamePlayManager, NETWORK_STATE;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Button = module.Button;
      sp = module.sp;
      UITransform = module.UITransform;
      UIOpacity = module.UIOpacity;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      sys = module.sys;
      systemEvent = module.systemEvent;
      game = module.game;
      Game = module.Game;
      director = module.director;
      log = module.log;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      MessageResponse = module.MessageResponse;
      MessageRequest = module.MessageRequest;
    }, function (module) {
      GamePlatformManager = module.GamePlatformManager;
    }, function (module) {
      GameNetworkHandler = module.GameNetworkHandler;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
      GLOBAL_MESSAGE = module.GLOBAL_MESSAGE;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      BaseFullScreenGameView = module.BaseFullScreenGameView;
    }, function (module) {
      Downloader = module.default;
    }, function (module) {
      BauCuaFullScreenGameView = module.BauCuaFullScreenGameView;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      ProfilesPopup = module.ProfilesPopup;
    }, function (module) {
      MD5Algorithm = module.MD5Algorithm;
    }, function (module) {
      PopupController = module.PopupController;
    }, function (module) {
      SamFullScreenGameView = module.SamFullScreenGameView;
    }, function (module) {
      TienLenFullScreenGameView = module.TienLenFullScreenGameView;
    }, function (module) {
      XocDiaFullScreenGameView = module.XocDiaFullScreenGameView;
    }, function (module) {
      FloatStringCmp = module.FloatStringCmp;
    }, function (module) {
      TransitionFadeScreen = module.TransitionFadeScreen;
    }, function (module) {
      GameListView = module.GameListView;
    }, function (module) {
      TableListView = module.TableListView;
    }, function (module) {
      MiniGameNodeController = module.default;
    }, function (module) {
      CCMiniGameRoot = module.CCMiniGameRoot;
    }, function (module) {
      GameState = module.GameState;
      GamePlayManager = module.GamePlayManager;
      NETWORK_STATE = module.NETWORK_STATE;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _class3, _temp;

      cclegacy._RF.push({}, "2fe45yrM+FOMJreDKza1LMJ", "LobbyViewController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LobbyViewController = exports('LobbyViewController', (_dec = ccclass('LobbyViewController'), _dec2 = property(Node), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(Button), _dec6 = property(Button), _dec7 = property(Button), _dec8 = property(Button), _dec9 = property(Button), _dec10 = property(sp.Skeleton), _dec11 = property(sp.Skeleton), _dec12 = property(UITransform), _dec13 = property(UIOpacity), _dec14 = property(Label), _dec15 = property(Label), _dec16 = property(Label), _dec17 = property(Sprite), _dec18 = property(SpriteFrame), _dec19 = property(FloatStringCmp), _dec20 = property(Label), _dec21 = property([SpriteFrame]), _dec22 = property(GameListView), _dec23 = property(TableListView), _dec(_class = (_class2 = (_temp = _class3 = class LobbyViewController extends BaseFullScreenGameView {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "footer", _descriptor, this);

          _initializerDefineProperty(this, "btn_login", _descriptor2, this);

          _initializerDefineProperty(this, "btn_register", _descriptor3, this);

          _initializerDefineProperty(this, "btn_forgotPassword", _descriptor4, this);

          _initializerDefineProperty(this, "btn_hotline", _descriptor5, this);

          _initializerDefineProperty(this, "btn_menu", _descriptor6, this);

          _initializerDefineProperty(this, "btn_news", _descriptor7, this);

          _initializerDefineProperty(this, "btn_profiles", _descriptor8, this);

          _initializerDefineProperty(this, "ava_border", _descriptor9, this);

          _initializerDefineProperty(this, "sp_logo_header", _descriptor10, this);

          _initializerDefineProperty(this, "sp_header_frame", _descriptor11, this);

          _initializerDefineProperty(this, "logo", _descriptor12, this);

          _initializerDefineProperty(this, "lbl_userID", _descriptor13, this);

          _initializerDefineProperty(this, "lbl_news", _descriptor14, this);

          _initializerDefineProperty(this, "lb_name", _descriptor15, this);

          _initializerDefineProperty(this, "spr_avatar", _descriptor16, this);

          _initializerDefineProperty(this, "spr_frame_AvatarDefault", _descriptor17, this);

          _initializerDefineProperty(this, "floating_message", _descriptor18, this);

          _initializerDefineProperty(this, "lb_tien", _descriptor19, this);

          _initializerDefineProperty(this, "sprFrame_avatars", _descriptor20, this);

          _initializerDefineProperty(this, "gameListView", _descriptor21, this);

          _initializerDefineProperty(this, "tableListView", _descriptor22, this);

          _defineProperty(this, "news", []);

          _defineProperty(this, "currentGameView", null);

          _defineProperty(this, "time", 0);
        }

        static getInstance() {
          return LobbyViewController.instance;
        }

        getAvatar() {
          return this.spr_avatar.spriteFrame;
        }

        getTableListView() {
          return this.tableListView;
        }

        getCurrentViewGameID() {
          var _this$currentGameView;

          if (this.currentGameView == this) {
            return this.gameID;
          }

          return (_this$currentGameView = this.currentGameView) === null || _this$currentGameView === void 0 ? void 0 : _this$currentGameView.getGameID();
        }

        isEnded() {
          var _this$currentGameView2;

          let gameID = (_this$currentGameView2 = this.currentGameView) === null || _this$currentGameView2 === void 0 ? void 0 : _this$currentGameView2.getGameID();

          switch (gameID) {
            case GlobalVariables.BAU_CUA_FULL:
              {
                return BauCuaFullScreenGameView.IS_END;
              }

            case GlobalVariables.XOCDIA:
              {
                return XocDiaFullScreenGameView.IS_END;
              }

            case GlobalVariables.TIENLEN:
              {
                var _TienLenFullScreenGam;

                return ((_TienLenFullScreenGam = TienLenFullScreenGameView.getInstance()) === null || _TienLenFullScreenGam === void 0 ? void 0 : _TienLenFullScreenGam.getState()) != GameState.PLAYING;
              }

            case GlobalVariables.SAM:
              {
                var _SamFullScreenGameVie;

                return ((_SamFullScreenGameVie = SamFullScreenGameView.getInstance()) === null || _SamFullScreenGameVie === void 0 ? void 0 : _SamFullScreenGameVie.getState()) != GameState.PLAYING;
              }
          }

          return false;
        }

        handleRefreshMoney(money) {
          this.lb_tien.string = StringUtils.formatNumber(money);
        }

        onLoad() {
          var _this$btn_login, _this$btn_register, _this$btn_forgotPassw, _this$btn_hotline, _this$btn_profiles, _this$btn_menu;

          super.onLoad();
          LobbyViewController.instance = this;
          this.currentGameView = this;
          (_this$btn_login = this.btn_login) === null || _this$btn_login === void 0 ? void 0 : _this$btn_login.node.on("click", () => {
            var _PopupController$getI;

            (_PopupController$getI = PopupController.getInstance()) === null || _PopupController$getI === void 0 ? void 0 : _PopupController$getI.showLoginPopup();
          });
          (_this$btn_register = this.btn_register) === null || _this$btn_register === void 0 ? void 0 : _this$btn_register.node.on("click", () => {
            var _PopupController$getI2;

            (_PopupController$getI2 = PopupController.getInstance()) === null || _PopupController$getI2 === void 0 ? void 0 : _PopupController$getI2.showRegisterPopup();
          });
          (_this$btn_forgotPassw = this.btn_forgotPassword) === null || _this$btn_forgotPassw === void 0 ? void 0 : _this$btn_forgotPassw.node.on("click", () => {
            sys.openURL(GameConfigManager.liveChatURL);
          });
          (_this$btn_hotline = this.btn_hotline) === null || _this$btn_hotline === void 0 ? void 0 : _this$btn_hotline.node.on("click", () => {
            var _PopupController$getI3;

            (_PopupController$getI3 = PopupController.getInstance()) === null || _PopupController$getI3 === void 0 ? void 0 : _PopupController$getI3.showCommonPopup("Vui lòng gọi đến số: " + GameConfigManager.hotlineNumber, () => {
              var _PopupController$getI4;

              (_PopupController$getI4 = PopupController.getInstance()) === null || _PopupController$getI4 === void 0 ? void 0 : _PopupController$getI4.hideCommonPopup();
            });
          });
          (_this$btn_profiles = this.btn_profiles) === null || _this$btn_profiles === void 0 ? void 0 : _this$btn_profiles.node.on("click", () => {
            var _PopupController$getI5;

            (_PopupController$getI5 = PopupController.getInstance()) === null || _PopupController$getI5 === void 0 ? void 0 : _PopupController$getI5.showProfilePopup(GameConfigManager.displayName, GameConfigManager.customerID, GameConfigManager.gold, this.getAvatar());
          });
          (_this$btn_menu = this.btn_menu) === null || _this$btn_menu === void 0 ? void 0 : _this$btn_menu.node.on("click", () => {
            var _PopupController$getI6;

            (_PopupController$getI6 = PopupController.getInstance()) === null || _PopupController$getI6 === void 0 ? void 0 : _PopupController$getI6.showGameSettingPopup();
          });
          systemEvent.on(ProfilesPopup.CHANGE_AVATAR, spriteFrame => {
            this.changeAvatar(spriteFrame);
          });
          game.on(Game.EVENT_SHOW, () => {
            let timeInterupted = (director.getCurrentTime() - this.time) / 1000;
            this.time = director.getCurrentTime();
            this.currentGameView.handleBackGameFromInterupt(timeInterupted);
          });
          game.on(Game.EVENT_HIDE, () => {
            this.time = director.getCurrentTime();
          });
        }

        handleBackGameFromInterupt(timeInterupted) {
          console.log("handleBackGameFromInterupt::lobby");
          if (GamePlayManager.STATE == NETWORK_STATE.UNLOGGED_IN) return;
          GamePlayManager.refreshInBackground();
        }

        autoLoginAcc() {
          var _username;

          let isLastLoginSucceed = localStorage.getItem(GameConfigManager.IS_LAST_LOGIN_SUCCEED);

          if (isLastLoginSucceed == null || isLastLoginSucceed == undefined || isLastLoginSucceed == "false") {
            return false;
          }

          let username = localStorage.getItem(GameConfigManager.LOGGED_USER_NAME);
          let password = localStorage.getItem(GameConfigManager.LOGGED_PASSWORD);
          username = (_username = username) === null || _username === void 0 ? void 0 : _username.toLowerCase();
          let url = GameConfigManager.IDdomainURL;
          let platformID = GamePlatformManager.getPlatformID();
          let deviceId = GamePlatformManager.getDeviceID();
          let advertiserID = "";
          let hash = username;
          hash += password;
          hash += platformID.toString();
          hash += deviceId;
          hash += GameConfigManager.hashSecretKey;
          hash = new MD5Algorithm().encrypt(hash);
          let brand = GameConfigManager.brand;
          let jsonData = {};
          jsonData["command"] = "loginHash";
          jsonData["username"] = username;
          jsonData["password"] = password;
          jsonData["platformId"] = platformID;
          jsonData["advId"] = advertiserID;
          jsonData["deviceId"] = deviceId;
          jsonData["hash"] = hash;
          jsonData["brand"] = brand;
          LoadingView.getInstance().show(); //convert to json string

          let strPostData = JSON.stringify(jsonData);
          GameHTTPNetwork.sendPOST(url, strPostData, resp => {
            this.loginCompleted(username, password, resp);
          }, false, true);
          return true;
        }

        loginCompleted(username, password, response) {
          log(response);
          let doc = JSON.parse(response);
          let status = doc["status"];

          if (status == 0) {
            let data = doc["data"];
            let signature = data["signature"];
            let accessToken = data["accessToken"];
            let refreshToken = data["refreshToken"];
            let info = data["info"];
            let infoJsonString = JSON.stringify(info);
            GameConfigManager.signature = signature;
            GameConfigManager.loginInfo = infoJsonString;
            GameConfigManager.username = username;
            GameConfigManager.password = password;
            GameConfigManager.serverAccessToken = accessToken;
            GameConfigManager.serverRefreshToken = refreshToken;
            localStorage.setItem(GameConfigManager.LOGGED_USER_NAME, username);
            localStorage.setItem(GameConfigManager.LOGGED_PASSWORD, password);
            GamePlayManager.login();
          } else {
            var _NotiView$getInstance;

            let mes = "";
            let data = doc["data"];
            mes = data["message"];
            (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage(mes);
            LoadingView.getInstance().hide();
          }
        }

        runAnimation() {
          var _this$ava_border, _this$sp_logo_header;

          let track = (_this$ava_border = this.ava_border) === null || _this$ava_border === void 0 ? void 0 : _this$ava_border.setAnimation(0, "appear", false);

          if (track != null) {
            var _this$ava_border2;

            (_this$ava_border2 = this.ava_border) === null || _this$ava_border2 === void 0 ? void 0 : _this$ava_border2.setCompleteListener(trackEntry => {
              let name = trackEntry.animation ? trackEntry.animation.name : '';

              if (name == "appear") {
                var _this$ava_border3;

                (_this$ava_border3 = this.ava_border) === null || _this$ava_border3 === void 0 ? void 0 : _this$ava_border3.setAnimation(0, "loop", true);
              }
            });
          }

          let track_logo = (_this$sp_logo_header = this.sp_logo_header) === null || _this$sp_logo_header === void 0 ? void 0 : _this$sp_logo_header.setAnimation(0, "loading", false);

          if (track_logo != null) {
            var _this$sp_logo_header2;

            (_this$sp_logo_header2 = this.sp_logo_header) === null || _this$sp_logo_header2 === void 0 ? void 0 : _this$sp_logo_header2.setCompleteListener(trackEntry => {
              let name = trackEntry.animation ? trackEntry.animation.name : '';

              if (name == "loading") {
                var _this$sp_logo_header3;

                (_this$sp_logo_header3 = this.sp_logo_header) === null || _this$sp_logo_header3 === void 0 ? void 0 : _this$sp_logo_header3.setAnimation(0, "tint", false);
              } else if (name == "tint") {
                var _this$sp_logo_header4;

                (_this$sp_logo_header4 = this.sp_logo_header) === null || _this$sp_logo_header4 === void 0 ? void 0 : _this$sp_logo_header4.setAnimation(0, "idle", true);
              }
            });
          }
        }

        getLogo() {
          return this.sp_logo_header;
        }

        onLoggedIn() {
          var _PopupController$getI7, _PopupController$getI8;

          (_PopupController$getI7 = PopupController.getInstance()) === null || _PopupController$getI7 === void 0 ? void 0 : _PopupController$getI7.hideLoginPopup();
          (_PopupController$getI8 = PopupController.getInstance()) === null || _PopupController$getI8 === void 0 ? void 0 : _PopupController$getI8.hideRegisterPopup();
          this.runAnimation();
          this.btn_login.node.active = false;
          this.btn_register.node.active = false;
          this.btn_forgotPassword.node.active = false;
          this.btn_hotline.node.active = false;
          this.lb_name.node.parent.active = true;
          this.lb_tien.node.parent.active = true;
          this.btn_news.node.active = true;
          this.btn_menu.node.active = true;
          this.showHeaderFrame();
          this.hideLogo();
          this.showUserID();
          this.showNewAndMenu();
          localStorage.setItem(GameConfigManager.IS_LAST_LOGIN_SUCCEED, "true");
        }

        onLoggedOut() {
          var _PopupController$getI9, _CCMiniGameRoot$getIn;

          (_PopupController$getI9 = PopupController.getInstance()) === null || _PopupController$getI9 === void 0 ? void 0 : _PopupController$getI9.closeAll();
          (_CCMiniGameRoot$getIn = CCMiniGameRoot.getInstance()) === null || _CCMiniGameRoot$getIn === void 0 ? void 0 : _CCMiniGameRoot$getIn.closeMiniGameNode();
          this.runAnimation();
          this.btn_login.node.active = true;
          this.btn_register.node.active = true;
          this.btn_forgotPassword.node.active = true;
          this.btn_hotline.node.active = true;
          this.lb_name.node.parent.active = false;
          this.lb_tien.node.parent.active = false;
          this.hideHeaderFrame();
          this.showLogo();
          this.hideUserID();
          this.hideNewAndMenu();
          this.loadUserInfoDefault();
          localStorage.setItem(GameConfigManager.IS_LAST_LOGIN_SUCCEED, "false");
          this.handleLeaveRoomResponse();
        }

        showNewAndMenu() {
          var _this$btn_news, _this$btn_news2, _this$btn_news3, _this$btn_news4, _this$btn_news5, _this$btn_menu2, _this$btn_menu3, _this$btn_menu4, _this$btn_menu5, _this$btn_menu6;

          Tween.stopAllByTarget((_this$btn_news = this.btn_news) === null || _this$btn_news === void 0 ? void 0 : _this$btn_news.node);
          (_this$btn_news2 = this.btn_news) === null || _this$btn_news2 === void 0 ? void 0 : _this$btn_news2.node.setPosition(new Vec3((_this$btn_news3 = this.btn_news) === null || _this$btn_news3 === void 0 ? void 0 : _this$btn_news3.node.position.x, -65, 0));
          let newSeq = tween((_this$btn_news4 = this.btn_news) === null || _this$btn_news4 === void 0 ? void 0 : _this$btn_news4.node).sequence(tween().delay(0.4), tween().to(0.3, {
            position: new Vec3((_this$btn_news5 = this.btn_news) === null || _this$btn_news5 === void 0 ? void 0 : _this$btn_news5.node.position.x, 60, 0)
          }, {
            easing: 'expoOut'
          }));
          Tween.stopAllByTarget((_this$btn_menu2 = this.btn_menu) === null || _this$btn_menu2 === void 0 ? void 0 : _this$btn_menu2.node);
          (_this$btn_menu3 = this.btn_menu) === null || _this$btn_menu3 === void 0 ? void 0 : _this$btn_menu3.node.setPosition(new Vec3((_this$btn_menu4 = this.btn_menu) === null || _this$btn_menu4 === void 0 ? void 0 : _this$btn_menu4.node.position.x, -65, 0));
          let menuSeq = tween((_this$btn_menu5 = this.btn_menu) === null || _this$btn_menu5 === void 0 ? void 0 : _this$btn_menu5.node).sequence(tween().delay(0.4), tween().to(0.3, {
            position: new Vec3((_this$btn_menu6 = this.btn_menu) === null || _this$btn_menu6 === void 0 ? void 0 : _this$btn_menu6.node.position.x, 60, 0)
          }, {
            easing: 'expoOut'
          }));
          newSeq.start();
          menuSeq.start();
        }

        hideNewAndMenu() {
          var _this$btn_news6, _this$btn_news7, _this$btn_news8, _this$btn_news9, _this$btn_news10, _this$btn_menu7, _this$btn_menu8, _this$btn_menu9, _this$btn_menu10, _this$btn_menu11;

          Tween.stopAllByTarget((_this$btn_news6 = this.btn_news) === null || _this$btn_news6 === void 0 ? void 0 : _this$btn_news6.node);
          (_this$btn_news7 = this.btn_news) === null || _this$btn_news7 === void 0 ? void 0 : _this$btn_news7.node.setPosition(new Vec3((_this$btn_news8 = this.btn_news) === null || _this$btn_news8 === void 0 ? void 0 : _this$btn_news8.node.position.x, 60, 0));
          let newSeq = tween((_this$btn_news9 = this.btn_news) === null || _this$btn_news9 === void 0 ? void 0 : _this$btn_news9.node).sequence(tween().delay(0.2), tween().to(0.3, {
            position: new Vec3((_this$btn_news10 = this.btn_news) === null || _this$btn_news10 === void 0 ? void 0 : _this$btn_news10.node.position.x, -65, 0)
          }, {
            easing: 'expoIn'
          }));
          Tween.stopAllByTarget((_this$btn_menu7 = this.btn_menu) === null || _this$btn_menu7 === void 0 ? void 0 : _this$btn_menu7.node);
          (_this$btn_menu8 = this.btn_menu) === null || _this$btn_menu8 === void 0 ? void 0 : _this$btn_menu8.node.setPosition(new Vec3((_this$btn_menu9 = this.btn_menu) === null || _this$btn_menu9 === void 0 ? void 0 : _this$btn_menu9.node.position.x, 60, 0));
          let menuSeq = tween((_this$btn_menu10 = this.btn_menu) === null || _this$btn_menu10 === void 0 ? void 0 : _this$btn_menu10.node).sequence(tween().delay(0.2), tween().to(0.3, {
            position: new Vec3((_this$btn_menu11 = this.btn_menu) === null || _this$btn_menu11 === void 0 ? void 0 : _this$btn_menu11.node.position.x, -65, 0)
          }, {
            easing: 'expoIn'
          }));
          newSeq.start();
          menuSeq.start();
        }

        showHeaderFrame() {
          var _this$sp_header_frame, _this$sp_header_frame2, _this$sp_header_frame3;

          Tween.stopAllByTarget((_this$sp_header_frame = this.sp_header_frame) === null || _this$sp_header_frame === void 0 ? void 0 : _this$sp_header_frame.node);
          this.sp_header_frame.node.active = true;
          let framePos = new Vec3(this.sp_header_frame.node.position);
          framePos.y = 0;
          let frameOutPos = new Vec3(framePos);
          frameOutPos.y = GameConfigManager.getSizeHeight() * 0.5 + this.sp_header_frame.contentSize.height;
          (_this$sp_header_frame2 = this.sp_header_frame) === null || _this$sp_header_frame2 === void 0 ? void 0 : _this$sp_header_frame2.node.setPosition(frameOutPos);
          let move1 = tween((_this$sp_header_frame3 = this.sp_header_frame) === null || _this$sp_header_frame3 === void 0 ? void 0 : _this$sp_header_frame3.node).sequence(tween().delay(0.4), tween().to(0.3, {
            position: framePos
          }, {
            easing: 'expoOut'
          }), tween().call(() => {
            this.showNews();
          }));
          move1.start();
        }

        hideHeaderFrame() {
          var _this$sp_header_frame4, _this$sp_header_frame5, _this$sp_header_frame6;

          Tween.stopAllByTarget((_this$sp_header_frame4 = this.sp_header_frame) === null || _this$sp_header_frame4 === void 0 ? void 0 : _this$sp_header_frame4.node);
          this.sp_header_frame.node.active = true;
          let framePos = new Vec3(this.sp_header_frame.node.position);
          framePos.y = 0;
          let frameOutPos = new Vec3(framePos);
          frameOutPos.y = GameConfigManager.getSizeHeight() * 0.5 + this.sp_header_frame.contentSize.height;
          (_this$sp_header_frame5 = this.sp_header_frame) === null || _this$sp_header_frame5 === void 0 ? void 0 : _this$sp_header_frame5.node.setPosition(framePos);
          let move1 = tween((_this$sp_header_frame6 = this.sp_header_frame) === null || _this$sp_header_frame6 === void 0 ? void 0 : _this$sp_header_frame6.node).sequence(tween().delay(0.2), tween().to(0.3, {
            position: frameOutPos
          }, {
            easing: 'expoIn'
          }));
          move1.start();
        }

        showLogo() {
          Tween.stopAllByTarget(this.logo);
          this.logo.opacity = 1;
          let fadeLogo = tween(this.logo).sequence(tween().delay(1.0), tween().to(0.3, {
            opacity: 255
          }));
          fadeLogo.start();
        }

        hideLogo() {
          Tween.stopAllByTarget(this.logo);
          this.logo.opacity = 255;
          let fadeLogo = tween(this.logo).sequence(tween().delay(0.1), tween().to(0.3, {
            opacity: 1
          }));
          fadeLogo.start();
        }

        showUserID() {
          var _this$lbl_userID, _this$lbl_userID2;

          Tween.stopAllByTarget((_this$lbl_userID = this.lbl_userID) === null || _this$lbl_userID === void 0 ? void 0 : _this$lbl_userID.node.parent);
          this.lbl_userID.node.parent.active = true;
          this.lbl_userID.node.parent.setPosition(new Vec3(-267, 60, 0));
          let seq = tween((_this$lbl_userID2 = this.lbl_userID) === null || _this$lbl_userID2 === void 0 ? void 0 : _this$lbl_userID2.node.parent).sequence(tween().delay(0.5), tween().to(0.5, {
            position: new Vec3(-267, 90, 0)
          }));
          seq.start();
        }

        hideUserID() {
          var _this$lbl_userID3, _this$lbl_userID4;

          Tween.stopAllByTarget((_this$lbl_userID3 = this.lbl_userID) === null || _this$lbl_userID3 === void 0 ? void 0 : _this$lbl_userID3.node.parent);
          this.lbl_userID.node.parent.active = true;
          this.lbl_userID.node.parent.setPosition(new Vec3(-267, 90, 0));
          let seq = tween((_this$lbl_userID4 = this.lbl_userID) === null || _this$lbl_userID4 === void 0 ? void 0 : _this$lbl_userID4.node.parent).sequence(tween().delay(0.5), tween().to(0.5, {
            position: new Vec3(-267, 60, 0)
          }), tween().call(() => {
            this.lbl_userID.node.parent.active = false;
          }));
          seq.start();
        }

        showNews() {
          var _this$lbl_news, _this$lbl_news2, _this$lbl_news3;

          Tween.stopAllByTarget((_this$lbl_news = this.lbl_news) === null || _this$lbl_news === void 0 ? void 0 : _this$lbl_news.node.getComponent(UIOpacity));
          let index = 0;
          let showNewsSeq = tween((_this$lbl_news2 = this.lbl_news) === null || _this$lbl_news2 === void 0 ? void 0 : _this$lbl_news2.node.getComponent(UIOpacity)).repeatForever(tween((_this$lbl_news3 = this.lbl_news) === null || _this$lbl_news3 === void 0 ? void 0 : _this$lbl_news3.node.getComponent(UIOpacity)).sequence(tween().call(() => {
            this.lbl_news.string = this.news[index];
            index++;

            if (index >= this.news.length) {
              index = 0;
            }
          }), tween().to(0.3, {
            opacity: 255
          }), tween().delay(5), tween().to(0.3, {
            opacity: 1
          })));
          showNewsSeq.start();
        }

        showFooter(withFx = true) {
          if (withFx) {
            var _this$footer, _this$footer2, _this$footer2$getComp;

            Tween.stopAllByTarget(this.footer);
            let startPos = new Vec3((_this$footer = this.footer) === null || _this$footer === void 0 ? void 0 : _this$footer.position);
            let footerHeight = (_this$footer2 = this.footer) === null || _this$footer2 === void 0 ? void 0 : (_this$footer2$getComp = _this$footer2.getComponent(UITransform)) === null || _this$footer2$getComp === void 0 ? void 0 : _this$footer2$getComp.contentSize.height;
            startPos.y = -GameConfigManager.getSizeHeight() / 2 - footerHeight;
            this.footer.setPosition(startPos);
            tween(this.footer).by(0.5, {
              position: new Vec3(0, footerHeight, 0)
            }, {
              easing: 'expoOut'
            }).start();
          } else {
            this.footer.active = true;
          }
        }

        hideFooter(withFx = true) {
          if (withFx) {
            var _this$footer3, _this$footer4, _this$footer4$getComp;

            Tween.stopAllByTarget(this.footer);
            let startPos = new Vec3((_this$footer3 = this.footer) === null || _this$footer3 === void 0 ? void 0 : _this$footer3.position);
            let footerHeight = (_this$footer4 = this.footer) === null || _this$footer4 === void 0 ? void 0 : (_this$footer4$getComp = _this$footer4.getComponent(UITransform)) === null || _this$footer4$getComp === void 0 ? void 0 : _this$footer4$getComp.contentSize.height;
            startPos.y = -GameConfigManager.getSizeHeight() / 2;
            this.footer.setPosition(startPos);
            tween(this.footer).by(0.5, {
              position: new Vec3(0, -1 * footerHeight, 0)
            }, {
              easing: 'expoOut'
            }).start();
          } else {
            this.footer.active = false;
          }
        }

        handleLeaveRoomResponse(message = null) {
          if (this.currentGameView != this) {
            this.currentGameView.handleLeaveRoomResponse(message);
          } else {
            this.showGameList();
          }
        }

        forceLeaveRoom() {
          if (this.currentGameView != this) {
            this.currentGameView.forceLeaveRoom();
            return;
          }
        }

        reconnect() {
          this.forceLeaveRoom();
          this.onLoggedOut();
        }

        showInvite(fromUser, roomDict) {
          var _PopupController$getI10;

          if (GameConfigManager.IS_REJECT_ALL) {
            return;
          }

          let userName = fromUser["u"];
          let userMoney = fromUser["m"];
          let aid = roomDict["aid"];
          let gameID = roomDict["gid"];
          let roomID = roomDict["rid"];
          let serverID = roomDict["sid"];
          let bet = roomDict["b"];
          let MMBI = 0;

          if (roomDict["MMBI"] != null && roomDict["MMBI"] != undefined) {
            MMBI = roomDict["MMBI"];
          }

          let roomPassword = "";

          if (roomDict["pwd"] != null && roomDict["pwd"] != undefined) {
            roomPassword = roomDict["pwd"];
          }

          (_PopupController$getI10 = PopupController.getInstance()) === null || _PopupController$getI10 === void 0 ? void 0 : _PopupController$getI10.showInvitePopup(userName, userMoney, gameID, bet, roomID, roomPassword);
        }

        showTables(tableArr) {
          var _this$sp_logo_header5, _this$gameListView, _this$tableListView;

          LoadingView.getInstance().hide();
          (_this$sp_logo_header5 = this.sp_logo_header) === null || _this$sp_logo_header5 === void 0 ? void 0 : _this$sp_logo_header5.setAnimation(0, "tint", false);
          this.hideFooter();
          (_this$gameListView = this.gameListView) === null || _this$gameListView === void 0 ? void 0 : _this$gameListView.hide();
          (_this$tableListView = this.tableListView) === null || _this$tableListView === void 0 ? void 0 : _this$tableListView.show(tableArr);
        }

        showGameList() {
          var _this$tableListView2, _this$gameListView2;

          this.showFooter();
          (_this$tableListView2 = this.tableListView) === null || _this$tableListView2 === void 0 ? void 0 : _this$tableListView2.hide();
          (_this$gameListView2 = this.gameListView) === null || _this$gameListView2 === void 0 ? void 0 : _this$gameListView2.show();
        }

        handleJoinRoomResponse(message) {
          console.log("handleJoinRoomResponse:", JSON.stringify(message));
          let joinResult = message[1];

          if (joinResult) {
            if (GamePlayManager.roomID != message[3]) {
              console.log("chuyen phong!");
            }

            GamePlayManager.roomID = message[3];
            this.showFullScreenGame();
          } else {
            this.switchGameScreen(GlobalVariables.LOBBY);
            let mesDialog = "";
            mesDialog = message[4];
            NotiView.getInstance().showMessage(mesDialog);
          }

          LoadingView.getInstance().hide();
        }

        getMessageAndNews(message) {
          let messageType = message[0];
          let dict = message[1];
          let cmd = dict["cmd"];

          switch (messageType) {
            case MessageResponse.Extension_Response:
              {
                if (cmd == GLOBAL_MESSAGE.MESSAGES_AND_NEWS) {
                  // int unreadMessages = (int)dict -> getUInt64("ur");
                  // GamePlayManager:: getInstance() -> unreadMessages = unreadMessages;
                  this.news = [];
                  let broadcastMessages = dict["bcm"];

                  for (let i = 0; i < broadcastMessages.length; i++) {
                    let message = broadcastMessages[i];
                    this.news.push(message);
                  } // int newNews = (int)dict -> getUInt64("na");
                  // if (newNews > 0) {
                  //     GamePlayManager:: getInstance() -> newNews = true;
                  // }
                  // gameListView -> checkUnreadMessages();


                  return;
                }

                break;
              }
          }
        }

        handleLobbyMessage(message) {
          this.getMessageAndNews(message);

          if (this.currentGameView != this) {
            this.currentGameView.handleMessage(message);
            return;
          }

          let messageType = message[0];
          let dict = message[1];

          switch (messageType) {
            case MessageResponse.Extension_Response:
              {
                let cmd = dict["cmd"];

                if (cmd == GLOBAL_MESSAGE.GET_TABLES) {
                  if (dict["mgs"] != null && dict["mgs"] != undefined) {
                    let message = dict["mgs"];
                    NotiView.getInstance().showMessage(message);
                    this.showGameList();
                    return;
                  }

                  let tableArr = dict["rs"];
                  this.showTables(tableArr);
                  return;
                } else if (cmd == GLOBAL_MESSAGE.JOIN_TABLE_INVITATION) {
                  let fromUserDict = dict["fu"];
                  let roomDict = dict["ri"];
                  this.showInvite(fromUserDict, roomDict);
                  return;
                } else if (cmd == GLOBAL_MESSAGE.REFRESH_MONEY) {
                  let as = dict["As"];
                  let vip = as["vip"];
                  let gold = as["gold"];
                  let chip = as["chip"];
                  let goldSafe = as["safe"];
                  GameConfigManager.gold = gold;
                  console.log("refresh money:" + GameConfigManager.gold);
                  systemEvent.emit(LobbyViewController.REFRESH_MONEY, GameConfigManager.gold);
                } else if (cmd == GLOBAL_MESSAGE.GET_JACKPOTS) {
                  let jars = dict["Js"];
                  jars.forEach(jar => {
                    let gid = jar["gid"];
                    let ba = jar["ba"];
                    systemEvent.emit(LobbyViewController.UPDATE_JACKPOT_EVENT_KEY.replace("%gameID", gid), [ba]);
                  });
                  return;
                } else if (cmd == GLOBAL_MESSAGE.GET_MAX_LOAN) {
                  // long maxLoan = dict -> getUInt64("mL");
                  // string loanMgs = dict -> getString("mgs");
                  // GamePlayManager:: getInstance() -> maxLoan = maxLoan;
                  // GamePlayManager:: getInstance() -> loanMgs = loanMgs;
                  return;
                } else if (cmd == GLOBAL_MESSAGE.LOAN_MESSAGE) {
                  // string loanMgs = dict -> getString("mgs");
                  // PopupDialogUtil:: showMessage(loanMgs);
                  // LoadingProgressUtil:: getInstance() -> close();
                  // gameListView -> sendRefreshMoney();
                  return;
                } else if (cmd == GLOBAL_MESSAGE.CREATE_TABLE_RESPONSE) {
                  // int maxBet = (int)dict -> getUInt64("mB");
                  // MsgPackArray * bets = dict -> getArray("b");
                  // vector < int > vectorBets;
                  // for (int i = 0; i < bets -> size(); i++) {
                  //     vectorBets.push_back(bets -> getUInt64(i));
                  // }
                  // gameListView -> createTableResponse(vectorBets);
                  return;
                } else if (cmd == GLOBAL_MESSAGE.QUICK_PLAY || cmd == GLOBAL_MESSAGE.CREATE_TABLE || cmd == GLOBAL_MESSAGE.QUICK_PLAY_WITH_BET) {
                  if (dict["ri"] != null && dict["ri"] != undefined) {
                    let tableDict = dict["ri"];
                    let roomID = tableDict["rid"];
                    let bet = tableDict["b"];
                    let serverID = tableDict["sid"];
                    let maxUser = tableDict["Mu"];
                    let gameID = tableDict["gid"];
                    let roomPassword = "";

                    if (tableDict["pwd"] != null && tableDict["pwd"] != undefined) {
                      roomPassword = tableDict["pwd"];
                    } //     if (GameConfigManager:: getInstance() -> betGameVersion == 2) {
                    //         if (gameID == LIENG || gameID == XITO || gameID == POKER) {
                    //             int MMBI = (int)tableDict -> getUInt64("MMBI");
                    //             int mMBI = (int)tableDict -> getUInt64("mMBI");
                    //             GameConfigManager:: getInstance() -> moneyBuyIn = MMBI;
                    //             GameConfigManager:: getInstance() -> roomPassword = roomPassword;
                    //             if (MMBI > GamePlayManager:: getInstance() -> gold) {
                    //                 GameConfigManager:: getInstance() -> moneyBuyIn = GamePlayManager:: getInstance() -> gold;
                    //             }
                    //             MsgPackDict * dict = new MsgPackDict();
                    //             dict -> setUInt64("cmd", Global_Message:: BOOK_ROOM);
                    //             dict -> setUInt64("rid", roomID);
                    //             ZonePlugin_Message * mes = new ZonePlugin_Message("channelPlugin", dict);
                    //             GamePlayManager:: getInstance() -> sendMessage(mes);
                    //             LoadingProgressUtil:: getInstance() -> show();
                    //             return;
                    //         }
                    //     }


                    this.switchGameScreen(gameID);
                    GamePlayManager.joinRoom(roomID, serverID, roomPassword);
                  } else {
                    var _LoadingView$getInsta;

                    (_LoadingView$getInsta = LoadingView.getInstance()) === null || _LoadingView$getInsta === void 0 ? void 0 : _LoadingView$getInsta.hide();

                    if (dict["mgs"] != undefined && dict["mgs"] != null) {
                      let mesDialog = dict["mgs"];
                      NotiView.getInstance().showMessage(mesDialog);
                    } else {
                      NotiView.getInstance().showMessage("Không tìm thấy phòng thích hợp!");
                    }
                  }

                  return;
                } else if (cmd == GLOBAL_MESSAGE.ERROR_MESSAGE) {
                  var _LoadingView$getInsta2;

                  (_LoadingView$getInsta2 = LoadingView.getInstance()) === null || _LoadingView$getInsta2 === void 0 ? void 0 : _LoadingView$getInsta2.hide();
                  let mesDialog;

                  if (dict["mgs"] != null && dict["mgs"] != undefined) {
                    mesDialog = dict["mgs"];
                  }

                  if (mesDialog.length > 0) {
                    NotiView.getInstance().showMessage(mesDialog);
                    return;
                  }

                  return;
                } else if (cmd == GLOBAL_MESSAGE.VERIFY_PHONE_NUMBER) {
                  // cap nhat sdt
                  // string mesDialog = dict -> getString("mgs");
                  // string phoneNumber = dict -> getString("ph");
                  // GameConfigManager:: getInstance() -> phoneNumber = phoneNumber;
                  // GameConfigManager:: getInstance() -> isCDTN = false;
                  // UserDefault:: getInstance() -> setBoolForKey("isCDTN", false);
                  // gameListView -> kichHoatTkState -> setVisible(false);
                  // gameListView -> reloadViewNT();
                  // MiniGameView * miniGameView = gameListView -> _miniGameView;
                  // if (miniGameView -> _taiXiuGame -> _enableEvent) {
                  //     miniGameView -> _subscribedTaiXiu = false;
                  //     miniGameView -> subscribeTaiXiu();// sub lai de nhan event
                  //     PopupDialogUtil * newPopup = PopupDialogUtil:: create(PopupDialogUtil:: MESSAGE);
                  //     newPopup -> setMesage(mesDialog);
                  //     newPopup -> confirmBtn -> addClickEventListener([=](Ref * pSender){
                  //         newPopup-> close();
                  //     miniGameView -> _taiXiuGame -> setVisible(true);
                  // });
                  // newPopup -> open();
                  // }
                  // else {
                  //     PopupDialogUtil:: showMessage(mesDialog);
                  // }
                  return;
                } else if (cmd == GLOBAL_MESSAGE.PROMOTION_MESSAGE) {
                  // tin khuyen mai
                  // string mesDialog = dict -> getString("mgs");
                  // if (GamePlayManager:: getInstance() -> displayName.size() == 0) {
                  //     gameListView -> _pendingPopupMessage = mesDialog;
                  // }
                  // else {
                  //     gameListView -> showMessageDialogDelay(mesDialog);
                  // }
                  return;
                } // else if (cmd == GLOBAL_MESSAGE.BROADCAST_MESSAGE && GameConfigManager:: getInstance() -> batHet) { // tivi
                //         string mes = dict -> getString("mgs");
                //     }
                else if (cmd == GLOBAL_MESSAGE.SHOW_WEBVIEW) {
                    // string url = dict -> getString("url");
                    // string title = dict -> getString("title");
                    // if (url.length() > 0) {
                    //     GameUIManager:: getInstance() -> showWebView(url, title);
                    // }
                    return;
                  } else if (cmd == GLOBAL_MESSAGE.MESSAGE_INGAME) {
                    // popup trong game
                    // string mesDialog = dict -> getString("message");
                    // int type = dict -> getInt64("t");
                    // gameListView -> showMessageDialog(mesDialog, type);
                    return;
                  } else if (cmd == GLOBAL_MESSAGE.BOOK_ROOM) {
                    // book room
                    // long timeForBooking = dict -> getUInt64("tfb");
                    // long roomID = dict -> getUInt64("rid");
                    // int bet = (int)dict -> getUInt64("b");
                    // int MMBI = (int)dict -> getUInt64("MMBI");
                    // int mMBI = (int)dict -> getUInt64("mMBI");
                    // long serverID = dict -> getUInt64("sid");
                    // bool hasPassword = false;
                    // if (dict -> isExistKey("hpwd")) {
                    //     hasPassword = dict -> getBool("hpwd");
                    // }
                    // string roomPassword = "";
                    // gameListView -> bookRoom(timeForBooking, roomID, serverID, mMBI, MMBI, bet, hasPassword);
                    return;
                  } else if (cmd == GLOBAL_MESSAGE.USER_INFO) {
                    let userDict = dict["As"]; // int64_t chip = userDict -> getUInt64("chip");

                    let gold = userDict["gold"]; // int vip = (int)userDict -> getUInt64("vip");

                    let customerID = dict["id"];
                    let displayName = dict["dn"];
                    let userID = dict["uid"]; // string phoneNumber = dict -> getString("ph");

                    let avatarURL = dict["a"]; // string activateMessage = dict -> getString("am");
                    // GamePlayManager:: getInstance() -> chip = chip;

                    GameConfigManager.gold = gold; // GamePlayManager:: getInstance() -> vip = vip;

                    GameConfigManager.customerID = customerID;
                    GameConfigManager.uid = userID;
                    console.log("my uid:", GameConfigManager.uid);
                    GameConfigManager.displayName = displayName;
                    GameConfigManager.avaURL = avatarURL; // GameConfigManager:: getInstance() -> phoneNumber = phoneNumber;
                    // GameConfigManager:: getInstance() -> activatePhoneMessage = activateMessage;
                    // if (phoneNumber.size() > 0) {
                    //     GameConfigManager:: getInstance() -> isCDTN = false;
                    //     UserDefault:: getInstance() -> setBoolForKey("isCDTN", false);
                    //     #if(CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)
                    //                             string temp = "gts";
                    //                             temp += "media";
                    //                             UserDefault:: getInstance() -> setStringForKey("ktraDC", temp);
                    //     #endif
                    // }

                    if (dict["lr"] != null && dict["lr"] != undefined) {
                      let lr = dict["lr"];
                      let roomID = lr["rid"];
                      let gameID = lr["gid"];
                      let serverID = lr["sid"];
                      let roomPassword = "";

                      if (lr["pwd"] != null && lr["pwd"] != undefined) {
                        roomPassword = lr["pwd"];
                      }

                      this.switchGameScreen(gameID);
                      GamePlayManager.joinRoom(roomID, serverID, roomPassword);
                    }

                    this.loadUserInfo();
                  }

                break;
              }
          }
        }

        loadUserInfo() {
          this.lb_name.string = GameConfigManager.displayName;
          this.lb_tien.string = StringUtils.formatNumber(GameConfigManager.gold);
          this.lbl_userID.string = "ID: " + GameConfigManager.customerID;
          Downloader.loadRemoteSpriteFrame(GameConfigManager.avaURL, spriteFrame => {
            this.spr_avatar.spriteFrame = spriteFrame;
          });
        }

        changeAvatar(spriteFrame) {
          this.spr_avatar.spriteFrame = spriteFrame;
        }

        loadUserInfoDefault() {
          this.spr_avatar.spriteFrame = this.spr_frame_AvatarDefault;
        }

        showFloatingString(message, params) {
          if (message == "") return;

          try {
            var _this$floating_messag;

            let messages = [];
            let splited_message = message.split("%c");
            messages.push(splited_message[0]);
            messages.push(params[0]);
            splited_message = splited_message[1].split("%y");
            messages.push(splited_message[0]);
            messages.push(params[1]);
            (_this$floating_messag = this.floating_message) === null || _this$floating_messag === void 0 ? void 0 : _this$floating_messag.showMessage(messages);
          } catch (ex) {}
        }

        playGame(gameID) {
          if (GamePlayManager.STATE == NETWORK_STATE.UNLOGGED_IN) {
            var _PopupController$getI11;

            (_PopupController$getI11 = PopupController.getInstance()) === null || _PopupController$getI11 === void 0 ? void 0 : _PopupController$getI11.showLoginPopup();
            return;
          }

          switch (gameID) {
            case GlobalVariables.BAU_CUA_FULL:
            case GlobalVariables.XOCDIA:
              {
                LoadingView.getInstance().show();
                let dict = {};
                dict["cmd"] = GLOBAL_MESSAGE.QUICK_PLAY;
                dict["gid"] = gameID;
                dict["aid"] = 1;
                let mes = [MessageRequest.ZonePlugin_Type, "Simms", "channelPlugin", dict];
                GameNetworkHandler.send(mes);
                break;
              }

            case GlobalVariables.TIENLEN:
            case GlobalVariables.SAM:
              {
                var _this$tableListView3;

                (_this$tableListView3 = this.tableListView) === null || _this$tableListView3 === void 0 ? void 0 : _this$tableListView3.getTables(gameID);
                break;
              }
          }
        }

        getChipPooling() {
          return null;
        }

        showFullScreenGame() {
          TransitionFadeScreen.start(this, this.currentGameView, 0.4);
        }

        switchGameScreen(gameID) {
          this.currentGameView = this.getGameView(gameID);
        }

        getView() {
          if (this.currentGameView == BauCuaFullScreenGameView.getInstance()) {
            return BauCuaFullScreenGameView.getInstance();
          } else if (this.currentGameView == XocDiaFullScreenGameView.getInstance()) {
            return XocDiaFullScreenGameView.getInstance();
          }

          return LobbyViewController.getInstance();
        }

        getVisiblePlayerByID(uid) {
          if (this.currentGameView != this) {
            var _this$currentGameView3;

            return (_this$currentGameView3 = this.currentGameView) === null || _this$currentGameView3 === void 0 ? void 0 : _this$currentGameView3.getVisiblePlayerByID(uid);
          }

          return null;
        }

        getPlayerByUID(uid) {
          if (this.currentGameView != this) {
            var _this$currentGameView4;

            return (_this$currentGameView4 = this.currentGameView) === null || _this$currentGameView4 === void 0 ? void 0 : _this$currentGameView4.getPlayerByUID(uid);
          }

          return null;
        }

        sendBet(eid, bet) {
          if (this.currentGameView != this) {
            return this.currentGameView.sendBet(eid, bet);
          }
        }

        backFromGame(gameID) {
          this.currentGameView = this;
          GamePlayManager.sendRefreshMoney();
          let view = this.getGameView(gameID);

          if (view != this) {
            TransitionFadeScreen.start(view, this, 0.4);
          }
        }

        getGameView(gameID) {
          switch (gameID) {
            case GlobalVariables.LOBBY:
              {
                return LobbyViewController.getInstance();
              }

            case GlobalVariables.BAU_CUA_FULL:
              {
                return BauCuaFullScreenGameView.getInstance();
              }

            case GlobalVariables.XOCDIA:
              {
                return XocDiaFullScreenGameView.getInstance();
              }

            case GlobalVariables.TIENLEN:
              {
                return TienLenFullScreenGameView.getInstance();
              }

            case GlobalVariables.SAM:
              {
                return SamFullScreenGameView.getInstance();
              }
          }

          return null;
        }

        show(fadeTime = 0.4) {
          MiniGameNodeController.getInstance().adjustPosition(GlobalVariables.LOBBY);
          let previousGameID = this.getPreviousGameView().getGameID();

          if ((previousGameID == GlobalVariables.TIENLEN || previousGameID == GlobalVariables.SAM) && GamePlayManager.STATE == NETWORK_STATE.LOGGED_IN) {
            var _LobbyViewController$;

            (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.playGame(previousGameID);
          } else {
            this.showGameList();
          }

          return super.show(fadeTime);
        }

      }, _defineProperty(_class3, "REFRESH_MONEY", "REFRESH_MONEY"), _defineProperty(_class3, "UPDATE_JACKPOT_EVENT_KEY", "update-jackpot-%gameID"), _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "footer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_login", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_register", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_forgotPassword", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btn_hotline", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btn_menu", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btn_news", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btn_profiles", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "ava_border", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "sp_logo_header", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "sp_header_frame", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "logo", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "lbl_userID", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "lbl_news", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "lb_name", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "spr_avatar", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "spr_frame_AvatarDefault", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "floating_message", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "lb_tien", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_avatars", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "gameListView", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "tableListView", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BlinkCmp.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, _decorator, Component, UIOpacity, tween, Tween;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      Tween = module.Tween;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "30794hggfJHs5jKXkE0PSVE", "BlinkCmp", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BlinkCmp = exports('default', (_dec = ccclass('BlinkCmp'), _dec2 = property(Number), _dec3 = property(Boolean), _dec4 = property(Number), _dec5 = property(Number), _dec6 = property(Number), _dec7 = property(Number), _dec(_class = (_class2 = (_temp = class BlinkCmp extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "time", _descriptor, this);

          _initializerDefineProperty(this, "useRepeatForever", _descriptor2, this);

          _initializerDefineProperty(this, "repeatTime", _descriptor3, this);

          _initializerDefineProperty(this, "from", _descriptor4, this);

          _initializerDefineProperty(this, "to", _descriptor5, this);

          _initializerDefineProperty(this, "delay", _descriptor6, this);

          _defineProperty(this, "opacityNode", null);
        }

        onLoad() {
          this.opacityNode = this.node.getComponent(UIOpacity);
        }

        start() {
          if (this.useRepeatForever) {
            let blink = tween().sequence(tween().to(this.time, {
              opacity: this.to
            }), tween().delay(this.delay), tween().to(this.time, {
              opacity: this.from
            }));
            tween(this.opacityNode).repeatForever(blink).start();
          } else {
            let blink = tween().sequence(tween().to(this.time, {
              opacity: this.to
            }), tween().to(this.time, {
              opacity: this.from
            }));
            let seq = tween().sequence(tween().repeat(this.repeatTime, blink), tween().call(() => {
              this.opacityNode.opacity = 1;
            }));
            seq.start();
          }
        }

        run(fromOpacity = 0) {
          if (this.opacityNode == null) {
            this.opacityNode = this.node.getComponent(UIOpacity);
          }

          Tween.stopAllByTarget(this.opacityNode);
          this.opacityNode.opacity = fromOpacity;
          this.start();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0.25;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "useRepeatForever", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return true;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "repeatTime", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 6;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "from", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "to", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 255;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "delay", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class BlinkCmp extends cc.Component {
      //     @property(Number)
      //     time : number = 0.25;
      // 
      //     @property(Boolean)
      //     useRepeatForever : boolean = true;
      // 
      //     @property(Number)
      //     repeatTime : number = 6;
      // 
      //     @property(Number)
      //     from : number = 0;
      // 
      //     @property(Number)
      //     to : number = 255;
      // 
      //     @property(Number)
      //     delay : number = 0;
      // 
      //     start () {
      //         if(this.useRepeatForever) {
      //             let blink = cc.sequence(cc.fadeTo(this.time,this.to),cc.delayTime(this.delay),cc.fadeTo(this.time,this.from));
      //             this.node.runAction(cc.repeatForever(blink));
      //         }else {
      //             let blink = cc.sequence(cc.fadeTo(this.time,this.to),cc.fadeTo(this.time,this.from));
      //             let seq = cc.sequence(cc.repeat(blink,this.repeatTime),cc.callFunc(() => {
      //                 // this.node.opacity = 0;
      //             }));
      //             this.node.runAction(seq);
      //         }
      //     }
      // 
      //     run(fromOpacity = 0) {
      //         this.node.stopAllActions();
      // 
      //         this.node.opacity = fromOpacity;
      //         this.start();
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LineCmp.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Graphics, _decorator, Component, UIOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Graphics = module.Graphics;
      _decorator = module._decorator;
      Component = module.Component;
      UIOpacity = module.UIOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "36635gn5CNJ4bktqPeWLUiS", "LineCmp", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LineCmp = exports('default', (_dec = ccclass('LineCmp'), _dec2 = property(Graphics), _dec(_class = (_class2 = (_temp = class LineCmp extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "drawing", _descriptor, this);

          _defineProperty(this, "root_parent", null);
        }

        draw(points, width, color, root_parent = null, isClear = true) {
          this.root_parent = root_parent;
          if (isClear) this.drawing.clear();
          this.drawing.lineWidth = width;
          this.drawing.strokeColor = color;
          points.forEach((point, index) => {
            if (index < points.length - 1) {
              this.drawing.moveTo(point.x, point.y);
              let next = points[index + 1];
              this.drawing.lineTo(next.x, next.y);
            }
          });
          this.drawing.stroke();
          this.drawing.fill();
        }

        clear() {
          this.drawing.clear();
        }

        update(dt) {
          if (this.root_parent) {
            this.node.getComponent(UIOpacity).opacity = this.root_parent.getComponent(UIOpacity).opacity < 255 ? 0 : this.root_parent.getComponent(UIOpacity).opacity;
          }
        }

      }, _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "drawing", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class LineCmp extends cc.Component {
      //     @property(cc.Graphics)
      //     private drawing: cc.Graphics = null;
      // 
      //     private root_parent : cc.Node = null;
      // 
      //     draw (points : cc.Vec2[],width,color,root_parent = null,isClear = true) {
      //         this.root_parent = root_parent;
      //         if(isClear) this.drawing.clear();
      //         this.drawing.lineWidth = width;
      //         this.drawing.strokeColor = color;
      // 
      //         points.forEach((point, index) => {
      //             if (index < points.length - 1) {
      //                 this.drawing.moveTo(point.x, point.y);
      //                 let next = points[index + 1];
      //                 this.drawing.lineTo(next.x, next.y);
      //             }
      //         });
      // 
      //         this.drawing.stroke();
      //         this.drawing.fill();
      //     }
      // 
      //     clear(){
      //         this.drawing.clear();
      //     }
      // 
      //     update(dt){
      //         if(this.root_parent) {
      //             this.node.opacity = this.root_parent.opacity < 255 ? 0 : this.root_parent.opacity;
      //         }
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './StringUtils.ts', './BubbleChat.ts', './Downloader.ts', './BauCuaFullScreenGameView.ts', './LobbyViewController.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Sprite, Node, sp, Label, Button, _decorator, Component, Color, Tween, UIOpacity, Vec3, tween, GameConfigManager, StringUtils, BubbleChat, Downloader, BauCuaFullScreenGameView, LobbyViewController;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      Node = module.Node;
      sp = module.sp;
      Label = module.Label;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
      Color = module.Color;
      Tween = module.Tween;
      UIOpacity = module.UIOpacity;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      BubbleChat = module.BubbleChat;
    }, function (module) {
      Downloader = module.default;
    }, function (module) {
      BauCuaFullScreenGameView = module.BauCuaFullScreenGameView;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _temp;

      cclegacy._RF.push({}, "393bfLI/xZJPpBTLyjAbMuD", "PlayerView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let PlayerView = exports('PlayerView', (_dec = ccclass('PlayerView'), _dec2 = property(Sprite), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(sp.Skeleton), _dec6 = property(Label), _dec7 = property(Node), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Sprite), _dec11 = property(Sprite), _dec12 = property(Node), _dec13 = property(Button), _dec14 = property([Node]), _dec15 = property([BubbleChat]), _dec16 = property(Boolean), _dec(_class = (_class2 = (_temp = class PlayerView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spr_avatar", _descriptor, this);

          _initializerDefineProperty(this, "avatar_light", _descriptor2, this);

          _initializerDefineProperty(this, "result", _descriptor3, this);

          _initializerDefineProperty(this, "win_fx", _descriptor4, this);

          _initializerDefineProperty(this, "lbl_displayName", _descriptor5, this);

          _initializerDefineProperty(this, "icon", _descriptor6, this);

          _initializerDefineProperty(this, "lbl_money", _descriptor7, this);

          _initializerDefineProperty(this, "lbl_addmoney", _descriptor8, this);

          _initializerDefineProperty(this, "spr_host", _descriptor9, this);

          _initializerDefineProperty(this, "spr_ready", _descriptor10, this);

          _initializerDefineProperty(this, "content", _descriptor11, this);

          _initializerDefineProperty(this, "btn_invite", _descriptor12, this);

          _initializerDefineProperty(this, "money_positions", _descriptor13, this);

          _initializerDefineProperty(this, "bubbleChats", _descriptor14, this);

          _initializerDefineProperty(this, "is_hidden", _descriptor15, this);

          _defineProperty(this, "currentBubbleChatInd", 0);

          _defineProperty(this, "userID", "");

          _defineProperty(this, "money", 0);

          _defineProperty(this, "winning", 0);

          _defineProperty(this, "info", null);

          _defineProperty(this, "shakeDiskCoins", []);
        }

        setUserInfo(info) {
          if (info == null) {
            if (this.content != null && this.btn_invite != null) {
              this.content.active = false;
              this.btn_invite.node.active = true;
            }

            return;
          } else {
            if (this.content != null && this.btn_invite != null) {
              this.content.active = true;
              this.btn_invite.node.active = false;
            }
          }

          if (this.is_hidden) {
            return;
          }

          this.info = info;
          this.userID = info.uid;
          this.lbl_displayName.string = info.displayName;
          this.lbl_money.string = StringUtils.formatMoneyNumber(info.gold);
          Downloader.loadRemoteSpriteFrame(info.avatarURL, sf => {
            var _LobbyViewController$;

            this.spr_avatar.spriteFrame = sf == null ? (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.spr_frame_AvatarDefault : sf;
          });

          if (this.spr_host != null) {
            this.spr_host.node.active = info.isHost;
          }
        }

        isThisPlayer() {
          if (this.lbl_displayName == null) {
            return false;
          }

          return this.lbl_displayName.string == GameConfigManager.displayName;
        }

        isHost() {
          if (this.info == null) return false;
          return this.info.isHost;
        }

        ready(isReady = true) {
          this.spr_ready.node.active = isReady;
        }

        getName() {
          if (this.lbl_displayName == null) {
            return "";
          }

          return this.lbl_displayName.string;
        }

        isVisible() {
          return !this.is_hidden;
        }

        getUID() {
          return this.userID;
        }

        getMoneyPositions() {
          return this.money_positions;
        }

        getIconMoneyPosition() {
          return this.icon;
        }

        refresh() {
          if (this.info == null) {
            return;
          }

          this.lbl_money.string = StringUtils.formatMoneyNumber(this.info.gold);
        }

        setMoney(money) {
          if (this.info == null) {
            return;
          }

          this.info.gold = money;
          this.refresh();
        }

        setWinAmount(winAmount) {
          this.lbl_addmoney.color = Color.WHITE;
          this.lbl_addmoney.string = "+" + StringUtils.formatMoneyNumber(winAmount);
        }

        setLoseAmount(loseAmount) {
          this.lbl_addmoney.color = new Color(255, 163, 0, 255);
          this.lbl_addmoney.string = "-" + StringUtils.formatMoneyNumber(loseAmount);
        }

        showLoseFx(delay, timeToShow) {
          Tween.stopAllByTarget(this.result);
          Tween.stopAllByTarget(this.result.getComponent(UIOpacity));
          Tween.stopAllByTarget(this.avatar_light);
          Tween.stopAllByTarget(this.avatar_light.getComponent(UIOpacity));
          let startWinFxPos = new Vec3(0, -15, 0);
          let sequence = tween(this.result).sequence(tween().delay(delay), tween().call(() => {
            this.setLoseAmount(this.winning);
            this.refresh();
            BauCuaFullScreenGameView.getInstance().refreshUserOnlinePopup();
            this.result.active = true;
            let resultOpa = this.result.getComponent(UIOpacity);
            resultOpa.opacity = 255;
            this.result.setPosition(startWinFxPos);
            this.win_fx.setAnimation(0, "", true);
          }), tween().by(0.4, {
            position: new Vec3(0, 65, 0)
          }, {
            easing: 'expoOut'
          }), tween().delay(timeToShow), tween().call(() => {
            let resultOpa = this.result.getComponent(UIOpacity);
            let seq = tween(resultOpa).to(0.5, {
              opacity: 1
            }).call(() => {
              this.result.active = false;
            });
            seq.start();
          }));
          sequence.start();
        }

        showWinFx(delay, timeToShow) {
          Tween.stopAllByTarget(this.result);
          Tween.stopAllByTarget(this.result.getComponent(UIOpacity));
          Tween.stopAllByTarget(this.avatar_light);
          Tween.stopAllByTarget(this.avatar_light.getComponent(UIOpacity));
          let startWinFxPos = new Vec3(0, -15, 0);
          let sequence = tween(this.result).sequence(tween().delay(delay), tween().call(() => {
            this.setWinAmount(this.winning);
            this.refresh();
            BauCuaFullScreenGameView.getInstance().refreshUserOnlinePopup();
            this.result.active = true;
            let resultOpa = this.result.getComponent(UIOpacity);
            resultOpa.opacity = 255;
            this.result.setPosition(startWinFxPos);
            this.win_fx.setAnimation(0, "animation", true);
          }), tween().by(0.4, {
            position: new Vec3(0, 65, 0)
          }, {
            easing: 'expoOut'
          }), tween().call(() => {
            let seq = tween(this.avatar_light).sequence(tween().call(() => {
              let opa = this.avatar_light.getComponent(UIOpacity);
              opa.opacity = 1;
              this.avatar_light.active = true;
              let fadeIn = tween(opa).sequence(tween().to(0.5, {
                opacity: 255
              }), tween().delay(timeToShow), tween().to(0.5, {
                opacity: 1
              }), tween().call(() => {
                this.avatar_light.active = false;
                let opa = this.avatar_light.getComponent(UIOpacity);
                opa.opacity = 1;
                Tween.stopAllByTarget(this.avatar_light);
                Tween.stopAllByTarget(opa);
              }));
              fadeIn.start();
            }), tween(this.avatar_light).repeatForever(tween(this.avatar_light).by(5.0, {
              eulerAngles: new Vec3(0, 0, 360)
            }).start()));
            seq.start();
          }), tween().delay(timeToShow), tween().call(() => {
            let resultOpa = this.result.getComponent(UIOpacity);
            let seq = tween(resultOpa).to(0.5, {
              opacity: 1
            }).call(() => {
              this.result.active = false;
            });
            seq.start();
          }));
          sequence.start();
        }

        showBubbleChat(content, timeToShow = 5) {
          if (content == "" || content == null || content == undefined) {
            return;
          }

          let chat = this.bubbleChats[this.currentBubbleChatInd];
          chat.show(content, !this.is_hidden, timeToShow);
          this.currentBubbleChatInd++;

          if (this.currentBubbleChatInd >= this.bubbleChats.length) {
            this.currentBubbleChatInd = 0;
          }
        }

        hideBubbleChat() {
          let chat = this.bubbleChats[this.currentBubbleChatInd];
          chat.hideImmedialy();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spr_avatar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "avatar_light", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "result", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "win_fx", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbl_displayName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbl_money", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lbl_addmoney", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "spr_host", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "spr_ready", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "btn_invite", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "money_positions", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "bubbleChats", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "is_hidden", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniPoker_SlotMachineColumn.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './MiniPoker_SlotMachineItemView.ts', './MiniPoker_SlotMachineCmp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Layout, _decorator, Component, UITransform, Vec3, tween, MiniPokerSlotMachineItemView_SlotMachineItemView, MiniPokerSlotMachineCmp_SlotMachineCmp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Layout = module.Layout;
      _decorator = module._decorator;
      Component = module.Component;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      MiniPokerSlotMachineItemView_SlotMachineItemView = module.default;
    }, function (module) {
      MiniPokerSlotMachineCmp_SlotMachineCmp = module.default;
    }],
    execute: function () {
      exports('SlotMachineState', void 0);

      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "3c69bI7eu5Pr7tiRWrCxAn5", "MiniPoker_SlotMachineColumn", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SlotMachineState;

      (function (SlotMachineState) {
        SlotMachineState[SlotMachineState["SPINNING"] = 0] = "SPINNING";
        SlotMachineState[SlotMachineState["CHECK_TO_STOP"] = 1] = "CHECK_TO_STOP";
        SlotMachineState[SlotMachineState["STOPPING"] = 2] = "STOPPING";
        SlotMachineState[SlotMachineState["STOPPED"] = 3] = "STOPPED";
      })(SlotMachineState || (SlotMachineState = exports('SlotMachineState', {})));

      let MiniPokerSlotMachineColumn_SlotMachineColumn = exports('default', (_dec = ccclass('MiniPokerSlotMachineColumn'), _dec2 = property([MiniPokerSlotMachineItemView_SlotMachineItemView]), _dec3 = property(Layout), _dec(_class = (_class2 = (_temp = class MiniPokerSlotMachineColumn_SlotMachineColumn extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "items", _descriptor, this);

          _initializerDefineProperty(this, "layout", _descriptor2, this);

          _defineProperty(this, "state", SlotMachineState.STOPPED);

          _defineProperty(this, "item_position_y_limited", 0);

          _defineProperty(this, "item_position_y_top", 0);

          _defineProperty(this, "item_position_y_bottom", 0);

          _defineProperty(this, "item_position_y_stop", 0);

          _defineProperty(this, "item_top", null);

          _defineProperty(this, "onStopped", () => {});
        }

        onLoad() {
          this.item_position_y_bottom = this.items[0].node.position.y;
          this.item_position_y_stop = this.item_position_y_bottom - this.items[0].node.getComponent(UITransform).contentSize.height / 20;
          this.item_position_y_top = this.items[this.items.length - 1].node.position.y;
          this.item_position_y_limited = this.item_position_y_bottom - this.items[0].node.getComponent(UITransform).contentSize.height - this.layout.spacingY;
        }

        init() {
          this.state = SlotMachineState.STOPPED;
          this.items.forEach(item => item.init());
        }

        spin() {
          this.item_top = this.getTopItem();
          this.items.forEach(item => item.blur());
          this.state = SlotMachineState.SPINNING;
        }

        stop(card) {
          this.item_top = this.getTopItem();
          this.item_top.setCard(card);
          this.item_top.bright();
          this.state = SlotMachineState.CHECK_TO_STOP;
        }

        getstate() {
          return this.state;
        }

        update(dt) {
          switch (this.state) {
            case SlotMachineState.SPINNING:
              {
                this.spinning(dt);
                break;
              }

            case SlotMachineState.CHECK_TO_STOP:
              {
                this.checkToStop(dt);
                break;
              }
          }
        }

        getTopItem() {
          let topItem = this.items[0];
          this.items.forEach(item => {
            if (item.node.position.y >= topItem.node.position.y) {
              topItem = item;
            }
          });
          return topItem;
        }

        spinning(dt) {
          let needtosort = false;
          this.items.forEach(item => {
            let position = new Vec3(item.node.position);
            position.y -= MiniPokerSlotMachineCmp_SlotMachineCmp.SPIN_SPEED * dt;

            if (position.y <= this.item_position_y_limited) {
              position.y = this.item_position_y_top;
              this.item_top = item;
              needtosort = true;
            }

            item.node.position = position;
          });

          if (needtosort) {
            this.sort();
          }
        }

        sort() {
          this.items = this.items.sort((a, b) => a.node.position.y < b.node.position.y ? -1 : 1);
        }

        checkToStop(dt) {
          this.items.forEach(item => {
            let position = new Vec3(item.node.position);
            position.y -= MiniPokerSlotMachineCmp_SlotMachineCmp.SPIN_SPEED * dt;

            if (position.y <= this.item_position_y_limited) {
              position.y = this.item_position_y_top;
            }

            item.node.position = position;
          });

          if (this.item_top.node.position.y <= this.item_position_y_stop) {
            this.bounce();
            this.state = SlotMachineState.STOPPING;
          }
        }

        bounce() {
          this.sort();
          let pos = new Vec3(this.item_top.node.position);
          pos.y = this.item_position_y_stop;
          this.item_top.node.position = pos;
          this.items.forEach((item, index) => {
            if (item.name != this.item_top.name) {
              let pos = new Vec3(item.node.position);

              if (index == 0) {
                pos.y = this.items[index + 1].node.position.y - (this.layout.spacingY + this.items[index + 1].node.getComponent(UITransform).contentSize.height);
              } else {
                pos.y = this.items[index - 1].node.position.y + this.layout.spacingY + this.items[index - 1].node.getComponent(UITransform).contentSize.height;
              }

              item.node.position = pos;
            }
          });
          let offset = Math.abs(this.item_position_y_stop) - Math.abs(this.item_position_y_bottom);
          this.items.forEach(x => {
            let act = tween(x.node).sequence(tween().by(0.1, {
              position: new Vec3(0, offset, 0)
            }), tween().call(() => {
              this.state = SlotMachineState.STOPPED;
              this.onStopped && this.onStopped();
            }));
            act.start();
          });
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "items", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "layout", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { GameCard } from "../../../Utils/MauBinh_CardLib";
      // import MiniPoker_SlotMachineCmp from "./MiniPoker_SlotMachineCmp";
      // import MiniPoker_SlotMachineItemView from "./MiniPoker_SlotMachineItemView";
      // 
      // export enum SlotMachineState {
      //     SPINNING,
      //     CHECK_TO_STOP,
      //     STOPPING,
      //     STOPPED
      // }
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class MiniPoker_SlotMachineColumn extends cc.Component {
      //     @property([MiniPoker_SlotMachineItemView])
      //     private items: MiniPoker_SlotMachineItemView[] = [];
      // 
      //     @property(cc.Layout)
      //     private layout: cc.Layout = null;
      // 
      //     private state: SlotMachineState = SlotMachineState.STOPPED;
      // 
      //     private item_position_y_limited = 0;
      // 
      //     private item_position_y_top = 0;
      // 
      //     private item_position_y_bottom = 0;
      // 
      //     private item_position_y_stop = 0;
      // 
      //     private item_top: MiniPoker_SlotMachineItemView = null;
      // 
      //     public onStopped = () => {};
      // 
      //     onLoad() {
      //         this.item_position_y_bottom = this.items[0].node.position.y;
      //         this.item_position_y_stop = this.item_position_y_bottom - (this.items[0].node.getContentSize().height / 20);
      //         this.item_position_y_top = this.items[this.items.length - 1].node.position.y;
      //         this.item_position_y_limited = this.item_position_y_bottom - this.items[0].node.getContentSize().height - (this.layout.spacingY);
      //     }
      //     init() {
      //         this.state = SlotMachineState.STOPPED;
      //         this.items.forEach(item => item.init());
      //     }
      // 
      //     spin() {
      //         this.item_top = this.getTopItem();
      //         this.items.forEach(item => item.blur());
      //         this.state = SlotMachineState.SPINNING;
      //     }
      // 
      //     stop(card : GameCard) {
      //         this.item_top = this.getTopItem();
      //         this.item_top.setCard(card);
      //         this.item_top.bright();
      //         this.state = SlotMachineState.CHECK_TO_STOP;
      //     }
      // 
      //     getstate() {
      //         return this.state;
      //     }
      // 
      //     update(dt) {
      //         switch (this.state) {
      //             case SlotMachineState.SPINNING:
      //                 {
      //                     this.spinning(dt);
      //                     break;
      //                 }
      //             case SlotMachineState.CHECK_TO_STOP:
      //                 {
      //                     this.checkToStop(dt);
      //                     break;
      //                 }
      //         }
      //     }
      // 
      //     private getTopItem() {
      //         let topItem = this.items[0];
      //         this.items.forEach(item => {
      //             if(item.node.position.y >= topItem.node.position.y) {
      //                 topItem = item;
      //             }
      //         });
      // 
      //         return topItem;
      //     }
      // 
      //     private spinning(dt) {
      //         let needtosort = false;
      //         this.items.forEach((item) => {
      //             let position = item.node.position;
      //             position.y -= MiniPoker_SlotMachineCmp.SPIN_SPEED * dt;
      // 
      //             if (position.y <= this.item_position_y_limited) {
      //                 position.y = this.item_position_y_top;
      //                 this.item_top = item;
      //                 needtosort = true;
      //             }
      // 
      //             item.node.position = position;
      //         });
      // 
      //         if(needtosort) {
      //             this.sort();
      //         }
      //     }
      // 
      //     private sort(){
      //         this.items = this.items.sort((a,b) => a.node.position.y < b.node.position.y ? -1 : 1);
      //     }
      // 
      //     private checkToStop(dt) {
      //         this.items.forEach(item => {
      //             let position = item.node.position;
      //             position.y -= MiniPoker_SlotMachineCmp.SPIN_SPEED * dt;
      // 
      //             if (position.y <= this.item_position_y_limited) {
      //                 position.y = this.item_position_y_top;
      //             }
      // 
      //             item.node.position = position;
      //         });
      // 
      //         if(this.item_top.node.position.y <= this.item_position_y_stop) {
      //             this.bounce();
      //             this.state = SlotMachineState.STOPPING;
      //         }
      //     }
      // 
      //     private bounce() {
      //         this.sort();
      // 
      //         let pos = this.item_top.node.position;
      //         pos.y = this.item_position_y_stop;
      //         this.item_top.node.position = pos;
      // 
      //         this.items.forEach((item,index) => {
      //             if(item.name != this.item_top.name) {
      //                 let pos = item.node.position;
      //                 if(index == 0) {
      //                     pos.y = this.items[index + 1].node.position.y - (this.layout.spacingY + this.items[index + 1].node.getContentSize().height);
      //                 } else{
      //                     pos.y = this.items[index - 1].node.position.y + this.layout.spacingY + this.items[index - 1].node.getContentSize().height;
      //                 }
      //                 item.node.position = pos;
      //             }
      //         });
      // 
      //         let offset = Math.abs(this.item_position_y_stop) - Math.abs(this.item_position_y_bottom);
      //         this.items.forEach(x => {
      //             let act = cc.sequence(cc.moveBy(0.1,cc.v2(0,offset)),cc.callFunc(() => {
      //                 this.state = SlotMachineState.STOPPED;
      //                 this.onStopped && this.onStopped();
      //             }));
      //             x.node.runAction(act);
      //         });
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuGameView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './StringUtils.ts', './MiniGameNetworkHandler.ts', './NotiView.ts', './GameUtils.ts', './GlobalVariables.ts', './LoadingView.ts', './BaseMiniGameView.ts', './TaiXiuGameItemView.ts', './TaiXiuChatView.ts', './TaiXiuMessageHandler.ts', './DragView.ts', './BatCmp.ts', './TaiXiuBetHistoryView.ts', './TaiXiuBetRankView.ts', './TaiXiuSessionAnalyticsView.ts', './TaiXiuSessionHistoryView.ts', './MiniGameNodeController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, sp, Toggle, SpriteFrame, Button, Node, _decorator, sys, Tween, Vec3, tween, systemEvent, UIOpacity, Color, Sprite, GameConfigManager, StringUtils, MessageRequest, MiniGameNetworkHandler, NotiView, GameUtils, GlobalVariables, LoadingView, BaseMiniGameView, TaiXiuGameItemView, TaiXiuChatView, TaiXiuKhongCan_Message, DragView, BatCmp, TaiXiuBetHistoryView, TaiXiuBetRankView, TaiXiuSessionAnalyticsView, TaiXiuSessionHistoryView, MiniGameNodeController, GamePlayManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      sp = module.sp;
      Toggle = module.Toggle;
      SpriteFrame = module.SpriteFrame;
      Button = module.Button;
      Node = module.Node;
      _decorator = module._decorator;
      sys = module.sys;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
      systemEvent = module.systemEvent;
      UIOpacity = module.UIOpacity;
      Color = module.Color;
      Sprite = module.Sprite;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MiniGameNetworkHandler = module.MiniGameNetworkHandler;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GameUtils = module.default;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      BaseMiniGameView = module.default;
    }, function (module) {
      TaiXiuGameItemView = module.TaiXiuGameItemView;
    }, function (module) {
      TaiXiuChatView = module.default;
    }, function (module) {
      TaiXiuKhongCan_Message = module.TaiXiuKhongCan_Message;
    }, function (module) {
      DragView = module.default;
    }, function (module) {
      BatCmp = module.default;
    }, function (module) {
      TaiXiuBetHistoryView = module.default;
    }, function (module) {
      TaiXiuBetRankView = module.default;
    }, function (module) {
      TaiXiuSessionAnalyticsView = module.default;
    }, function (module) {
      TaiXiuSessionHistoryView = module.default;
    }, function (module) {
      MiniGameNodeController = module.default;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _class3, _temp;

      cclegacy._RF.push({}, "3d788Y0jftLQZ/UJic1IDA/", "TaiXiuGameView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class TaiXiuInfo {
        constructor() {
          _defineProperty(this, "totalTaiBeting", void 0);

          _defineProperty(this, "totalXiuBeting", void 0);

          _defineProperty(this, "totalTaiUser", void 0);

          _defineProperty(this, "totalXiuUser", void 0);

          _defineProperty(this, "aid", void 0);

          _defineProperty(this, "thisPlayerTaiBet", void 0);

          _defineProperty(this, "thisPlayerXiuBet", void 0);

          _defineProperty(this, "availableMoney", void 0);
        }

      }

      exports('TaiXiuInfo', TaiXiuInfo);

      class TaiXiuResult {
        constructor() {
          _defineProperty(this, "d1", void 0);

          _defineProperty(this, "d2", void 0);

          _defineProperty(this, "d3", void 0);

          _defineProperty(this, "sessionID", void 0);
        }

      }

      exports('TaiXiuResult', TaiXiuResult);
      var TaiXiuBet;

      (function (TaiXiuBet) {
        TaiXiuBet[TaiXiuBet["ChuaDat"] = 0] = "ChuaDat";
        TaiXiuBet[TaiXiuBet["DatTai"] = 1] = "DatTai";
        TaiXiuBet[TaiXiuBet["DatXiu"] = 2] = "DatXiu";
      })(TaiXiuBet || (TaiXiuBet = {}));

      let TaiXiuGameView = exports('TaiXiuGameView', (_dec = ccclass('TaiXiuGameView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(sp.Skeleton), _dec10 = property(sp.Skeleton), _dec11 = property(sp.Skeleton), _dec12 = property(TaiXiuChatView), _dec13 = property(TaiXiuBetHistoryView), _dec14 = property(TaiXiuBetRankView), _dec15 = property(TaiXiuSessionAnalyticsView), _dec16 = property(TaiXiuSessionHistoryView), _dec17 = property(sp.Skeleton), _dec18 = property(sp.Skeleton), _dec19 = property([Toggle]), _dec20 = property([SpriteFrame]), _dec21 = property([SpriteFrame]), _dec22 = property(Button), _dec23 = property(Button), _dec24 = property(Label), _dec25 = property(Label), _dec26 = property(Label), _dec27 = property(Label), _dec28 = property([Button]), _dec29 = property(Button), _dec30 = property(Button), _dec31 = property(Button), _dec32 = property(Button), _dec33 = property(Button), _dec34 = property(Button), _dec35 = property(Button), _dec36 = property(Button), _dec37 = property(Button), _dec38 = property(Node), _dec39 = property(sp.Skeleton), _dec40 = property(Label), _dec41 = property(Toggle), _dec42 = property(BatCmp), _dec43 = property(DragView), _dec44 = property(Node), _dec45 = property(Node), _dec(_class = (_class2 = (_temp = _class3 = class TaiXiuGameView extends BaseMiniGameView {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lblSession", _descriptor, this);

          _initializerDefineProperty(this, "taiPlayersCount", _descriptor2, this);

          _initializerDefineProperty(this, "xiuPlayersCount", _descriptor3, this);

          _initializerDefineProperty(this, "currentTaiMoney", _descriptor4, this);

          _initializerDefineProperty(this, "currentXiuMoney", _descriptor5, this);

          _initializerDefineProperty(this, "remainTimeToBetting", _descriptor6, this);

          _initializerDefineProperty(this, "remainTimeToStartNew", _descriptor7, this);

          _initializerDefineProperty(this, "dice1", _descriptor8, this);

          _initializerDefineProperty(this, "dice2", _descriptor9, this);

          _initializerDefineProperty(this, "dice3", _descriptor10, this);

          _initializerDefineProperty(this, "taiXiuChatView", _descriptor11, this);

          _initializerDefineProperty(this, "taiXiuBetHistoryView", _descriptor12, this);

          _initializerDefineProperty(this, "taiXiuBetRankView", _descriptor13, this);

          _initializerDefineProperty(this, "taiXiuSessionAnalyticsView", _descriptor14, this);

          _initializerDefineProperty(this, "taiXiuSessionHistoryView", _descriptor15, this);

          _initializerDefineProperty(this, "toggle_tai", _descriptor16, this);

          _initializerDefineProperty(this, "toggle_xiu", _descriptor17, this);

          _initializerDefineProperty(this, "toggle_results", _descriptor18, this);

          _initializerDefineProperty(this, "sprFrame_kq_tai", _descriptor19, this);

          _initializerDefineProperty(this, "sprFrame_kq_xiu", _descriptor20, this);

          _initializerDefineProperty(this, "btn_bet_tai", _descriptor21, this);

          _initializerDefineProperty(this, "btn_bet_xiu", _descriptor22, this);

          _initializerDefineProperty(this, "txt_bet_tai_amount", _descriptor23, this);

          _initializerDefineProperty(this, "txt_bet_xiu_amount", _descriptor24, this);

          _initializerDefineProperty(this, "txt_bet_tai_current_amount", _descriptor25, this);

          _initializerDefineProperty(this, "txt_bet_xiu_current_amount", _descriptor26, this);

          _initializerDefineProperty(this, "btn_chips", _descriptor27, this);

          _defineProperty(this, "chip_values", [1000, 10000, 50000, 100000, 500000, 5000000, 50000000]);

          _initializerDefineProperty(this, "btn_all_in", _descriptor28, this);

          _initializerDefineProperty(this, "btn_bet_ok", _descriptor29, this);

          _initializerDefineProperty(this, "btn_rank", _descriptor30, this);

          _initializerDefineProperty(this, "btn_bet_history", _descriptor31, this);

          _initializerDefineProperty(this, "btn_session_history", _descriptor32, this);

          _initializerDefineProperty(this, "btn_help", _descriptor33, this);

          _initializerDefineProperty(this, "btn_chat", _descriptor34, this);

          _initializerDefineProperty(this, "btn_huy", _descriptor35, this);

          _initializerDefineProperty(this, "btn_session_analytics", _descriptor36, this);

          _initializerDefineProperty(this, "bet_panel", _descriptor37, this);

          _initializerDefineProperty(this, "bgRefundMoney", _descriptor38, this);

          _initializerDefineProperty(this, "refundMoney", _descriptor39, this);

          _initializerDefineProperty(this, "btn_nan", _descriptor40, this);

          _initializerDefineProperty(this, "batCmp", _descriptor41, this);

          _initializerDefineProperty(this, "main_drag_view", _descriptor42, this);

          _initializerDefineProperty(this, "bound_1", _descriptor43, this);

          _initializerDefineProperty(this, "bound_2", _descriptor44, this);

          _defineProperty(this, "_infos", []);

          _defineProperty(this, "_results", []);

          _defineProperty(this, "_aid", 1);

          _defineProperty(this, "_sessionID", "");

          _defineProperty(this, "_playing", false);

          _defineProperty(this, "_inputingMoney", 0);

          _defineProperty(this, "timeForBetting", 0);

          _defineProperty(this, "timeForPaying", 0);

          _defineProperty(this, "availableBalance", 0);

          _defineProperty(this, "state", TaiXiuBet.ChuaDat);

          _defineProperty(this, "_remainingFreeBets", 0);

          _defineProperty(this, "SHOW_RESULT_ACTION_TAG", 1);

          _defineProperty(this, "START_NEW_GAME_ACTION_TAG", 2);

          _defineProperty(this, "PREPARE_NEW_GAME_ACTION_TAG", 3);
        }

        onLoad() {
          var _this$taiXiuSessionHi, _this$btn_session_his, _this$taiXiuSessionAn, _this$btn_session_ana, _this$btn_bet_tai, _this$btn_bet_xiu, _this$btn_huy, _this$btn_rank, _this$btn_bet_history, _this$btn_session_his2, _this$btn_help, _this$btn_chat, _this$btn_session_ana2, _this$btn_bet_ok;

          super.onLoad();
          TaiXiuGameView.instance = this;
          (_this$taiXiuSessionHi = this.taiXiuSessionHistoryView) === null || _this$taiXiuSessionHi === void 0 ? void 0 : _this$taiXiuSessionHi.followNode((_this$btn_session_his = this.btn_session_history) === null || _this$btn_session_his === void 0 ? void 0 : _this$btn_session_his.node);
          (_this$taiXiuSessionAn = this.taiXiuSessionAnalyticsView) === null || _this$taiXiuSessionAn === void 0 ? void 0 : _this$taiXiuSessionAn.followNode((_this$btn_session_ana = this.btn_session_analytics) === null || _this$btn_session_ana === void 0 ? void 0 : _this$btn_session_ana.node);
          this.init();
          (_this$btn_bet_tai = this.btn_bet_tai) === null || _this$btn_bet_tai === void 0 ? void 0 : _this$btn_bet_tai.node.on("click", () => {
            this.btn_bet_tai.node.active = false;
            this.btn_bet_xiu.node.active = true;
            this.txt_bet_tai_amount.node.parent.active = true;
            this.txt_bet_xiu_amount.node.parent.active = false;
            this.showBetPanel();
            this.state = TaiXiuBet.DatTai;
          });
          (_this$btn_bet_xiu = this.btn_bet_xiu) === null || _this$btn_bet_xiu === void 0 ? void 0 : _this$btn_bet_xiu.node.on("click", () => {
            this.btn_bet_xiu.node.active = false;
            this.btn_bet_tai.node.active = true;
            this.txt_bet_tai_amount.node.parent.active = false;
            this.txt_bet_xiu_amount.node.parent.active = true;
            this.showBetPanel();
            this.state = TaiXiuBet.DatXiu;
          });
          (_this$btn_huy = this.btn_huy) === null || _this$btn_huy === void 0 ? void 0 : _this$btn_huy.node.on("click", () => {
            this.showBetPanel(false);
          });
          (_this$btn_rank = this.btn_rank) === null || _this$btn_rank === void 0 ? void 0 : _this$btn_rank.node.on("click", () => {
            this.showRank();
          });
          (_this$btn_bet_history = this.btn_bet_history) === null || _this$btn_bet_history === void 0 ? void 0 : _this$btn_bet_history.node.on("click", () => {
            this.showBetHistory();
          });
          (_this$btn_session_his2 = this.btn_session_history) === null || _this$btn_session_his2 === void 0 ? void 0 : _this$btn_session_his2.node.on("click", () => {
            var _this$taiXiuSessionHi2;

            (_this$taiXiuSessionHi2 = this.taiXiuSessionHistoryView) === null || _this$taiXiuSessionHi2 === void 0 ? void 0 : _this$taiXiuSessionHi2.show();
          });
          (_this$btn_help = this.btn_help) === null || _this$btn_help === void 0 ? void 0 : _this$btn_help.node.on("click", () => {
            sys.openURL(GameConfigManager.helpURL);
          });
          (_this$btn_chat = this.btn_chat) === null || _this$btn_chat === void 0 ? void 0 : _this$btn_chat.node.on("click", () => {
            var _this$taiXiuChatView;

            (_this$taiXiuChatView = this.taiXiuChatView) === null || _this$taiXiuChatView === void 0 ? void 0 : _this$taiXiuChatView.open();
          });
          (_this$btn_session_ana2 = this.btn_session_analytics) === null || _this$btn_session_ana2 === void 0 ? void 0 : _this$btn_session_ana2.node.on("click", () => {
            var _LoadingView$getInsta;

            (_LoadingView$getInsta = LoadingView.getInstance()) === null || _LoadingView$getInsta === void 0 ? void 0 : _LoadingView$getInsta.show();
            let dict = {};
            dict["cmd"] = TaiXiuKhongCan_Message.SESSION_ANALYTIC;
            dict["sid"] = +this._sessionID - 1;
            dict["aid"] = this._aid;
            let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "taixiuUnbalancedPlugin", dict];
            MiniGameNetworkHandler.send(mes);
          });
          (_this$btn_bet_ok = this.btn_bet_ok) === null || _this$btn_bet_ok === void 0 ? void 0 : _this$btn_bet_ok.node.on("click", () => {
            if (!this._playing) {
              NotiView.getInstance().showMessage("Phiên mới chưa bắt đầu!", this.main, GlobalVariables.TAIXIU);
              return;
            }

            if (this._inputingMoney == 0) {
              NotiView.getInstance().showMessage("Vui lòng nhập tiền đặt!", this.main, GlobalVariables.TAIXIU);
              return;
            }

            let dict = {};
            dict["cmd"] = TaiXiuKhongCan_Message.BET;
            dict["b"] = this._inputingMoney;
            dict["aid"] = this._aid;
            dict["sid"] = this._sessionID;
            let eid = 1;

            if (this.state == TaiXiuBet.DatXiu) {
              eid = 2;
            }

            dict["eid"] = eid;
            let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "taixiuUnbalancedPlugin", dict];
            MiniGameNetworkHandler.send(mes);
          });
          this.btn_chips.forEach((chip, index) => {
            let i = index;
            chip.node.on("click", () => {
              this._inputingMoney += this.chip_values[i];

              if (this.txt_bet_tai_amount.node.parent.active) {
                this.txt_bet_tai_amount.string = StringUtils.formatNumber(this._inputingMoney);
              } else {
                this.txt_bet_xiu_amount.string = StringUtils.formatNumber(this._inputingMoney);
              }
            });
          });
          this.btn_all_in.node.on("click", () => {
            this._inputingMoney = GameConfigManager.gold;

            if (this.txt_bet_tai_amount.node.parent.active) {
              this.txt_bet_tai_amount.string = StringUtils.formatNumber(this._inputingMoney);
            } else {
              this.txt_bet_xiu_amount.string = StringUtils.formatNumber(this._inputingMoney);
            }
          });
        }

        showBetPanel(isShow = true) {
          this.bet_panel.active = isShow;

          if (this.bet_panel.active) {
            this.main_drag_view.setBoundingBox(this.bound_2);
          } else {
            this.main_drag_view.setBoundingBox(this.bound_1);
          }

          if (!isShow) {
            this.btn_bet_tai.node.active = true;
            this.btn_bet_xiu.node.active = true;
            this.txt_bet_tai_amount.node.parent.active = false;
            this.txt_bet_xiu_amount.node.parent.active = false;
          } else {
            this._inputingMoney = 0;
            this.txt_bet_tai_amount.string = "0";
            this.txt_bet_xiu_amount.string = "0";
            this.btn_chips.forEach(chip => {
              Tween.stopAllByTarget(chip.node);
              chip.node.setScale(Vec3.ONE);
              let zoom = tween(chip.node).sequence(tween().to(0.2, {
                scale: new Vec3(0.9, 0.9, 1)
              }), tween().to(0.2, {
                scale: Vec3.ONE
              }));
              zoom.start();
            });
          }
        }

        static getInstance() {
          return TaiXiuGameView.instance;
        }

        subcribleInfo(sessionID, gameState, remainingTime, history, gameInfo, availableGold, availableChip, freeBetTimes, freeBetAmount, timeForBetting, timeForPaying, enableEvt, eventStr, eventURL) {
          this.timeForBetting = timeForBetting;
          this.timeForPaying = timeForPaying;
          this._sessionID = sessionID;
          this.stop_all_main_game_action();
          this.setCau(history);
          this.updateBetInfo(gameInfo);
          if (gameState == 1) ;else if (gameState == 2) {
            // thoi gian dat cuoc
            this.startNewGame(sessionID, remainingTime);
          } else if (gameState == 3) {
            // he thong tinh tien
            let lastResult = this._results[this._results.length - 1];
            let d1 = lastResult.d1;
            let d2 = lastResult.d2;
            let d3 = lastResult.d3;
            this.showResult(d1, d2, d3, false, false);
            this.prepareForNewGame(remainingTime);
            this.lblSession.string = "#" + sessionID;
          }
        }

        prepareForNewGame(remainingTime) {
          this.stop_all_main_game_action();
          this.remainTimeToStartNew.node.parent.active = true;
          remainingTime = Math.floor(remainingTime);
          var seq = tween(this.node).repeat(remainingTime + 1, tween().sequence(tween().call(() => {
            this.remainTimeToStartNew.node.setScale(new Vec3(1.5, 1.5, 1));
            tween(this.remainTimeToStartNew.node).to(0.1, {
              scale: Vec3.ONE
            }).start();
            this.remainTimeToStartNew.string = remainingTime.toString();
          }), tween().delay(1), tween().call(() => {
            remainingTime -= 1;
          })));
          seq.start();
        }

        startNewGame(sessionID, remainingTime = -1) {
          var _this$batCmp;

          this.stop_all_main_game_action();
          systemEvent.emit(TaiXiuGameItemView.START_NEW_SESSION_EVENT_KEY);
          (_this$batCmp = this.batCmp) === null || _this$batCmp === void 0 ? void 0 : _this$batCmp.hide();
          this._playing = true;
          this._sessionID = sessionID;

          if (remainingTime == -1) {
            NotiView.getInstance().showMessage("Bắt đầu phiên mới.", this.main, GlobalVariables.TAIXIU);
            this.taiPlayersCount.string = "0";
            this.xiuPlayersCount.string = "0";
            this.currentTaiMoney.string = "0";
            this.currentXiuMoney.string = "0";
          }

          this.remainTimeToBetting.enabled = true;
          this.remainTimeToStartNew.node.parent.active = false; // toogle tai xiu

          this.toggle_tai.setAnimation(0, "loop_tai", true);
          this.toggle_xiu.setAnimation(0, "loop_xiu", true); // Toggle result

          this.toggle_results.forEach(x => {
            Tween.stopAllByTarget(x);
            Tween.stopAllByTarget(x.checkMark.node.getComponent(UIOpacity));
            x.checkMark.node.getComponent(UIOpacity).opacity = 1;
          });
          this.txt_bet_tai_current_amount.node.parent.active = false;
          this.txt_bet_xiu_current_amount.node.parent.active = false;
          this.dice1.node.active = false;
          this.dice2.node.active = false;
          this.dice3.node.active = false;
          remainingTime = Math.floor(remainingTime);
          this.lblSession.string = "#" + sessionID;
          let timeToCountDown = remainingTime == -1 ? this.timeForBetting : remainingTime; //     tween(
          //         cc.callFunc(() => {
          //             this.remainTimeToBetting.string = (timeToCountDown < 10 ? "0" : "") + timeToCountDown.toString();
          //             MiniGameNodeController.getInstance()?.startGameTaiXiu(timeToCountDown);
          //         }),
          //         cc.delayTime(1 - delay),
          //         cc.callFunc(() => {
          //             timeToCountDown -= 1;
          //         }));
          // seq.setTag(this.START_NEW_GAME_ACTION_TAG);

          let seq = tween().call(() => {
            var _MiniGameNodeControll;

            this.remainTimeToBetting.string = (timeToCountDown < 10 ? "0" : "") + timeToCountDown.toString();
            (_MiniGameNodeControll = MiniGameNodeController.getInstance()) === null || _MiniGameNodeControll === void 0 ? void 0 : _MiniGameNodeControll.startGameTaiXiu(timeToCountDown);
            timeToCountDown -= 1;
          }).then(tween().delay(1));
          let countDownSeq = tween(this.node).repeat(timeToCountDown + 1, seq);
          countDownSeq.start();
        }

        fetchHistory(betHistory, aid) {
          if (this._aid == aid) {
            var _this$taiXiuBetHistor;

            (_this$taiXiuBetHistor = this.taiXiuBetHistoryView) === null || _this$taiXiuBetHistor === void 0 ? void 0 : _this$taiXiuBetHistor.fetchHistory(betHistory, aid);
          }
        }

        fetchThongKe(thongKeArr, sessionID, d1, d2, d3, startTime) {
          var _this$taiXiuSessionAn2;

          (_this$taiXiuSessionAn2 = this.taiXiuSessionAnalyticsView) === null || _this$taiXiuSessionAn2 === void 0 ? void 0 : _this$taiXiuSessionAn2.showSessionAnalytics(thongKeArr, sessionID, d1, d2, d3, startTime, this._aid);
        }

        showNoti(message) {
          NotiView.getInstance().showMessage(message, this.main, GlobalVariables.TAIXIU);
        }

        updateBetInfo(gameInfo, clearPrevInfos = true) {
          if (clearPrevInfos) {
            this._infos = [];
          }

          let taiDict;
          let xiuDict;
          let g = gameInfo[0];

          if (g["eid"] == 1) {
            taiDict = gameInfo[0];
            xiuDict = gameInfo[1];
          } else {
            taiDict = gameInfo[1];
            xiuDict = gameInfo[0];
          }

          let aid = 1; //gameInfoDict->getUInt64("aid");

          let totalTaiBeting = taiDict["v"];
          let totalTaiUser = taiDict["bc"];
          let totalXiuBeting = xiuDict["v"];
          let totalXiuUser = xiuDict["bc"]; // if (clearPrevInfos) {

          let info = new TaiXiuInfo();
          info.aid = aid;
          info.totalTaiBeting = totalTaiBeting;
          info.totalXiuBeting = totalXiuBeting;
          info.totalTaiUser = totalTaiUser;
          info.totalXiuUser = totalXiuUser;
          info.thisPlayerTaiBet = 0; // khoi tao

          info.thisPlayerXiuBet = 0;

          if (taiDict["b"] != undefined && taiDict["b"] != null) {
            info.thisPlayerTaiBet = taiDict["b"];
            info.thisPlayerXiuBet = xiuDict["b"];
          }

          this._infos.push(info); // }


          this.updateLabels();
        }

        updateLabels() {
          for (let i = 0; i < this._infos.length; i++) {
            if (this._infos[i].aid == this._aid) {
              let totalTaiBeting = this._infos[i].totalTaiBeting;
              let totalXiuBeting = this._infos[i].totalXiuBeting;
              let totalTaiUser = this._infos[i].totalTaiUser;
              let totalXiuUser = this._infos[i].totalXiuUser;
              let thisPlayerTaiBet = this._infos[i].thisPlayerTaiBet;
              let thisPlayerXiuBet = this._infos[i].thisPlayerXiuBet;
              let availableMoney = this._infos[i].availableMoney;

              if (StringUtils.formatNumber(totalTaiBeting) != this.currentTaiMoney.string) {
                this.currentTaiMoney.string = StringUtils.formatNumber(totalTaiBeting);
                this.currentTaiMoney.node.scale = Vec3.ONE;
                Tween.stopAllByTarget(this.currentTaiMoney.node);
                let seq = tween(this.currentTaiMoney.node).sequence(tween().to(0.2, {
                  scale: new Vec3(1.1, 1.1, 1)
                }), tween().to(0.2, {
                  scale: Vec3.ONE
                }));
                seq.start();
              }

              if (StringUtils.formatNumber(totalXiuBeting) != this.currentXiuMoney.string) {
                this.currentXiuMoney.string = StringUtils.formatNumber(totalXiuBeting);
                this.currentXiuMoney.node.scale = Vec3.ONE;
                Tween.stopAllByTarget(this.currentXiuMoney.node);
                let seq = tween(this.currentXiuMoney.node).sequence(tween().to(0.2, {
                  scale: new Vec3(1.1, 1.1, 1)
                }), tween().to(0.2, {
                  scale: Vec3.ONE
                }));
                seq.start();
              }

              systemEvent.emit(TaiXiuGameItemView.UPDATE_BET_EVENT_KEY, totalTaiBeting, totalXiuBeting); // this.currentTaiBet.string = thisPlayerTaiBet;
              // this.currentXiuBet.string = thisPlayerXiuBet;

              this.taiPlayersCount.string = totalTaiUser;
              this.xiuPlayersCount.string = totalXiuUser;
            }
          }
        }

        stop_all_main_game_action() {
          // this.node.stopActionByTag(this.SHOW_RESULT_ACTION_TAG);
          // this.node.stopActionByTag(this.PREPARE_NEW_GAME_ACTION_TAG);
          // this.node.stopActionByTag(this.START_NEW_GAME_ACTION_TAG);
          Tween.stopAllByTarget(this.node);
        }

        showResult(d1, d2, d3, withFx, traTienCanKeo) {
          var _this$batCmp2;

          this.stop_all_main_game_action();
          (_this$batCmp2 = this.batCmp) === null || _this$batCmp2 === void 0 ? void 0 : _this$batCmp2.hide();
          this._playing = false;
          let timeDiceRolling = 3.0;
          let timeTraTienCanKeo = 3.0;

          if (!traTienCanKeo) {
            timeTraTienCanKeo = 0;
          }

          let showDices = () => {
            this.prepareForNewGame(this.timeForPaying - timeDiceRolling - timeTraTienCanKeo);
            this.dice1.node.active = true;
            this.dice2.node.active = true;
            this.dice3.node.active = true;
            let frameDice1 = "R1EndF" + d1;
            let frameDice2 = "R2EndF" + d2;
            let frameDice3 = "R3EndF" + d3;
            this.dice1.setAnimation(0, frameDice1, false);
            this.dice2.setAnimation(0, frameDice2, false);
            this.dice3.setAnimation(0, frameDice3, false);

            let isAdded = this._results.some(r => r.sessionID == this._sessionID);

            if (!isAdded) {
              let newResult = new TaiXiuResult();
              newResult.d1 = d1;
              newResult.d2 = d2;
              newResult.d3 = d3;
              newResult.sessionID = this._sessionID;

              this._results.push(newResult);
            }
          };

          let showResult = () => {
            var _MiniGameNodeControll2, _this$batCmp3, _this$refundMoney;

            let isTai = d1 + d2 + d3 > 10;
            (_MiniGameNodeControll2 = MiniGameNodeController.getInstance()) === null || _MiniGameNodeControll2 === void 0 ? void 0 : _MiniGameNodeControll2.showTaiXiuResult(isTai);
            systemEvent.emit(TaiXiuGameItemView.UPDATE_RESULT_EVENT_KEY, isTai);
            (_this$batCmp3 = this.batCmp) === null || _this$batCmp3 === void 0 ? void 0 : _this$batCmp3.hide();
            let sum = d1 + d2 + d3;

            if (sum > 10) {
              this.toggle_tai.setAnimation(0, "win_tai", true);
              this.toggle_xiu.setAnimation(0, "fade_xiu", true);
            } else {
              this.toggle_tai.setAnimation(0, "fade_tai", true);
              this.toggle_xiu.setAnimation(0, "win_xiu", true);
            }

            if (((_this$refundMoney = this.refundMoney) === null || _this$refundMoney === void 0 ? void 0 : _this$refundMoney.string) != "") {
              var _this$refundMoney2;

              this.refundMoney.node.getComponent(UIOpacity).opacity = 255;
              this.bgRefundMoney.color = Color.WHITE;
              let track = this.bgRefundMoney.setAnimation(0, "animation", false);

              if (track != null) {
                this.bgRefundMoney.setCompleteListener(trackEntry => {
                  let name = trackEntry.animation ? trackEntry.animation.name : '';

                  if (name == "animation") {
                    this.bgRefundMoney.setAnimation(0, "loop", true);
                  }
                });
              }

              let refundMonetActPos = tween((_this$refundMoney2 = this.refundMoney) === null || _this$refundMoney2 === void 0 ? void 0 : _this$refundMoney2.node.parent).sequence(tween().delay(0.2), tween().by(0.5, {
                position: new Vec3(0, 30, 0)
              }), tween().call(() => {
                GamePlayManager.sendRefreshMoney();
              }), tween().delay(5.0), tween().call(() => {
                this.refundMoney.node.getComponent(UIOpacity).opacity = 1;
                this.bgRefundMoney.color = new Color(0, 0, 0, 0); // let refundMonetActFade = tween(this.refundMoney?.node?.getComponent(UIOpacity)).sequence(
                //     tween().call(() => {
                //     }),
                //     tween().to(1, { opacity: 0 })
                // );
                // refundMonetActFade.start();
                // let bgrefundMonetActFade = tween(this.bgRefundMoney).sequence(
                //     tween().call(() => {
                //         this.bgRefundMoney.setAnimation(0, "<None>", false);
                //     }),
                //     tween().to(1, { color: new Color(0,0,0,0) })
                // );
                // bgrefundMonetActFade.start();
              }));
              refundMonetActPos.start();
            }

            this.updateCau();
          };

          if (withFx) {
            let timeToBeginShowBat = 1.0;
            let sequence = tween(this.node).sequence(tween().delay(timeTraTienCanKeo), tween().call(() => {
              this.remainTimeToBetting.enabled = false;
              this.dice1.node.parent.setRotationFromEuler(new Vec3(0, 0, GameUtils.getRandomInt(-360, 360)));
              this.dice1.node.active = true;
              this.dice2.node.active = true;
              this.dice3.node.active = true;
              let frameDice1 = "R1_F" + d1;
              let frameDice2 = "R2_F" + d2;
              let frameDice3 = "R3_F" + d3;
              this.dice1.setAnimation(0, frameDice1, false);
              this.dice2.setAnimation(0, frameDice2, false);
              this.dice3.setAnimation(0, frameDice3, false);
            }), tween().delay(timeDiceRolling - timeToBeginShowBat), tween().call(() => {
              if (this.btn_nan.isChecked) {
                this.batCmp.node.active = true;
                this.batCmp.onOpenBat = showResult;
              }
            }), tween().delay(timeToBeginShowBat), tween().call(() => {
              showDices();
              if (this.btn_nan.isChecked) ;else {
                showResult();
              }
            }));
            sequence.start();
          } else {
            this.remainTimeToBetting.enabled = false;
            showDices();
            showResult();
          }
        }

        setCau(history) {
          this._results = [];

          for (let i = 0; i < history.length; i++) {
            let resultDict = history[i];
            let d1 = resultDict["d1"];
            let d2 = resultDict["d2"];
            let d3 = resultDict["d3"];
            let sessionID = resultDict["sid"];
            let result = new TaiXiuResult();
            result.d1 = d1;
            result.d2 = d2;
            result.d3 = d3;
            result.sessionID = sessionID;

            this._results.push(result);
          }

          this.updateCau(false);
        }

        loadChatHistory(chatHistory) {
          var _this$taiXiuChatView2;

          (_this$taiXiuChatView2 = this.taiXiuChatView) === null || _this$taiXiuChatView2 === void 0 ? void 0 : _this$taiXiuChatView2.loadChatHistory(chatHistory);
        }

        updateChat(char_array) {
          var _this$taiXiuChatView3;

          (_this$taiXiuChatView3 = this.taiXiuChatView) === null || _this$taiXiuChatView3 === void 0 ? void 0 : _this$taiXiuChatView3.updateChat(char_array);
        }

        updateResultMoney(resultDict) {
          let betArr = resultDict["bs"];
          TaiXiuGameView.getInstance().updateBetInfo(betArr);
          let d1 = resultDict["d1"];
          let d2 = resultDict["d2"];
          let d3 = resultDict["d3"];
          this.showResult(d1, d2, d3, true, false);
          let goldExchange = 0;

          if (resultDict["wm"] != undefined && resultDict["wm"] != null) {
            goldExchange = resultDict["wm"];
          }

          this._playing = false;
          this._inputingMoney = 0;
          this.txt_bet_tai_amount.string = "0";
          this.txt_bet_xiu_amount.string = "0";
          this.availableBalance += goldExchange;
          this.refundMoney.node.getComponent(UIOpacity).opacity = 1;
          this.bgRefundMoney.color = new Color(0, 0, 0, 0);
          this.refundMoney.node.parent.setPosition(new Vec3(0, -225, 0));
          this.refundMoney.string = goldExchange > 0 ? "+" + StringUtils.formatNumber(goldExchange) : "";

          if (goldExchange >= 1000000000) {
            this.bgRefundMoney.node.setScale(1.1, 1, 1);
          } else if (goldExchange <= 1000) {
            this.bgRefundMoney.node.setScale(0.6, 1, 1);
          } else if (goldExchange <= 10000) {
            this.bgRefundMoney.node.setScale(0.7, 1, 1);
          } else if (goldExchange <= 100000) {
            this.bgRefundMoney.node.setScale(0.8, 1, 1);
          } else if (goldExchange <= 1000000) {
            this.bgRefundMoney.node.setScale(0.9, 1, 1);
          } else ;
        }

        updateCau(withFx = true) {
          var _this$taiXiuSessionHi3;

          let startIdx = 0;

          if (this._results.length > this.toggle_results.length) {
            startIdx = this._results.length - this.toggle_results.length;
          }

          for (let i = startIdx; i < this._results.length; i++) {
            let d1 = this._results[i].d1;
            let d2 = this._results[i].d2;
            let d3 = this._results[i].d3;
            let index = i - startIdx;
            let sum = d1 + d2 + d3;

            if (sum > 10) {
              this.toggle_results[index].target.getComponent(Sprite).spriteFrame = this.sprFrame_kq_tai[0];
            } else {
              this.toggle_results[index].target.getComponent(Sprite).spriteFrame = this.sprFrame_kq_xiu[0];
            }

            if (i == this._results.length - 1 && withFx) {
              if (sum > 10) {
                this.toggle_results[index].checkMark.node.getComponent(Sprite).spriteFrame = this.sprFrame_kq_tai[1];
              } else {
                this.toggle_results[index].checkMark.node.getComponent(Sprite).spriteFrame = this.sprFrame_kq_xiu[1];
              }

              let actionFade = tween(this.toggle_results[index].checkMark.node.getComponent(UIOpacity)).repeatForever(tween().sequence(tween().to(0.3, {
                opacity: 255
              }), tween().to(0.3, {
                opacity: 0
              })));
              actionFade.start();
            }
          }

          (_this$taiXiuSessionHi3 = this.taiXiuSessionHistoryView) === null || _this$taiXiuSessionHi3 === void 0 ? void 0 : _this$taiXiuSessionHi3.setHistory(this._results);
        }

        updateThisPlayerBetting(aid, eid, betting, totalEntryBetting, totalUser, freeBetTimes, showMessage = true) {
          if (betting > 0 && showMessage) {
            NotiView.getInstance().showMessage("Đặt cược thành công!", this.main, GlobalVariables.TAIXIU);
            this._inputingMoney = 0;
            this.txt_bet_tai_amount.string = "0";
            this.txt_bet_xiu_amount.string = "0";
          }

          for (let i = 0; i < this._infos.length; i++) {
            if (this._infos[i].aid == aid) {
              if (eid == 1) {
                this._infos[i].thisPlayerTaiBet = betting;
                this._infos[i].totalTaiBeting = totalEntryBetting;
                this._infos[i].totalTaiUser = totalUser;

                if (this._aid == aid) {
                  if (betting > 0) {
                    this.txt_bet_tai_current_amount.node.parent.active = true;
                    this.txt_bet_tai_current_amount.string = StringUtils.formatNumber(betting);
                  }

                  this.currentTaiMoney.string = StringUtils.formatNumber(this._infos[i].totalTaiBeting);
                  this.currentXiuMoney.string = StringUtils.formatNumber(this._infos[i].totalXiuBeting);
                }
              } else {
                this._infos[i].thisPlayerXiuBet = betting;
                this._infos[i].totalXiuBeting = totalEntryBetting;
                this._infos[i].totalXiuUser = totalUser;

                if (this._aid == aid) {
                  if (betting > 0) {
                    this.txt_bet_xiu_current_amount.node.parent.active = true;
                    this.txt_bet_xiu_current_amount.string = StringUtils.formatNumber(betting);
                  }

                  this.currentTaiMoney.string = StringUtils.formatNumber(this._infos[i].totalTaiBeting);
                  this.currentXiuMoney.string = StringUtils.formatNumber(this._infos[i].totalXiuBeting);
                }
              }
            }
          }
        }

        showRank() {
          var _this$taiXiuBetRankVi;

          (_this$taiXiuBetRankVi = this.taiXiuBetRankView) === null || _this$taiXiuBetRankVi === void 0 ? void 0 : _this$taiXiuBetRankVi.fetchRank();
        }

        showBetHistory() {
          var _LoadingView$getInsta2;

          (_LoadingView$getInsta2 = LoadingView.getInstance()) === null || _LoadingView$getInsta2 === void 0 ? void 0 : _LoadingView$getInsta2.show();
          let dict = {};
          dict["cmd"] = TaiXiuKhongCan_Message.GET_BET_HISTORY;
          dict["L"] = 500;
          dict["S"] = 0;
          dict["aid"] = this._aid;
          let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "taixiuUnbalancedPlugin", dict];
          MiniGameNetworkHandler.send(mes);
        }

        isCanDeactiveRoot() {
          return true;
        }

        show() {
          MiniGameNodeController.getInstance().bringGameViewToTop(this, true);
          super.show(() => {
            this.taiXiuChatView.open();
          });
          return true;
        }

        hide() {
          super.hide();
          this.taiXiuChatView.close();
        }

        init() {
          var _this$batCmp4;

          (_this$batCmp4 = this.batCmp) === null || _this$batCmp4 === void 0 ? void 0 : _this$batCmp4.init();
          super.init();
          super.hide();
        }

      }, _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lblSession", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "taiPlayersCount", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "xiuPlayersCount", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "currentTaiMoney", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "currentXiuMoney", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "remainTimeToBetting", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "remainTimeToStartNew", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "dice1", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "dice2", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "dice3", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "taiXiuChatView", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "taiXiuBetHistoryView", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "taiXiuBetRankView", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "taiXiuSessionAnalyticsView", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "taiXiuSessionHistoryView", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "toggle_tai", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "toggle_xiu", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "toggle_results", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_kq_tai", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_kq_xiu", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "btn_bet_tai", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "btn_bet_xiu", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "txt_bet_tai_amount", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "txt_bet_xiu_amount", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "txt_bet_tai_current_amount", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "txt_bet_xiu_current_amount", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "btn_chips", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "btn_all_in", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "btn_bet_ok", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "btn_rank", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "btn_bet_history", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "btn_session_history", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "btn_help", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "btn_chat", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "btn_huy", [_dec36], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor36 = _applyDecoratedDescriptor(_class2.prototype, "btn_session_analytics", [_dec37], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor37 = _applyDecoratedDescriptor(_class2.prototype, "bet_panel", [_dec38], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor38 = _applyDecoratedDescriptor(_class2.prototype, "bgRefundMoney", [_dec39], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor39 = _applyDecoratedDescriptor(_class2.prototype, "refundMoney", [_dec40], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor40 = _applyDecoratedDescriptor(_class2.prototype, "btn_nan", [_dec41], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor41 = _applyDecoratedDescriptor(_class2.prototype, "batCmp", [_dec42], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor42 = _applyDecoratedDescriptor(_class2.prototype, "main_drag_view", [_dec43], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor43 = _applyDecoratedDescriptor(_class2.prototype, "bound_1", [_dec44], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor44 = _applyDecoratedDescriptor(_class2.prototype, "bound_2", [_dec45], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StringUtils.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3f0ccScIVlJKYfeohegKLFo", "StringUtils", undefined);

      class StringUtils {
        static isNonAccent(str) {
          let checkStr = str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
          return checkStr == str;
        }

        static formatMoneyNumber(money) {
          let format; // int cha;

          if (money >= 1000000000.0) {
            money /= 1000000000.0;
            format = 'B';
          } else if (money >= 1000000.0) {
            money /= 1000000.0;
            format = 'M';
          } else if (money >= 1000) {
            money /= 1000;
            format = 'K';
          } else {
            format = '';
          }

          money = Math.ceil(money * 100) / 100;
          return money + format;
        }

        static formatNumber(input) {
          let dv = Math.abs(input);
          let str = "";

          while (dv >= 1000) {
            let mod = dv % 1000;
            let mod_str = mod.toString();
            if (mod < 10) mod_str = "00" + mod_str;else if (mod < 100) mod_str = "0" + mod_str;
            str = "," + mod_str + str;
            dv = Math.floor(dv / 1000);
          }

          str = dv + str;
          return str;
        }

        static formatUnixTime(unixTime) {
          return new Date(unixTime);
        }

        static formatTime(date) {
          var aaaa = date.getFullYear();
          var gg = date.getDate();
          var mm = date.getMonth() + 1;
          if (gg < 10) gg = "0" + gg;
          if (mm < 10) mm = "0" + mm;
          var cur_day = gg + "-" + mm + "-" + aaaa;
          var hours = date.getHours();
          var minutes = date.getMinutes();
          var seconds = date.getSeconds();
          if (hours < 10) hours = "0" + hours;
          if (minutes < 10) minutes = "0" + minutes;
          if (seconds < 10) seconds = "0" + seconds;
          return hours + ":" + minutes + ":" + seconds + "\n" + cur_day;
        }

        static formatTimeJustDate(date) {
          var aaaa = date.getFullYear();
          var gg = date.getDate();
          var mm = date.getMonth() + 1;
          if (gg < 10) gg = "0" + gg;
          if (mm < 10) mm = "0" + mm;
          var cur_day = gg + "-" + mm + "-" + aaaa;
          return cur_day;
        }

        static formatTimeJustHours(date) {
          var hours = date.getHours();
          var minutes = date.getMinutes();
          var seconds = date.getSeconds();
          if (hours < 10) hours = "0" + hours;
          if (minutes < 10) minutes = "0" + minutes;
          if (seconds < 10) seconds = "0" + seconds;
          return hours + ":" + minutes + ":" + seconds;
        }

      }

      exports('StringUtils', StringUtils);
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // export class StringUtils {
      //     public static formatMoneyNumber(money) {
      //         let format;
      //         //int cha;
      //         if (money >= 1000000000.0) {
      //             money /= 1000000000.0;
      //             format = 'B';
      //         } else if (money >= 1000000.0) {
      //             money /= 1000000.0;
      //             format = 'M';
      //         } else if (money >= 1000) {
      //             money /= 1000;
      //             format = 'K';
      //         } else {
      //             format = '';
      //         }
      //         money = Math.ceil(money * 100) / 100;
      //         return money + format;
      //     }
      // 
      //     public static formatNumber(input) {
      //         let dv = Math.abs(input);
      //         let str = "";
      //         while(dv >= 1000){
      //             let mod = dv % 1000;
      //             let mod_str = mod.toString();
      //             if(mod < 10) mod_str = "00" + mod_str;
      //             else if(mod < 100) mod_str = "0" + mod_str;
      //             str = "," + mod_str + str;
      //             dv = Math.floor(dv / 1000);
      //         }
      // 
      //         str = dv + str;
      //         return str;
      //     }
      // 
      //     public static formatTime(date) {
      //         var aaaa = date.getFullYear();
      //         var gg = date.getDate();
      //         var mm = (date.getMonth() + 1);
      //     
      //         if (gg < 10)
      //             gg = "0" + gg;
      //     
      //         if (mm < 10)
      //             mm = "0" + mm;
      //     
      //         var cur_day = gg + "-" + mm + "-" + aaaa;
      //     
      //         var hours = date.getHours();
      //         var minutes = date.getMinutes();
      //         var seconds = date.getSeconds();
      //     
      //         if (hours < 10)
      //             hours = "0" + hours;
      //     
      //         if (minutes < 10)
      //             minutes = "0" + minutes;
      //     
      //         if (seconds < 10)
      //             seconds = "0" + seconds;
      //     
      //         return hours + ":" + minutes + ":" + seconds + "\n" + cur_day;
      //     
      //     }
      // 
      //     public static formatTimeJustDate(date) {
      //         var aaaa = date.getFullYear();
      //         var gg = date.getDate();
      //         var mm = (date.getMonth() + 1);
      //     
      //         if (gg < 10)
      //             gg = "0" + gg;
      //     
      //         if (mm < 10)
      //             mm = "0" + mm;
      //     
      //         var cur_day = gg + "-" + mm + "-" + aaaa;
      //     
      //         return cur_day;
      //     
      //     }
      // 
      //     public static formatTimeJustHours(date) {
      //         var hours = date.getHours();
      //         var minutes = date.getMinutes();
      //         var seconds = date.getSeconds();
      //     
      //         if (hours < 10)
      //             hours = "0" + hours;
      //     
      //         if (minutes < 10)
      //             minutes = "0" + minutes;
      //     
      //         if (seconds < 10)
      //             seconds = "0" + seconds;
      //     
      //         return hours + ":" + minutes + ":" + seconds;
      //     
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniGamePopup.ts", ['cc', './CommonPopup.ts'], function (exports) {
  'use strict';

  var cclegacy, Vec3, _decorator, CommonPopup;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4001d9xomRLeqBFhUbv6ekb", "MiniGamePopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MiniGamePopup = exports('MiniGamePopup', (_dec = ccclass('MiniGamePopup'), _dec(_class = class MiniGamePopup extends CommonPopup {
        isOpened() {
          return this.main.scale == Vec3.ONE;
        }

      }) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BauCuaBetEntry.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts', './ChipPanel.ts', './BlinkCmp.ts', './LobbyViewController.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, Label, Button, _decorator, Component, Tween, UIOpacity, Vec3, tween, instantiate, StringUtils, ChipPanel, BlinkCmp, LobbyViewController;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
      Tween = module.Tween;
      UIOpacity = module.UIOpacity;
      Vec3 = module.Vec3;
      tween = module.tween;
      instantiate = module.instantiate;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      ChipPanel = module.ChipPanel;
    }, function (module) {
      BlinkCmp = module.default;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _temp;

      cclegacy._RF.push({}, "45a10zX/0tPn6ZFcQ+vxkXZ", "BauCuaBetEntry", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BauCuaBetEntry = exports('BauCuaBetEntry', (_dec = ccclass('BauCuaBetEntry'), _dec2 = property(Node), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Button), _dec6 = property(ChipPanel), _dec7 = property(Label), _dec8 = property(Number), _dec(_class = (_class2 = (_temp = class BauCuaBetEntry extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "glow", _descriptor, this);

          _initializerDefineProperty(this, "lbl_total_bet", _descriptor2, this);

          _initializerDefineProperty(this, "lbl_my_bet", _descriptor3, this);

          _initializerDefineProperty(this, "button", _descriptor4, this);

          _initializerDefineProperty(this, "chipPanel", _descriptor5, this);

          _initializerDefineProperty(this, "lbl_rate", _descriptor6, this);

          _initializerDefineProperty(this, "eid", _descriptor7, this);

          _defineProperty(this, "currentBet", 0);

          _defineProperty(this, "listBetCoin", []);

          _defineProperty(this, "blink", null);
        }

        onLoad() {
          var _this$glow;

          this.blink = (_this$glow = this.glow) === null || _this$glow === void 0 ? void 0 : _this$glow.getComponent(BlinkCmp);
          this.button.node.on("click", () => {
            this.sendBet();
          });
        }

        sendBet() {
          var _LobbyViewController$;

          let bet = this.chipPanel.getSelectedBetValue();
          if (bet <= 0) return;
          (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.sendBet(this.eid, bet);
        }

        setRate(rate) {
          if (this.lbl_rate != null) {
            this.lbl_rate.node.active = true;
            this.lbl_rate.string = "1:" + rate;
          }
        }

        hideAll() {
          this.listBetCoin.forEach(coin => {
            Tween.stopAllByTarget(coin);
            Tween.stopAllByTarget(coin.getComponent(UIOpacity));
          });
          this.listBetCoin = [];
          this.currentBet = 0;
          this.lbl_total_bet.node.parent.active = false;
          this.lbl_my_bet.node.parent.active = false;
          this.showGlow(false);
        }

        showGlow(isShow = true) {
          if (this.blink == null) {
            var _this$glow2;

            this.blink = (_this$glow2 = this.glow) === null || _this$glow2 === void 0 ? void 0 : _this$glow2.getComponent(BlinkCmp);
          }

          if (isShow && this.blink != null) {
            this.blink.run();
          }

          this.glow.active = isShow;
        }

        isGlowing() {
          return this.glow.active;
        }

        setTotalBet(totalBet) {
          this.lbl_total_bet.node.parent.active = true;
          this.lbl_total_bet.string = StringUtils.formatMoneyNumber(totalBet);
        }

        setCurrentBet(bet) {
          this.currentBet += bet;
          this.lbl_my_bet.node.parent.active = true;
          this.lbl_my_bet.string = StringUtils.formatMoneyNumber(this.currentBet);
        }

        addCoin(coin) {
          this.listBetCoin.push(coin);
        }

        payChipsForDealer(isLoseEntry) {
          let loseCoins = isLoseEntry ? this.listBetCoin : [];

          for (let i = 0; i < loseCoins.length; i++) {
            let index = i;
            let coin = loseCoins[index];
            Tween.stopAllByTarget(coin);
            Tween.stopAllByTarget(coin.getComponent(UIOpacity));
            let moneyPosition = new Vec3(this.node.position);
            let move = tween(coin).sequence(tween().to(0.3, {
              position: moneyPosition
            }), tween().delay(0.2), tween().call(() => {
              let opa = coin.getComponent(UIOpacity);
              tween(opa).to(0.4, {
                opacity: 0
              }).start();
            }), tween().delay(0.4).call(() => {
              let pos = new Vec3(coin.position);
              pos.y = moneyPosition.y + index * 3;
              coin.setPosition(pos);
              coin.setSiblingIndex(coin.parent.children.length - 1);
            }), tween().delay(0.4).call(() => {
              let opa = coin.getComponent(UIOpacity);
              opa.opacity = 1;
              tween(opa).to(0.7, {
                opacity: 255
              }).start();
            }), tween().delay(0.7).to(0.5, {
              position: Vec3.ZERO
            }), tween().call(() => {
              let opa = coin.getComponent(UIOpacity);
              tween(opa).to(0.5, {
                opacity: 0
              }).start();
            }));
            move.start();
          }
        }

        payChipsForPlayers(uid) {
          try {
            var _LobbyViewController$2;

            let viewInstance = (_LobbyViewController$2 = LobbyViewController.getInstance()) === null || _LobbyViewController$2 === void 0 ? void 0 : _LobbyViewController$2.getView();
            let player = viewInstance.getVisiblePlayerByID(uid);

            if (player == null) {
              let hiddenView = viewInstance.getPlayerByUID(uid);
              let hiddenPos = hiddenView != null ? hiddenView.node.position : Vec3.ZERO;
              let count = 0;
              this.listBetCoin.forEach(bc => {
                if (bc.name.indexOf(uid) >= 0) {
                  let seq = tween(bc).sequence(tween().delay(4.5 + count * 0.02), tween().call(() => {
                    tween(bc.getComponent(UIOpacity)).to(0.6, {
                      opacity: 0
                    }).start();
                  }), tween().to(0.6, {
                    position: new Vec3(hiddenPos)
                  }));
                  seq.start();
                  count++;
                }
              });
              return;
            }

            let coinsBet = player.shakeDiskCoins.filter(sk => this.listBetCoin.filter(bc => sk.name == bc.name).length > 0);
            let coinPay = [];

            for (let i = 0; i < coinsBet.length; i++) {
              var _viewInstance$getChip;

              let coin = instantiate(coinsBet[i]);
              coin.parent = coinsBet[i].parent;
              coinPay.push(coin);
              viewInstance === null || viewInstance === void 0 ? void 0 : (_viewInstance$getChip = viewInstance.getChipPooling()) === null || _viewInstance$getChip === void 0 ? void 0 : _viewInstance$getChip.payCoin.push(coin);
            }

            let sequence = tween(player.node).sequence(tween().delay(2.7), tween().call(() => {
              let paysequence = tween(player.node).sequence(tween().delay(0.5), tween().call(() => {
                let payPosition = player === null || player === void 0 ? void 0 : player.getMoneyPositions()[1].position;

                for (let i = 0; i < coinPay.length; i++) {
                  var _viewInstance$getChip2;

                  let coin = coinPay[i];
                  viewInstance === null || viewInstance === void 0 ? void 0 : (_viewInstance$getChip2 = viewInstance.getChipPooling()) === null || _viewInstance$getChip2 === void 0 ? void 0 : _viewInstance$getChip2.onTop(coin);

                  if (coin == null) {
                    console.log("can't find coin");
                    continue;
                  }

                  try {
                    let move = tween(coin).to(0.9, {
                      position: new Vec3(payPosition.x, payPosition.y + i * 3, payPosition.z)
                    }, {
                      easing: 'expoOut'
                    });
                    move.start();
                  } catch (ex) {}
                }
              }), tween().delay(1.5), tween().call(() => {
                let iconMoneyPosition = player.getIconMoneyPosition().position;

                for (let i = 0; i < coinPay.length; i++) {
                  let coin = coinPay[i];
                  let hide = tween(coin).sequence(tween().call(() => {
                    tween(coin.getComponent(UIOpacity)).to(0.2, {
                      opacity: 0
                    }).start();
                  }), tween().to(0.2, {
                    position: new Vec3(iconMoneyPosition)
                  }, {
                    easing: 'linear'
                  }));
                  hide.start();
                }

                for (let i = 0; i < coinsBet.length; i++) {
                  let coin = coinsBet[i];
                  let hide = tween(coin).sequence(tween().call(() => {
                    tween(coin.getComponent(UIOpacity)).to(0.2, {
                      opacity: 0
                    }).start();
                  }), tween().to(0.2, {
                    position: new Vec3(iconMoneyPosition)
                  }, {
                    easing: 'linear'
                  }));
                  hide.start();
                }
              }));
              paysequence.start();
            }), tween().call(() => {
              player.showWinFx(0.9, 4);
            }), tween().call(() => {
              let moneyPosition = player === null || player === void 0 ? void 0 : player.getMoneyPositions()[0].position;

              for (let i = 0; i < coinsBet.length; i++) {
                var _viewInstance$getChip3;

                let coin = coinsBet[i];
                viewInstance === null || viewInstance === void 0 ? void 0 : (_viewInstance$getChip3 = viewInstance.getChipPooling()) === null || _viewInstance$getChip3 === void 0 ? void 0 : _viewInstance$getChip3.onTop(coin);
                let move = tween(coin).to(0.9, {
                  position: new Vec3(moneyPosition.x, moneyPosition.y + i * 3, moneyPosition.z)
                }, {
                  easing: 'expoOut'
                });
                move.start();
              }
            }));
            sequence.start();
          } catch (ex) {
            console.log("some error occur in payChipsForPlayers");
          }
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "glow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbl_total_bet", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbl_my_bet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "chipPanel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbl_rate", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "eid", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CCMiniGameCommonPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Button, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "4609d2BeDBJbIcpiLbwoKTf", "CCMiniGameCommonPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CCMiniGameCommonPopup = exports('default', (_dec = ccclass('CCMiniGameCommonPopup'), _dec2 = property(Label), _dec3 = property(Button), _dec4 = property(Button), _dec(_class = (_class2 = (_temp = class CCMiniGameCommonPopup extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "message", _descriptor, this);

          _initializerDefineProperty(this, "closebutton", _descriptor2, this);

          _initializerDefineProperty(this, "confirmbutton", _descriptor3, this);
        }

        show(message, closeCb, confirmCb) {//this.message.string = message;
          //this.closebutton.node.on("click", () => {
          //closeCb && closeCb();
          //this.hide();
          //});
          //this.confirmbutton.node.on("click", () => {
          //confirmCb && confirmCb();
          //this.hide();
          //});
          //this.node.active = true;
        }

        hide() {//this.node.active = false;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "message", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "closebutton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "confirmbutton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class CCMiniGameCommonPopup extends cc.Component {
      //     @property(cc.Label)
      //     message: cc.Label = null;
      // 
      //     @property(cc.Button)
      //     closebutton: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     confirmbutton: cc.Button = null;
      // 
      //     show(message,closeCb,confirmCb) {
      //         this.message.string = message;
      // 
      //         this.closebutton.node.on("click", () => {
      //             closeCb && closeCb();
      //             this.hide();
      //         });
      // 
      //         this.confirmbutton.node.on("click", () => {
      //             confirmCb && confirmCb();
      //             this.hide();
      //         });
      // 
      //         this.node.active = true;
      //     }
      // 
      //     hide() {
      //         this.node.active = false;
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BigLoadingView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './GamePlatformManager.ts', './GameHTTPNetwork.ts', './LobbyViewController.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, Label, Node, UIOpacity, _decorator, Component, Tween, tween, GameConfigManager, GamePlatformManager, GameHTTPNetwork, LobbyViewController;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      Label = module.Label;
      Node = module.Node;
      UIOpacity = module.UIOpacity;
      _decorator = module._decorator;
      Component = module.Component;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      GamePlatformManager = module.GamePlatformManager;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3, _temp;

      cclegacy._RF.push({}, "48867HKOpJFqYHolLReZAPC", "BigLoadingView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BigLoadingView = exports('BigLoadingView', (_dec = ccclass('BigLoadingView'), _dec2 = property(sp.Skeleton), _dec3 = property(sp.Skeleton), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(UIOpacity), _dec(_class = (_class2 = (_temp = _class3 = class BigLoadingView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "loading_anim", _descriptor, this);

          _initializerDefineProperty(this, "loading_shadow_anim", _descriptor2, this);

          _initializerDefineProperty(this, "lbl_loading", _descriptor3, this);

          _initializerDefineProperty(this, "root", _descriptor4, this);

          _initializerDefineProperty(this, "particle_node", _descriptor5, this);

          _initializerDefineProperty(this, "fade_screen", _descriptor6, this);
        }

        static getInstance() {
          return BigLoadingView.instance;
        }

        isShowing() {
          var _this$root;

          return (_this$root = this.root) === null || _this$root === void 0 ? void 0 : _this$root.active;
        }

        onLoad() {
          BigLoadingView.instance = this;
        }

        start() {
          this.show();
        }

        show() {
          var _this$loading_anim, _this$loading_shadow_, _this$lbl_loading, _this$lbl_loading2;

          this.root.active = true;
          this.particle_node.active = true;
          Tween.stopAllByTarget(this.lbl_loading.node);
          let track_loading_anim = (_this$loading_anim = this.loading_anim) === null || _this$loading_anim === void 0 ? void 0 : _this$loading_anim.setAnimation(0, "loading", false);

          if (track_loading_anim) {
            var _this$loading_anim2;

            (_this$loading_anim2 = this.loading_anim) === null || _this$loading_anim2 === void 0 ? void 0 : _this$loading_anim2.setCompleteListener(trackEntry => {
              let name = trackEntry.animation ? trackEntry.animation.name : '';

              if (name == "loading") {
                var _this$loading_anim3;

                (_this$loading_anim3 = this.loading_anim) === null || _this$loading_anim3 === void 0 ? void 0 : _this$loading_anim3.setAnimation(0, "loop", true);
              }
            });
          }

          let track_loading_shadow_anim = (_this$loading_shadow_ = this.loading_shadow_anim) === null || _this$loading_shadow_ === void 0 ? void 0 : _this$loading_shadow_.setAnimation(0, "loading", false);

          if (track_loading_shadow_anim) {
            var _this$loading_shadow_2;

            (_this$loading_shadow_2 = this.loading_shadow_anim) === null || _this$loading_shadow_2 === void 0 ? void 0 : _this$loading_shadow_2.setCompleteListener(trackEntry => {
              let name = trackEntry.animation ? trackEntry.animation.name : '';

              if (name == "loading") {
                var _this$loading_shadow_3;

                (_this$loading_shadow_3 = this.loading_shadow_anim) === null || _this$loading_shadow_3 === void 0 ? void 0 : _this$loading_shadow_3.setAnimation(0, "loop", true);
              }
            });
          }

          let loading_text_act = tween((_this$lbl_loading = this.lbl_loading) === null || _this$lbl_loading === void 0 ? void 0 : _this$lbl_loading.node).repeatForever(tween((_this$lbl_loading2 = this.lbl_loading) === null || _this$lbl_loading2 === void 0 ? void 0 : _this$lbl_loading2.node).sequence(tween().delay(1), tween().call(() => {
            this.lbl_loading.string = "LOADING";
          }), tween().delay(1), tween().call(() => {
            this.lbl_loading.string = "LOADING.";
          }), tween().delay(1), tween().call(() => {
            this.lbl_loading.string = "LOADING..";
          }), tween().delay(1), tween().call(() => {
            this.lbl_loading.string = "LOADING...";
          })));
          loading_text_act.start();
          this.loadConfig();
        }

        hide(onHidden = () => {}) {
          Tween.stopAllByTarget(this.fade_screen);
          this.fade_screen.opacity = 1;
          let fade = tween(this.fade_screen).sequence(tween().delay(0.5), tween().to(0.3, {
            opacity: 255
          }), tween().call(() => {
            this.root.active = false;
            this.particle_node.active = false;
            onHidden();
          }), tween().to(0.3, {
            opacity: 1
          }));
          fade.start();
        }

        loadConfig() {
          let url = GameConfigManager.DIS_URL;
          let appBundle = GameConfigManager.bundleID;
          let appName = GameConfigManager.appName;
          url = url.replace("%bundle%", appBundle);
          url = url.replace("%appName%", appName);
          GameHTTPNetwork.sendGET(url, resp => {
            let doc = JSON.parse(resp);
            let data = doc["data"];
            let disID = data["distId"];
            let appID = data["applicationId"];
            GameConfigManager.disID = disID;
            GameConfigManager.appID = appID;
            let url = GameConfigManager.CONFIG_URL;
            url = url.replace("%versionId%", GameConfigManager.gameConfigVersion.toString());
            url = url.replace("%distId%", disID);
            url = url.replace("%appId%", appID);
            url = url.replace("%platformId%", GamePlatformManager.getPlatformID().toString());
            GameHTTPNetwork.sendGET(url, resp => {
              this.parseConfig(resp);
            }, false, false);
          }, false, false);
        }

        parseConfig(resp) {
          let doc = JSON.parse(resp);
          let data = doc["data"];

          if (doc["status"] == 0) {
            var _LobbyViewController$;

            let config = data["config"];
            GameConfigManager.helpURL = config["gameRulesUrl"];
            GameConfigManager.liveChatURL = config["liveChatUrl"];
            let hotlines = config["hotlines"];

            if (hotlines != null && hotlines != undefined) {
              GameConfigManager.hotlineNumber = hotlines.length > 0 ? hotlines[0] : "";
            }

            let servers = config["servers"];

            if (servers != null && servers != undefined) {
              GameConfigManager.MainWSURL = servers.length > 0 ? servers[0]["websocketEndpoint"] : "";
            }

            let miniGameSevers = config["miniGameServer"];

            if (miniGameSevers != null && miniGameSevers != undefined) {
              GameConfigManager.MiniWSURL = miniGameSevers["websocketEndpoint"];
            }

            let services = config["services"];

            if (services != null && services != undefined) {
              GameConfigManager.IDdomainURL = services["id"];
              GameConfigManager.SAdomainURL = services["sa"];
            }

            let isLoggedIn = (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.autoLoginAcc();

            if (!isLoggedIn) {
              this.hide();
            }
          }
        }

      }, _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "loading_anim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "loading_shadow_anim", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbl_loading", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "particle_node", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "fade_screen", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3, _temp;

      cclegacy._RF.push({}, "4d0305+yoxNlLG7H9FvjL4Q", "LoadingView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LoadingView = exports('default', (_dec = ccclass('LoadingView'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = _class3 = class LoadingView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "black_screen", _descriptor, this);

          _initializerDefineProperty(this, "loading_node", _descriptor2, this);
        }

        static getInstance() {
          return LoadingView.instance;
        }

        onLoad() {
          LoadingView.instance = this;
        }

        show() {
          this.black_screen.active = true;
          this.loading_node.active = true;
        }

        hide() {
          this.black_screen.active = false;
          this.loading_node.active = false;
        }

      }, _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "black_screen", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "loading_node", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import CCMiniGameRoot from "../CCMiniGameRoot";
      // import MiniGameNodeController from "../MiniGameNodeController";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class LoadingView extends cc.Component {
      //     @property(cc.Sprite)
      //     private loading_indicator: cc.Sprite = null;
      // 
      //     @property(cc.Node)
      //     private black_screen: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private loading_node: cc.Node = null;
      // 
      //     private static instance: LoadingView = null;
      // 
      //     public static getInstance() {
      //         return LoadingView.instance;
      //     }
      // 
      //     onLoad() {
      //         LoadingView.instance = this;
      //     }
      // 
      //     update() {
      //         this.loading_node.position = new cc.Vec2((-CCMiniGameRoot.WIN_SIZE_WIDTH/ 2) + (this.loading_indicator.node.getContentSize().width / 2) + 20,
      //             (-CCMiniGameRoot.WIN_SIZE_HEIGHT / 2) + (this.loading_indicator.node.getContentSize().height/ 2) + 30);
      //     }
      // 
      //     public show() {
      //         this.black_screen.active = true;
      //         this.loading_node.active = true;
      // 
      //         let rotation = cc.rotateBy(3, 360);
      // 
      //         this.loading_indicator.node.runAction(cc.repeatForever(rotation));
      //     }
      // 
      //     public hide() {
      //         this.black_screen.active = false;
      //         this.loading_node.active = false;
      //         this.loading_indicator.node.stopAllActions();
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SettingPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, UITransform, Button, _decorator, Component, Vec3, UIOpacity, tween, GameConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      UITransform = module.UITransform;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "4fc739M3LhFpafA1ynqKg2d", "SettingPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SettingPopup = exports('SettingPopup', (_dec = ccclass('SettingPopup'), _dec2 = property(Node), _dec3 = property(UITransform), _dec4 = property(Button), _dec5 = property(Node), _dec(_class = (_class2 = (_temp = class SettingPopup extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "black_screen", _descriptor, this);

          _initializerDefineProperty(this, "main", _descriptor2, this);

          _initializerDefineProperty(this, "btn_close", _descriptor3, this);

          _initializerDefineProperty(this, "root", _descriptor4, this);

          _defineProperty(this, "origin_scale", Vec3.ONE);
        }

        onLoad() {
          var _this$main, _this$black_screen, _this$btn_close;

          this.origin_scale = new Vec3((_this$main = this.main) === null || _this$main === void 0 ? void 0 : _this$main.node.scale);
          let outside_area = (_this$black_screen = this.black_screen) === null || _this$black_screen === void 0 ? void 0 : _this$black_screen.getComponent(Button);

          if (outside_area != null) {
            outside_area === null || outside_area === void 0 ? void 0 : outside_area.node.on("click", () => {
              this.close();
            });
          }

          (_this$btn_close = this.btn_close) === null || _this$btn_close === void 0 ? void 0 : _this$btn_close.node.on("click", () => {
            this.close();
          });
        }

        show() {
          var _this$main2, _this$main3;

          if (this.root != null) {
            this.root.active = true;
          }

          this.black_screen.active = true;
          this.main.node.active = true;
          this.main.node.getComponent(UIOpacity).opacity = 1;
          this.main.node.scale = this.origin_scale;
          let pos = new Vec3(this.main.node.position);
          pos.x = ((_this$main2 = this.main) === null || _this$main2 === void 0 ? void 0 : _this$main2.node.scale.x) * (GameConfigManager.getSizeWidth() * 0.5 + this.main.contentSize.width * 0.65);
          this.main.node.setPosition(pos);
          let endPos = new Vec3(this.main.node.position);
          endPos.x = ((_this$main3 = this.main) === null || _this$main3 === void 0 ? void 0 : _this$main3.node.scale.x) * (GameConfigManager.getSizeWidth() * 0.5 - this.main.contentSize.width * 0.5);
          let move = tween(this.main.node).to(0.4, {
            position: endPos
          }, {
            easing: 'expoOut'
          });
          move.start();
          let fadeIn = tween(this.main.node.getComponent(UIOpacity)).to(0.2, {
            opacity: 255
          }, {
            easing: 'circIn'
          });
          fadeIn.start();
        }

        close() {
          var _this$main4;

          if (this.root != null) {
            this.root.active = false;
          }

          this.black_screen.active = false;
          this.main.node.active = false;
          this.main.node.getComponent(UIOpacity).opacity = 1;
          this.main.node.scale = Vec3.ZERO;
          let pos = new Vec3(this.main.node.position);
          pos.x = ((_this$main4 = this.main) === null || _this$main4 === void 0 ? void 0 : _this$main4.node.scale.x) * (GameConfigManager.getSizeWidth() * 0.5 + this.main.contentSize.width * 0.65);
          this.main.node.setPosition(pos);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "black_screen", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "main", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_close", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuBetRankView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './GlobalVariables.ts', './GameHTTPNetwork.ts', './TaiXiuBetRankItemView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, _decorator, UIOpacity, CommonPopup, GlobalVariables, GameHTTPNetwork, TaiXiuBetRankItemView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      TaiXiuBetRankItemView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "50c70auM3dD8b5s2NpLoiQj", "TaiXiuBetRankView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class TaiXiuRankResult {
        constructor() {
          _defineProperty(this, "rank", void 0);

          _defineProperty(this, "displayName", void 0);

          _defineProperty(this, "amount", void 0);
        }

      }

      let TaiXiuBetRankView = exports('default', (_dec = ccclass('TaiXiuBetRankView'), _dec2 = property([TaiXiuBetRankItemView]), _dec(_class = (_class2 = (_temp = class TaiXiuBetRankView extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "item_views", _descriptor, this);

          _defineProperty(this, "_rank", []);
        }

        fetchRank() {
          let url = GlobalVariables.BET_RANK_URL_TAI_XIU;
          GameHTTPNetwork.sendGET(url, response => {
            this._rank = [];
            response = JSON.parse(response);
            let rankData = response["data"]["topUsers"];

            for (let i = 0; i < rankData.length; i++) {
              let rankDict = rankData[i];
              let newResult = new TaiXiuRankResult();
              newResult.rank = i + 1;
              newResult.displayName = rankDict["displayName"];
              newResult.amount = rankDict["income"];

              this._rank.push(newResult);
            }

            this.showRank();
          });
        }

        showRank() {
          this.item_views.forEach((item, index) => {
            let info = this._rank[index];

            if (info != null && info != undefined) {
              item.node.getComponent(UIOpacity).opacity = 255;
              item.show(info.rank, info.displayName, info.amount);
            } else {
              item.node.getComponent(UIOpacity).opacity = 1;
            }
          });
          this.show();
        }

      }, _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "item_views", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import GameHTTPNetwork from "../../Network/GameHTTPNetwork";
      // import { GlobalVariables } from "../../Utils/GlobalVariables";
      // import { StringUtils } from "../../Utils/StringUtils";
      // import NotiView from "./NotiView";
      // import TaiXiuBetRankItemView from "./TaiXiuBetRankItemView";
      // import TaiXiuPopupCmp from "./TaiXiuPopupCmp";
      // 
      // class TaiXiuRankResult {
      //     public rank;
      //     public displayName;
      //     public amount;
      // }
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuBetRankView extends TaiXiuPopupCmp {
      //     @property([TaiXiuBetRankItemView])
      //     private item_views: TaiXiuBetRankItemView[] = [];
      // 
      //     @property(cc.Button)
      //     private btn_close: cc.Button = null;
      // 
      //     private _rank: TaiXiuRankResult[] = [];
      // 
      //     onLoad() {
      //         super.onLoad();
      //         
      //         this.original_scale = this.node.scale;
      //         this.btn_close.node.on("click", () => {
      //             this.hide();
      //         });
      // 
      //     }
      // 
      //     public fetchRank() {
      //         let url = GlobalVariables.BET_RANK_URL_TAI_XIU;
      // 
      //         url = url.replace("%game_name", encodeURIComponent("Tài Xỉu"));
      // 
      //         GameHTTPNetwork.sendGET(url, (response) => {
      //             this._rank = [];
      // 
      //             response = JSON.parse(response);
      // 
      //             let rankData: [] = response["data"]["topAssets"][0]["topUsers"];
      //             for (let i = 0; i < rankData.length; i++) {
      //                 let rankDict = rankData[i];
      // 
      //                 let newResult: TaiXiuRankResult = new TaiXiuRankResult();
      //                 newResult.rank = i + 1;
      //                 newResult.displayName = rankDict["displayName"];
      //                 newResult.amount = rankDict["total"];
      // 
      //                 this._rank.push(newResult);
      //             }
      //             this.showRank();
      //         });
      //     }
      // 
      //     public showRank() {
      //         this.item_views.forEach((item, index) => {
      //             let info = this._rank[index];
      //             if (info != null && info != undefined) {
      //                 item.node.opacity = 255;
      //                 item.show(info.rank, info.displayName, info.amount);
      //             } else {
      //                 item.node.opacity = 0;
      //             }
      //         });
      // 
      //         this.show();
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KimCuongBetHistoryItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Button, _decorator, Component, Color, StringUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
      Color = module.Color;
    }, function (module) {
      StringUtils = module.StringUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _temp;

      cclegacy._RF.push({}, "5236aWmDz1HfJWe1Ycug0qY", "KimCuongBetHistoryItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let KimCuongBetHistoryItemView = exports('default', (_dec = ccclass('KimCuongBetHistoryItemView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Button), _dec9 = property(Label), _dec(_class = (_class2 = (_temp = class KimCuongBetHistoryItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txt_phien_title", _descriptor, this);

          _initializerDefineProperty(this, "txt_phien_time", _descriptor2, this);

          _initializerDefineProperty(this, "txt_phien_datcuoc", _descriptor3, this);

          _initializerDefineProperty(this, "txt_phien_solinecuoc", _descriptor4, this);

          _initializerDefineProperty(this, "txt_phien_tongcuoc", _descriptor5, this);

          _initializerDefineProperty(this, "txt_phien_solinetrung", _descriptor6, this);

          _initializerDefineProperty(this, "btn_chitiet", _descriptor7, this);

          _initializerDefineProperty(this, "txt_phien_tienthang", _descriptor8, this);
        }

        show(sessionID, time, bet, numLine, totalBet, winNumLine, received, symbols, payoutLines, onShowDetail) {
          this.txt_phien_title.string = "#" + sessionID.toString();
          this.txt_phien_time.string = time.toString();
          this.txt_phien_datcuoc.string = StringUtils.formatNumber(bet);
          this.txt_phien_solinecuoc.string = numLine.toString();
          this.txt_phien_tongcuoc.string = totalBet.toString();
          this.txt_phien_solinetrung.string = winNumLine.toString();
          this.txt_phien_tienthang.color = Color.YELLOW;
          this.txt_phien_tienthang.string = StringUtils.formatNumber(received);
          this.btn_chitiet.node.on("click", () => {
            onShowDetail && onShowDetail(sessionID, symbols, payoutLines);
          });
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_title", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_time", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_datcuoc", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_solinecuoc", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_tongcuoc", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_solinetrung", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btn_chitiet", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_tienthang", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class)); //  * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
      //  */
      // // // Learn TypeScript:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // // Learn Attribute:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // // Learn life-cycle callbacks:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // // 
      // // import { GameCard } from "../../Utils/MauBinh_CardLib";
      // // import { StringUtils } from "../../Utils/StringUtils";
      // // import KimCuongGameView from "./KimCuongGameView";
      // // 
      // // const {ccclass, property} = cc._decorator;
      // // 
      // // @ccclass
      // // export default class KimCuongBetHistoryItemView extends cc.Component {
      // //     @property(cc.Label)
      // //     private txt_phien_title : cc.Label = null;
      // // 
      // //     @property(cc.Label)
      // //     private txt_phien_time : cc.Label = null;
      // // 
      // //     @property(cc.Label)
      // //     private txt_phien_datcuoc : cc.Label = null;
      // // 
      // //     @property(cc.Label)
      // //     private txt_phien_solinecuoc : cc.Label = null;
      // // 
      // //     @property(cc.Label)
      // //     private txt_phien_tongcuoc : cc.Label = null;
      // // 
      // //     @property(cc.Label)
      // //     private txt_phien_solinetrung : cc.Label = null;
      // // 
      // //     @property(cc.Button)
      // //     private btn_chitiet : cc.Button = null;
      // // 
      // //     @property(cc.Label)
      // //     private txt_phien_tienthang : cc.Label = null;
      // // 
      // //     public show(sessionID,time,bet,numLine,totalBet,winNumLine,received,symbols,payoutLines,onShowDetail){
      // //         this.txt_phien_title.string = "#" + sessionID.toString();
      // //         this.txt_phien_time.string = time.toString();
      // //         this.txt_phien_datcuoc.string = StringUtils.formatNumber(bet);
      // //         this.txt_phien_solinecuoc.string = numLine.toString();
      // //         this.txt_phien_tongcuoc.string = totalBet.toString();
      // //         this.txt_phien_solinetrung.string = winNumLine.toString();
      // //         this.txt_phien_tienthang.string = StringUtils.formatNumber(received);
      // // 
      // //         this.btn_chitiet.node.on("click",() => {
      // //             onShowDetail && onShowDetail(sessionID,symbols,payoutLines);
      // //         });
      // //     }
      // // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CardItem.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Sprite, Button, SpriteFrame, _decorator, Component, Vec3, Color, Tween, systemEvent;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      Button = module.Button;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      Color = module.Color;
      Tween = module.Tween;
      systemEvent = module.systemEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

      cclegacy._RF.push({}, "52d19nOijBGoqu+3PdUtl+l", "CardItem", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CardItem = exports('CardItem', (_dec = ccclass('CardItem'), _dec2 = property(Sprite), _dec3 = property(Button), _dec4 = property([SpriteFrame]), _dec(_class = (_class2 = (_temp = _class3 = class CardItem extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spr_card", _descriptor, this);

          _initializerDefineProperty(this, "button", _descriptor2, this);

          _initializerDefineProperty(this, "sprFrame_cards", _descriptor3, this);

          _defineProperty(this, "card", null);

          _defineProperty(this, "isSelected", false);

          _defineProperty(this, "locked_position", Vec3.ZERO);
        }

        setAsHideCard() {
          this.spr_card.spriteFrame = this.sprFrame_cards[0];
          this.spr_card.color = Color.WHITE;
        }

        setInteractable(isInteractable) {
          this.button.interactable = isInteractable;
        }

        reset() {
          Tween.stopAllByTarget(this.node);
          this.setAsHideCard();
          this.isSelected = false;
          this.setInteractable(false);
          this.hide();
        }

        onClick() {
          this.isSelected = !this.isSelected;
          let newPos = new Vec3(this.locked_position);
          newPos.y += this.isSelected ? 20 : 0;
          this.node.setPosition(newPos);

          if (this.isSelected) {
            systemEvent.emit(CardItem.CARD_SELECTED);
          }
        }

        getSelected() {
          return this.isSelected;
        }

        cannotBeSelected() {
          this.isSelected = false;
          this.node.setPosition(this.locked_position);
          this.setGray();
          this.setInteractable(false);
        }

        selected() {
          this.isSelected = true;
          let newPos = new Vec3(this.locked_position);
          newPos.y += this.isSelected ? 20 : 0;
          this.node.setPosition(newPos);
        }

        setGray() {
          this.spr_card.color = Color.GRAY;
        }

        lockPosition(target) {
          this.locked_position = new Vec3(target);
        }

        canBeSelected() {
          this.isSelected = false;
          this.node.setPosition(this.locked_position);
          this.spr_card.color = Color.WHITE;
          this.setInteractable(true);
        }

        show() {
          if (this.card != null) {
            let f = this.sprFrame_cards.filter(x => {
              var _this$card;

              return x.name.indexOf((_this$card = this.card) === null || _this$card === void 0 ? void 0 : _this$card.getResourceName()) >= 0;
            });

            if (f.length > 0) {
              this.spr_card.spriteFrame = f[0];
            } else {
              this.setAsHideCard();
            }
          }

          this.node.active = true;
          this.spr_card.color = Color.WHITE;
        }

        hide() {
          this.node.active = false;
          this.spr_card.color = Color.WHITE;
        }

        setCard(card) {
          this.card = card;
        }

        getCard() {
          return this.card;
        }

        getCode() {
          if (this.card == null) {
            return -1;
          }

          return this.card.serverCode;
        }

        setAsOnTop() {
          var _this$node$parent;

          this.node.setSiblingIndex(((_this$node$parent = this.node.parent) === null || _this$node$parent === void 0 ? void 0 : _this$node$parent.children.length) - 1);
        }

        isCanSelect() {
          return this.button.interactable;
        }

      }, _defineProperty(_class3, "CARD_SELECTED", "CARD_SELECTED"), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spr_card", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_cards", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameNetworkHandler.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './MiniGameNetworkHandler.ts', './GamePlatformManager.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, log, sys, url, GameConfigManager, MessageRequest, GamePlatformManager, GamePlayManager, NETWORK_STATE;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      sys = module.sys;
      url = module.url;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      MessageRequest = module.MessageRequest;
    }, function (module) {
      GamePlatformManager = module.GamePlatformManager;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
      NETWORK_STATE = module.NETWORK_STATE;
    }],
    execute: function () {
      cclegacy._RF.push({}, "536a9ly9BNIA79qh4u3TgwM", "GameNetworkHandler", undefined);

      class GameNetworkHandler {
        static init(wsURL) {
          log("GameNetworkHandler::Connecting to game server:" + wsURL);

          if (this.ws != null) {
            this.ws.onopen = null;
            this.ws.onclose = null;
            this.ws.onmessage = null;
            this.ws.onerror = null;
          }

          if (sys.ANDROID === sys.platform) {
            console.log("cuong check android!!"); //@ts-ignore

            this.ws = new WebSocket(wsURL, null, url.raw('resources/cacert.pem'));
          } else {
            this.ws = new WebSocket(wsURL);
          }

          this.ws.onopen = function (event) {
            log("GameNetworkHandler::Connected to game server " + wsURL + "," + this.readyState); // Login to game server

            let loginMessage = [];
            let loginInfo = {};
            loginInfo["info"] = GameConfigManager.loginInfo;
            loginInfo["signature"] = GameConfigManager.signature;
            loginInfo["pid"] = GamePlatformManager.getPlatformID();
            loginInfo["subi"] = true;
            loginMessage = [MessageRequest.LogIn_Type, "Simms", GameConfigManager.username, GameConfigManager.password, loginInfo];
            GameNetworkHandler.send(loginMessage);
          };

          this.ws.onmessage = function (event) {
            GamePlayManager.handleMessage(event.data);
          };

          this.ws.onerror = function (event) {
            log("GameNetworkHandler::Send Text fired an error");
          };

          this.ws.onclose = function (event) {
            log("GameNetworkHandler::WebSocket instance closed.");
            GameNetworkHandler.reconnect();
          };
        }

        static send(data) {
          GameNetworkHandler.ws && GameNetworkHandler.ws.send(JSON.stringify(data));
        }

        static close() {
          GameNetworkHandler.ws && GameNetworkHandler.ws.close();
        }

        static reconnect() {
          if (GamePlayManager.STATE == NETWORK_STATE.LOGGED_IN) {
            log("GameNetworkHandler::reconnect");
            GamePlayManager.STATE = NETWORK_STATE.UNLOGGED_IN;
            GamePlayManager.reconnect();
          }
        }

      }

      exports('GameNetworkHandler', GameNetworkHandler);
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { GlobalVariables } from "../Utils/GlobalVariables";
      // import { MessageRequest } from "./MiniGameNetworkHandler";
      // 
      // export class GameNetworkHandler {
      //     private static ws: WebSocket = null;
      // 
      //     public static init(wsURL) {
      //         cc.log("GameNetworkHandler::Connecting to game server:" + wsURL);
      // 
      //         if (this.ws != null) {
      //             this.ws.onopen = null;
      //             this.ws.onclose = null;
      //             this.ws.onmessage = null;
      //             this.ws.onerror = null;
      //         }
      // 
      //         this.ws = new WebSocket(wsURL);
      //         this.ws.onopen = function (event) {
      //             cc.log("GameNetworkHandler::Connected to game server " + wsURL + "," + this.readyState);
      // 
      //             // Login to game server
      //             let loginMessage = [];
      //             let username = cc.sys.localStorage.getItem("user_name");
      //             let password = cc.sys.localStorage.getItem("user_password");
      //             let info = cc.sys.localStorage.getItem("login_info");
      //             let signature = cc.sys.localStorage.getItem("login_signature");
      //             let loginInfo = {};
      //             loginInfo["info"] = info;
      //             loginInfo["signature"] = signature;
      //             loginInfo["pid"] = GlobalVariables.getPlatformID();
      //             loginInfo["subi"] = true;
      //             loginMessage = [MessageRequest.LogIn_Type, "Simms", username, password, loginInfo];
      //             GameNetworkHandler.send(loginMessage);
      //         };
      //         this.ws.onmessage = function (event) {
      //         };
      // 
      //         this.ws.onerror = function (event) {
      //             cc.log("GameNetworkHandler::Send Text fired an error");
      //         };
      //         this.ws.onclose = function (event) {
      //             cc.log("GameNetworkHandler::WebSocket instance closed.");
      //         };
      //     }
      // 
      //     public static send(data) {
      //         GameNetworkHandler.ws && GameNetworkHandler.ws.send(JSON.stringify(data));
      //     }
      // 
      //     public static close() {
      //         GameNetworkHandler.ws && GameNetworkHandler.ws.close();
      //     }
      // }

      _defineProperty(GameNetworkHandler, "ws", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InvitePopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './GameConfigManager.ts', './StringUtils.ts', './GlobalVariables.ts', './LobbyViewController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Button, Label, _decorator, CommonPopup, GameConfigManager, StringUtils, GlobalVariables, LobbyViewController, GamePlayManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      _decorator = module._decorator;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "538611JT0RAq5jphitE2lrB", "InvitePopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let InvitePopup = exports('InvitePopup', (_dec = ccclass('InvitePopup'), _dec2 = property(Button), _dec3 = property(Button), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec(_class = (_class2 = (_temp = class InvitePopup extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "btn_accept", _descriptor, this);

          _initializerDefineProperty(this, "btn_rejectall", _descriptor2, this);

          _initializerDefineProperty(this, "lbl_name", _descriptor3, this);

          _initializerDefineProperty(this, "lbl_money", _descriptor4, this);

          _initializerDefineProperty(this, "lbl_game", _descriptor5, this);

          _initializerDefineProperty(this, "lbl_bet", _descriptor6, this);

          _defineProperty(this, "gameID", GlobalVariables.LOBBY);

          _defineProperty(this, "roomID", null);

          _defineProperty(this, "roomPassword", null);
        }

        onLoad() {
          super.onLoad();
          this.btn_accept.node.on("click", () => {
            this.onClickOK();
          });
          this.btn_rejectall.node.on("click", () => {
            GameConfigManager.IS_REJECT_ALL = true;
            this.hide();
          });
        }

        display(name, money, gameID, bet, roomID, roomPassword) {
          this.gameID = gameID;
          this.roomID = roomID;
          this.roomPassword = roomPassword;
          this.lbl_name.string = name;
          this.lbl_money.string = StringUtils.formatNumber(money);

          switch (gameID) {
            case GlobalVariables.BAU_CUA_FULL:
              {
                this.lbl_game.string = "Bầu Cua";
                this.lbl_bet.node.active = false;
                break;
              }

            case GlobalVariables.XOCDIA:
              {
                this.lbl_game.string = "Xóc Dĩa";
                this.lbl_bet.node.active = false;
                break;
              }

            case GlobalVariables.TIENLEN:
              {
                this.lbl_game.string = "Tiến Lên MN";
                this.lbl_bet.node.active = true;
                this.lbl_bet.string = "Cược: " + StringUtils.formatMoneyNumber(bet);
                break;
              }

            case GlobalVariables.SAM:
              {
                this.lbl_game.string = "Sâm Lốc";
                this.lbl_bet.node.active = true;
                this.lbl_bet.string = "Cược: " + StringUtils.formatMoneyNumber(bet);
                break;
              }
          }

          this.show();
        }

        onClickOK() {
          switch (this.gameID) {
            case GlobalVariables.BAU_CUA_FULL:
              {
                var _LobbyViewController$;

                (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.playGame(this.gameID);
                break;
              }

            case GlobalVariables.XOCDIA:
              {
                var _LobbyViewController$2;

                (_LobbyViewController$2 = LobbyViewController.getInstance()) === null || _LobbyViewController$2 === void 0 ? void 0 : _LobbyViewController$2.playGame(this.gameID);
                break;
              }

            case GlobalVariables.TIENLEN:
              {
                if (this.roomID != null) {
                  LobbyViewController.getInstance().switchGameScreen(this.gameID);
                  GamePlayManager.joinRoom(this.roomID, "", this.roomPassword);
                }

                break;
              }

            case GlobalVariables.SAM:
              {
                if (this.roomID != null) {
                  LobbyViewController.getInstance().switchGameScreen(this.gameID);
                  GamePlayManager.joinRoom(this.roomID, "", this.roomPassword);
                }

                break;
              }
          }

          this.hide();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_accept", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_rejectall", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbl_name", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbl_money", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbl_game", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbl_bet", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DemLa_CardLib.ts", ['cc', './GlobalVariables.ts', './MauBinh_CardLib.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, GlobalVariables, GameCard;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      GameCard = module.GameCard;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "554dcR4AABPd4pSTlcTNNNU", "DemLa_CardLib", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let DemLa_CardLib = exports('default', (_dec = ccclass('DemLa_CardLib'), _dec(_class = class DemLa_CardLib {
        static getCombination(cards, n, r, vectorCombinationOfCards) {
          // A temporary array to store all combination one by one
          let cardsIn = [];

          for (let i = 0; i < r; i++) {
            let cardTemp = new GameCard();
            cardsIn.push(cardTemp);
          } // Print all combination using temprary array 'data[]'


          DemLa_CardLib.combinationUtil(cards, n, r, 0, cardsIn, 0, vectorCombinationOfCards);
        }
        /* arr[]  ---> Input Array
         n      ---> Size of input array
         r      ---> Size of a combination to be printed
         index  ---> Current index in data[]
         data[] ---> Temporary array to store current combination
         i      ---> index of current element in arr[]     */


        static combinationUtil(cards, n, r, index, cardsIn, i, vectorCombinationOfCards) {
          // Current cobination is ready, print it
          if (index == r) {
            let newVectorCard = [];
            cardsIn.forEach(x => {
              let c = new GameCard();
              c.decodeCard(x.serverCode, GlobalVariables.TIENLEN);
              newVectorCard.push(c);
            });
            vectorCombinationOfCards.push(newVectorCard);
            return newVectorCard;
          } // When no more elements are there to put in data[]


          if (i >= n) return; // current is included, put next at next location

          let card = cards[i];
          cardsIn[index] = card;
          DemLa_CardLib.combinationUtil(cards, n, r, index + 1, cardsIn, i + 1, vectorCombinationOfCards); // current is excluded, replace it with next (Note that
          // i+1 is passed, but index is not changed)

          DemLa_CardLib.combinationUtil(cards, n, r, index, cardsIn, i + 1, vectorCombinationOfCards);
        }

        static sortVector(vector, reverse) {
          if (reverse) {
            let i = 0;

            while (i < vector.length - 1) {
              let card1 = vector[i];
              let N1 = card1.N;
              let S1 = card1.S;
              let j;

              for (j = i + 1; j < vector.length; j++) {
                let card2 = vector[j];
                let N2 = card2.N;
                let S2 = card2.S;

                if (N1 > N2) {
                  let temp = card1;
                  vector[i] = vector[j];
                  vector[j] = temp;
                  i = 0;
                  break;
                } else if (N1 == N2) {
                  if (S1 < S2) {
                    let temp = card1;
                    vector[i] = vector[j];
                    vector[j] = temp;
                    i = 0;
                    break;
                  }
                }
              }

              if (i != 0 || j == vector.length) {
                i++;
              }
            }
          } else {
            let i = 0;

            while (i < vector.length - 1) {
              let card1 = vector[i];
              let N1 = card1.N;
              let S1 = card1.S;
              let j;

              for (j = i + 1; j < vector.length; j++) {
                let card2 = vector[j];
                let N2 = card2.N;
                let S2 = card2.S;

                if (N1 > N2) {
                  let temp = card1;
                  vector[i] = vector[j];
                  vector[j] = temp;
                  i = 0;
                  break;
                } else if (N1 == N2) {
                  if (S1 > S2) {
                    let temp = card1;
                    vector[i] = vector[j];
                    vector[j] = temp;
                    i = 0;
                    break;
                  }
                }
              }

              if (i != 0 || j == vector.length) {
                i++;
              }
            }
          }

          return vector;
        }

        static sortList(list) {
          if (list.length == 0) {
            return;
          }

          let i = 0;

          while (i < list.length - 1) {
            let p1 = list[i];
            let j;

            for (j = i + 1; j < list.length; j++) {
              let p2 = list[j];

              if (p1 > p2) {
                let temp = p1;
                list[i] = list[j];
                list[j] = temp;
                i = 0;
                break;
              }
            }

            if (i != 0 || j == list.length) {
              i++;
            }
          }

          return list;
        }

        static getRecommendCards2(list, myCards) {
          let _vectorCombinationOfCards = [];

          for (let i = 1; i <= myCards.length; i++) {
            DemLa_CardLib.getCombination(myCards, myCards.length, i, _vectorCombinationOfCards);
          }

          let combinatedCards = [];

          _vectorCombinationOfCards.forEach(vectorCard => {
            vectorCard = DemLa_CardLib.sortVector(vectorCard, false);

            if (DemLa_CardLib.isPairs(vectorCard) || DemLa_CardLib.isStraight(vectorCard) || DemLa_CardLib.isThreePairsStraight(vectorCard) || DemLa_CardLib.isFourPairsStraight(vectorCard) || DemLa_CardLib.isFourOfAKind(vectorCard) || DemLa_CardLib.isThreeOfAKind(vectorCard)) {
              combinatedCards.push(vectorCard);
            }
          });

          let isIn = (arrCard, card) => {
            return arrCard.filter(c => c.serverCode == card.serverCode).length > 0;
          };

          let recommendCards = [];

          for (let i = 0; i < combinatedCards.length; i++) {
            let combinatedCard = combinatedCards[i];

            if (combinatedCard.filter(x => isIn(list, x)).length >= list.length) {
              if (combinatedCards.length > recommendCards.length) {
                recommendCards = combinatedCard;
              }
            }
          }

          return recommendCards;
        }

        static getRecommendCards(list, myCards) {
          list = DemLa_CardLib.sortVector(list, false);
          let cards = [];

          if (list.length == 1) {
            let card = list[0];

            if (card.N == 15) {
              // neu la 2
              // tim tu quy
              cards = DemLa_CardLib.getHigherFours2(0, myCards);
              if (cards.length > 0) return cards; // tim 4 doi thong
              // vi tim 4 doi thong bat ky nen cho card_max = 3 bich
              //            GameCard *cmax = new GameCard();

              let cmax = new GameCard();
              cmax.N = 3;
              cmax.S = 1;
              cards = DemLa_CardLib.getHigherFourPairs(cmax, myCards);
              if (cards.length > 0) return cards; // tim 3 doi thong

              cards = DemLa_CardLib.getHigherThreePairs(cmax, myCards);
              if (cards.length > 0) return cards; // tim cay 2 lon hon

              for (let i = 0; i < myCards.length; i++) {
                let icard = myCards[i];

                if (icard.N == 15 && icard.S > card.S) {
                  cards.push(icard);
                  return cards;
                }
              }
            } else {
              for (let i = 0; i < myCards.length; i++) {
                let c = myCards[i];

                if (c.N > card.N) {
                  cards.push(c);
                  break;
                }

                if (c.N == card.N && c.S > card.S) {
                  cards.push(c);
                  break;
                }
              }
            }

            return cards;
          } else if (DemLa_CardLib.isPairs(list)) {
            // tim doi 2 lon hon
            cards = DemLa_CardLib.getHigherPairs(list, myCards);

            if (cards.length > 0) {
              return cards;
            } else if (list[0].N == 15) {
              // neu la doi 2
              // tim tu quy
              cards = DemLa_CardLib.getHigherFours2(0, myCards);

              if (cards.length > 0) {
                return cards;
              } // tim 4 doi thong
              // vi tim 4 doi thong bat ky nen cho card_max = 3 bich


              let cmax = new GameCard();
              cmax.N = 3;
              cmax.S = 1;
              cards = DemLa_CardLib.getHigherFourPairs(cmax, myCards);
              if (cards.length > 0) return cards;
            }
          } else if (DemLa_CardLib.isThreeOfAKind(list)) {
            return DemLa_CardLib.getHigherThrees(list, myCards);
          } else if (DemLa_CardLib.isFourOfAKind(list)) {
            cards = DemLa_CardLib.getHigherFours(list, myCards);

            if (cards.length > 0) {
              return cards;
            } // tim 4 doi thong
            // vi tim 4 doi thong bat ky nen cho card_max = 3 bich


            let cmax = new GameCard();
            cmax.N = 3;
            cmax.S = 1;
            cards = DemLa_CardLib.getHigherFourPairs(cmax, myCards);
            if (cards.length > 0) return cards; //        return getHigherFours(list, myCards);
          } else if (DemLa_CardLib.isThreePairsStraight(list)) {
            cards = DemLa_CardLib.getHigherThreePairs2(list, myCards);

            if (cards.length < 1) {
              let cmax = new GameCard();
              cmax.N = 3;
              cmax.S = 1;
              cards = DemLa_CardLib.getHigherFourPairs(cmax, myCards);
            }

            if (cards.length < 1) return DemLa_CardLib.getHigherFours2(0, myCards);
          } else if (DemLa_CardLib.isStraight(list)) {
            return DemLa_CardLib.getHigherStraight(list, myCards);
          } else if (DemLa_CardLib.isFourPairsStraight(list)) {
            return DemLa_CardLib.getHigherFourPairs2(list, myCards);
          }

          return cards;
        }

        static isStraight(cards) {
          let isStraight = true;
          if (cards.length < 3) return false;

          for (let i = 0; i < cards.length - 1; i++) {
            let n1 = cards[i].N;
            let n2 = cards[i + 1].N;
            if (n1 == 15 || n2 == 15) return false;
            isStraight = isStraight && n1 + 1 == n2;
          }

          return isStraight;
        }

        static isStraight_Sam(cards) {
          // sanh 2,3,4 Q,K,A
          let valueList1 = []; // sanh 1,2,3,4

          let valueList2 = [];
          cards.forEach(card => {
            valueList1.push(card.N == 15 ? 2 : card.N);
            valueList2.push(card.N == 15 ? 2 : card.N == 14 ? 1 : card.N);
          });

          if (DemLa_CardLib.checkSanh_sam(valueList1)) {
            return true;
          }

          if (DemLa_CardLib.checkSanh_sam(valueList2)) {
            return true;
          }

          return false;
        }

        static checkSanh_sam(cards) {
          if (cards.length < 3) return false; //    cards.Sort();

          cards = DemLa_CardLib.sortList(cards);
          let isSanh = true;
          let n_start = cards[0];

          for (let i = 1; i < cards.length; i++) {
            isSanh = isSanh && cards[i] == n_start + i;
          }

          return isSanh;
        }

        static loaiboxamvatuquy(myCardsIn) {
          // luu y myCardsIn da sort
          //    myCardsIn.Sort(delegate(Card x, Card y) {
          //        if(x.N> y.N)
          //            return 1;
          //        if(x.N == y.N)
          //            return y.S- x.S;
          //        return -1;
          //    });
          myCardsIn = DemLa_CardLib.sortVector(myCardsIn, true);
          let list = [];
          let n = 0;
          let c = 0; // so lan gap cay n
          // danh sach nhung cay bai bi bo

          for (let i = 0; i < myCardsIn.length; i++) {
            if (n == myCardsIn[i].N) {
              c++;
              if (c < 3) list.push(myCardsIn[i]);
            } else {
              c = 1;
              n = myCardsIn[i].N;
              list.push(myCardsIn[i]);
            }
          } // sort lai input list
          //    myCardsIn.Sort(ComparisionTienLen);


          myCardsIn = DemLa_CardLib.sortVector(myCardsIn, false);
          return list;
        }

        static loaiboxamdoivatuquy(myCardsIn) {
          // luu y myCardsIn da sort
          //    myCardsIn.Sort(delegate(Card x, Card y) {
          //        if(x.N> y.N)
          //            return 1;
          //        if(x.N == y.N)
          //            return y.S- x.S; // intent xep nguoc
          //        return -1;
          //    });
          myCardsIn = DemLa_CardLib.sortVector(myCardsIn, true);
          let list = [];
          let n = 0;
          let c = 0; // so lan gap cay n
          // danh sach nhung cay bai bi bo

          for (let i = 0; i < myCardsIn.length; i++) {
            if (n == myCardsIn[i].N) {
              c++;
              if (c < 2) list.push(myCardsIn[i]);
            } else {
              c = 1;
              n = myCardsIn[i].N;
              list.push(myCardsIn[i]);
            }
          } // sort lai input list
          //    myCardsIn.Sort(ComparisionTienLen);


          myCardsIn = DemLa_CardLib.sortVector(myCardsIn, false);
          return list;
        }

        static isPairs(list) {
          if (list.length != 2) return false;
          return list[0].N == list[1].N;
        }

        static isThreeOfAKind(list) {
          if (list.length != 3) return false;
          return list[0].N == list[1].N && list[1].N == list[2].N;
        }

        static isFourOfAKind(list) {
          if (list.length != 4) return false;
          return list[0].N == list[1].N && list[1].N == list[2].N && list[2].N == list[3].N;
        }

        static isThreePairsStraight(list) {
          if (list.length != 6) return false;
          list.forEach(card => {
            if (card.N == 15) {
              return false;
            }
          });
          return list[0].N == list[1].N && list[1].N == list[2].N - 1 && list[1].N == list[3].N - 1 && list[1].N == list[4].N - 2 && list[1].N == list[5].N - 2;
        }

        static isFourPairsStraight(list) {
          if (list.length != 8) return false;
          list.forEach(card => {
            if (card.N == 15) {
              return false;
            }
          });
          return list[0].N == list[1].N && list[1].N == list[2].N - 1 && list[1].N == list[3].N - 1 && list[1].N == list[4].N - 2 && list[1].N == list[5].N - 2 && list[1].N == list[6].N - 3 && list[1].N == list[7].N - 3;
        }

        static getHigherStraight(list, myCardsIn, sam = false) {
          let myCards = DemLa_CardLib.loaiboxamdoivatuquy(myCardsIn); //    myCards.Sort(ComparisionTienLen);

          myCardsIn = DemLa_CardLib.sortVector(myCardsIn, false);
          let straight = [];
          if (myCards.length < list.length) return straight;

          for (let i = 0; i < myCards.length - 1; i++) {
            if (myCards[i].N < list[0].N) continue;
            if (myCards[i].N == list[0].N && sam) continue;
            if (myCards.length - i < list.length) break;

            for (let j = 0; j < list.length; j++) {
              let k = j;

              if (j > 0) {
                while (i + k < myCards.length - 1 && straight[j - 1].N == myCards[i + k].N) k++; // avoid to add same N into straight

              }

              if (j < list.length - 1) {
                straight.push(myCards[i + k]);
              } else if (myCards[i + k].N == list[j].N && myCards[i + k].S < list[j].S) {
                let s = k;

                while (i + s < myCards.length - 1 && list[j].N == myCards[i + s].N && myCards[i + s].S < list[j].S) s++;

                if (s > k) s--;
                straight.push(myCards[i + s]); // find the bigger S for last card if have the same N
              } else {
                straight.push(myCards[i + k]);
              }
            } //			for (int st = 0; st < straight.Count; st ++)
            //			{
            //				Debug.Log("Straight "+st+" " + straight[st].N);
            //			}


            if (straight.length == list.length && (sam ? DemLa_CardLib.isStraight_Sam(straight) : DemLa_CardLib.isStraight(straight))) {
              if (straight[0].N == list[0].N) {
                if (straight[list.length - 1].S > list[list.length - 1].S) {
                  return straight;
                } else {
                  straight = [];
                }
              } else {
                return straight;
              }
            } else {
              straight = [];
            }
          }

          return straight;
        }

        static getHigherPairs(list, myCards, sam = false) {
          let pairs = [];
          if (myCards.length < 2) return pairs; //    myCards.Sort(ComparisionTienLen);

          myCards = DemLa_CardLib.sortVector(myCards, false); //		Debug.LogError("N :"+ list.at(0).N);

          for (let i = 0; i < myCards.length - 1; i++) {
            if (myCards[i].N < list[0].N) continue;
            if (myCards[i].N == list[0].N && sam) continue;

            if (myCards[i].N == myCards[i + 1].N) {
              if (myCards[i].N == list[0].N) {
                if (myCards[i + 1].S > list[1].S) {
                  pairs.push(myCards[i]);
                  pairs.push(myCards[i + 1]);
                  return pairs;
                }
              } else {
                pairs.push(myCards[i]);
                pairs.push(myCards[i + 1]);
                return pairs;
              }
            }
          }

          return pairs;
        }

        static getHigherThrees(list, myCards, sam = false) {
          let threes = [];
          if (myCards.length < 3) return threes; //    myCards.Sort(ComparisionTienLen);

          myCards = DemLa_CardLib.sortVector(myCards, false);

          for (let i = 0; i < myCards.length - 2; i++) {
            if (myCards[i].N < list[0].N) continue;
            if (myCards[i].N == list[0].N && sam) continue;

            if (myCards[i].N == myCards[i + 1].N && myCards[i + 1].N == myCards[i + 2].N) {
              if (myCards[i].N == list[0].N) {
                if (myCards[i + 2].S > list[2].S) {
                  threes.push(myCards[i]);
                  threes.push(myCards[i + 1]);
                  threes.push(myCards[i + 2]);
                  return threes;
                }
              } else {
                threes.push(myCards[i]);
                threes.push(myCards[i + 1]);
                threes.push(myCards[i + 2]);
                return threes;
              }
            }
          }

          return threes;
        }

        static getHigherFours(list, myCards) {
          return DemLa_CardLib.getHigherFours2(list[0].N, myCards);
        }

        static getHigherFours2(n, myCards) {
          let fours = [];
          if (myCards.length < 4) return fours; //    myCards.Sort(ComparisionTienLen);

          myCards = DemLa_CardLib.sortVector(myCards, false);

          for (let i = 0; i < myCards.length - 3; i++) {
            if (myCards[i].N < n) continue;

            if (myCards[i].N == myCards[i + 1].N && myCards[i + 1].N == myCards[i + 2].N && myCards[i + 2].N == myCards[i + 3].N) {
              fours.push(myCards[i]);
              fours.push(myCards[i + 1]);
              fours.push(myCards[i + 2]);
              fours.push(myCards[i + 3]);
              return fours;
            }
          }

          return fours;
        }

        static getHigherThreePairs(cmax, myCardsIn, sam = false) {
          // bo tat ca cac xam va tu quy trong list cua minh
          //    myCardsIn.Sort(ComparisionTienLen);
          myCardsIn = DemLa_CardLib.sortVector(myCardsIn, false);
          let myCards = DemLa_CardLib.loaiboxamvatuquy(myCardsIn); //		Debug.LogError("cmax: "+ cmax->N +" S: "+ cmax.S);

          let sixs = [];
          if (myCards.length < 6) return sixs;

          for (let i = 0; i < myCards.length - 5; i++) {
            if (myCards[i].N < cmax.N - 2) continue;
            if (myCards[i].N == cmax.N - 2 && sam) continue;

            if (myCards[i].N == myCards[i + 1].N && myCards[i].N == myCards[i + 2].N - 1 && myCards[i].N == myCards[i + 3].N - 1 && myCards[i].N == myCards[i + 4].N - 2 && myCards[i].N == myCards[i + 5].N - 2 && myCards[i + 5].N != 15) {
              if (myCards[i].N == cmax.N - 2) {
                if (myCards[i + 5].S > cmax.S) {
                  sixs.push(myCards[i]);
                  sixs.push(myCards[i + 1]);
                  sixs.push(myCards[i + 2]);
                  sixs.push(myCards[i + 3]);
                  sixs.push(myCards[i + 4]);
                  sixs.push(myCards[i + 5]);
                  return sixs;
                }
              } else {
                sixs.push(myCards[i]);
                sixs.push(myCards[i + 1]);
                sixs.push(myCards[i + 2]);
                sixs.push(myCards[i + 3]);
                sixs.push(myCards[i + 4]);
                sixs.push(myCards[i + 5]);
                return sixs;
              }
            }
          }

          return sixs;
        }

        static getHigherFourPairs(cmax, myCardsIn, sam = false) {
          // bo tat ca cac xam va tu quy trong list cua minh
          //    myCardsIn.Sort(ComparisionTienLen);
          myCardsIn = DemLa_CardLib.sortVector(myCardsIn, false);
          let myCards = DemLa_CardLib.loaiboxamvatuquy(myCardsIn); //		Debug.LogError("cmax: "+ cmax->N +" S: "+ cmax.S);

          let eights = [];
          if (myCards.length < 8) return eights;

          for (let i = 0; i < myCards.length - 7; i++) {
            if (myCards[i].N < cmax.N - 3) continue;
            if (myCards[i].N == cmax.N - 3 && sam) continue;

            if (myCards[i].N == myCards[i + 1].N && myCards[i].N == myCards[i + 2].N - 1 && myCards[i].N == myCards[i + 3].N - 1 && myCards[i].N == myCards[i + 4].N - 2 && myCards[i].N == myCards[i + 5].N - 2 && myCards[i].N == myCards[i + 6].N - 3 && myCards[i].N == myCards[i + 7].N - 3) {
              if (myCards[i].N == cmax.N - 3) {
                if (myCards[i + 7].S > cmax.S) {
                  eights.push(myCards[i]);
                  eights.push(myCards[i + 1]);
                  eights.push(myCards[i + 2]);
                  eights.push(myCards[i + 3]);
                  eights.push(myCards[i + 4]);
                  eights.push(myCards[i + 5]);
                  eights.push(myCards[i + 6]);
                  eights.push(myCards[i + 7]);
                  return eights;
                }
              } else {
                eights.push(myCards[i]);
                eights.push(myCards[i + 1]);
                eights.push(myCards[i + 2]);
                eights.push(myCards[i + 3]);
                eights.push(myCards[i + 4]);
                eights.push(myCards[i + 5]);
                eights.push(myCards[i + 6]);
                eights.push(myCards[i + 7]);
                return eights;
              }
            }
          }

          return eights;
        }

        static getHigherThreePairs2(list, myCards, sam = false) {
          return DemLa_CardLib.getHigherThreePairs(list[list.length - 1], myCards, sam);
        }

        static getHigherFourPairs2(list, myCards, sam = false) {
          return DemLa_CardLib.getHigherFourPairs(list[list.length - 1], myCards, sam);
        }

      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameSettingPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './SettingPopup.ts', './PopupController.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Button, Toggle, _decorator, sys, GameConfigManager, SettingPopup, PopupController;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Toggle = module.Toggle;
      _decorator = module._decorator;
      sys = module.sys;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      SettingPopup = module.SettingPopup;
    }, function (module) {
      PopupController = module.PopupController;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "56c314w3bdIxLa5wTut4S7b", "GameSettingPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GameSettingPopup = exports('GameSettingPopup', (_dec = ccclass('GameSettingPopup'), _dec2 = property(Button), _dec3 = property(Button), _dec4 = property(Toggle), _dec5 = property(Toggle), _dec(_class = (_class2 = (_temp = class GameSettingPopup extends SettingPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "btn_hotro", _descriptor, this);

          _initializerDefineProperty(this, "btn_livechat", _descriptor2, this);

          _initializerDefineProperty(this, "tog_sfx", _descriptor3, this);

          _initializerDefineProperty(this, "tog_music", _descriptor4, this);
        }

        onLoad() {
          var _this$btn_hotro, _this$btn_livechat, _this$tog_sfx, _this$tog_music;

          super.onLoad();
          (_this$btn_hotro = this.btn_hotro) === null || _this$btn_hotro === void 0 ? void 0 : _this$btn_hotro.node.on("click", () => {
            var _PopupController$getI;

            (_PopupController$getI = PopupController.getInstance()) === null || _PopupController$getI === void 0 ? void 0 : _PopupController$getI.showCommonPopup("Vui lòng gọi đến số: " + GameConfigManager.hotlineNumber, () => {
              var _PopupController$getI2;

              (_PopupController$getI2 = PopupController.getInstance()) === null || _PopupController$getI2 === void 0 ? void 0 : _PopupController$getI2.hideCommonPopup();
            });
          });
          (_this$btn_livechat = this.btn_livechat) === null || _this$btn_livechat === void 0 ? void 0 : _this$btn_livechat.node.on("click", () => {
            sys.openURL(GameConfigManager.liveChatURL);
          });
          (_this$tog_sfx = this.tog_sfx) === null || _this$tog_sfx === void 0 ? void 0 : _this$tog_sfx.node.on("click", () => {
            localStorage.setItem("enableSound", this.tog_sfx.isChecked.toString());
          });
          (_this$tog_music = this.tog_music) === null || _this$tog_music === void 0 ? void 0 : _this$tog_music.node.on("click", () => {
            localStorage.setItem("enableBackgroundMusic", this.tog_music.isChecked.toString());
          });
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_hotro", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_livechat", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "tog_sfx", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "tog_music", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CCMiniGameRoot.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './MiniGameNetworkHandler.ts', './MiniGameNodeController.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, game, view, GameConfigManager, MiniGameNetworkHandler, MessageRequest, MiniGameNodeController;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      game = module.game;
      view = module.view;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      MiniGameNetworkHandler = module.MiniGameNetworkHandler;
      MessageRequest = module.MessageRequest;
    }, function (module) {
      MiniGameNodeController = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3, _temp;

      cclegacy._RF.push({}, "5756fh1+PRNDr6zBsRB0hbb", "CCMiniGameRoot", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CCMiniGameRoot = exports('CCMiniGameRoot', (_dec = ccclass('CCMiniGameRoot'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = _class3 = class CCMiniGameRoot extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "mini_game_node", _descriptor, this);

          _defineProperty(this, "mini_game_node_instance", null);

          _defineProperty(this, "is_game_run_in_background", false);
        }

        static getInstance() {
          return CCMiniGameRoot.instance;
        }

        closeMiniGameNode() {
          if (this.mini_game_node_instance) {
            this.mini_game_node_instance.node.active = false;
            this.mini_game_node_instance.forceAllMachineStop();
            this.mini_game_node_instance.closeAll();
          }
        }

        onLoad() {
          var _this$mini_game_node;

          game.setFrameRate(120);
          this.mini_game_node_instance = (_this$mini_game_node = this.mini_game_node) === null || _this$mini_game_node === void 0 ? void 0 : _this$mini_game_node.getComponent(MiniGameNodeController);
          CCMiniGameRoot.WIN_SIZE_WIDTH = view.getCanvasSize().width / view.getScaleX();
          CCMiniGameRoot.WIN_SIZE_HEIGHT = view.getCanvasSize().height / view.getScaleY();
          game.addPersistRootNode(this.node);
          CCMiniGameRoot.instance = this;
        }

        onDestroy() {
          game.removePersistRootNode(this.node);
        }

        openMiniGameNode() {
          if (this.mini_game_node_instance) {
            var _MiniGameNodeControll;

            this.mini_game_node_instance.node.active = true;
            (_MiniGameNodeControll = MiniGameNodeController.getInstance()) === null || _MiniGameNodeControll === void 0 ? void 0 : _MiniGameNodeControll.forceAllMachineStop(false);
          }
        }

        login() {
          MiniGameNetworkHandler.init(GameConfigManager.MiniWSURL);
        }

        logout() {
          let logoutMessage = [MessageRequest.LogOut_Type, "MiniGame"];
          MiniGameNetworkHandler.send(logoutMessage);
        }

      }, _defineProperty(_class3, "instance", null), _defineProperty(_class3, "WIN_SIZE_WIDTH", 0), _defineProperty(_class3, "WIN_SIZE_HEIGHT", 0), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "mini_game_node", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import Downloader from "./Downloader/Downloader";
      // import DragonBallGameView from "./Games/DragonBall/DragonBallGameView";
      // import KimCuongGameView from "./Games/KimCuong/KimCuongGameView";
      // import MiniPokerGameView from "./Games/MiniPoker/MiniPokerGameView";
      // import MiniGameNodeController from "./MiniGameNodeController";
      // import { MiniGameNetworkHandler } from "./Network/MiniGameNetworkHandler";
      // import CCMiniGameCommonPopup from "./Utils/CCMiniGameCommonPopup";
      // import { GlobalVariables } from "./Utils/GlobalVariables";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class CCMiniGameRoot extends cc.Component {
      //     @property(cc.Node)
      //     private mini_game_node: cc.Node = null;
      // 
      //     @property(CCMiniGameCommonPopup) 
      //     private ccMiniGameCommonPopup : CCMiniGameCommonPopup = null;
      // 
      //     private mini_game_node_instance : MiniGameNodeController = null;
      // 
      //     private static instance : CCMiniGameRoot = null;
      // 
      //     private is_game_run_in_background = false;
      // 
      //     private wsMiniGameURL: string = "";
      // 
      //     public static WIN_SIZE_WIDTH = 0;
      //     public static WIN_SIZE_HEIGHT = 0;
      // 
      //     public static getInstance() {
      //         return CCMiniGameRoot.instance;
      //     }
      // 
      //     private closeMiniGameNode() {
      //         if(this.mini_game_node_instance) {
      //             this.mini_game_node_instance.turnOffAutoSpin();
      //             this.mini_game_node_instance.closeAll();
      //         }
      //     }
      // 
      //     private connectToServer(){
      //         MiniGameNetworkHandler.init(this.wsMiniGameURL);
      //     }
      // 
      //     onLoad() {
      //         this.mini_game_node_instance = this.mini_game_node.getComponent(MiniGameNodeController);
      // 
      //         cc.game.on(cc.game.EVENT_SHOW, () => {        
      //             this.reconnect();
      //             this.is_game_run_in_background = false;
      //         });
      // 
      //         cc.game.on(cc.game.EVENT_HIDE, () => {
      //             this.is_game_run_in_background = true;
      //             this.closeMiniGameNode();
      //         });
      // 
      //         CCMiniGameRoot.WIN_SIZE_WIDTH = cc.view.getCanvasSize().width / cc.view.getScaleX();
      //         CCMiniGameRoot.WIN_SIZE_HEIGHT = cc.winSize.height;
      // 
      //         cc.game.addPersistRootNode(this.node);
      // 
      //         CCMiniGameRoot.instance = this;
      // 
      //         if(!cc.sys.isBrowser) {
      //             var localConfig = jsb.fileUtils.getStringFromFile("ccAppConfig.json");
      //             cc.log("ccAppConfig:",localConfig);
      //             if (localConfig) {
      //                 localConfig = JSON.parse(localConfig);
      //                 this.wsMiniGameURL = localConfig["WS_SERVER_MINI_GAME_URL"];
      //                 Downloader.HOST_URL = localConfig["RESOURCE_MINI_GAME_URL"];
      //                 GlobalVariables.GET_LOGIN_INFO = localConfig["GET_LOGIN_INFO_URL"];
      //                 GlobalVariables.BRANCH = localConfig["BRAND"];
      //             }
      //             else {
      //                 this.wsMiniGameURL = "wss://websocket.swinamz.com/websocket";
      //                 // this.wsMiniGameURL = "wss://websocket.xwin.info/websocket";
      //                 Downloader.HOST_URL = "https://api.swinamz.com/images/uploads/creator/";
      //                 GlobalVariables.GET_LOGIN_INFO = "https://api.vinclub-shopify.com/id?command=loginAccessToken";
      //                 // GlobalVariables.GET_LOGIN_INFO = "https://api.xwin.info/id?command=loginAccessToken";
      //                 GlobalVariables.BRANCH = "sun.win";
      //             }
      //         } else {
      //             if(MiniGameNodeController.IS_ENV == "staging") {
      //                 this.wsMiniGameURL = "wss://websocket.xwin.info/websocket";
      //                 GlobalVariables.GET_LOGIN_INFO = "https://api.xwin.info/id?command=loginAccessToken";
      //             } else {
      //                 this.wsMiniGameURL = "wss://websocket.swinamz.com/websocket";
      //                 GlobalVariables.GET_LOGIN_INFO = "https://api.vinclub-shopify.com/id?command=loginAccessToken";
      //             }
      //             
      //             Downloader.HOST_URL = "https://api.swinamz.com/images/uploads/creator/";
      //             GlobalVariables.BRANCH = "sun.win";
      //         }
      //         
      //         this.connectToServer();
      //     }
      // 
      //     onDestroy() {
      //         cc.game.removePersistRootNode(this.node);
      //     }
      // 
      //     openMiniGameNode() {
      //         if(this.mini_game_node_instance) {
      //             this.mini_game_node_instance.node.active = true;
      // 
      //             MiniGameNodeController.getInstance().forceAllMachineStop(false);
      //         }
      //     }
      // 
      //     reconnect() {
      //         this.connectToServer();
      //     }
      // 
      //     showPopup(message,closeCb,confirmCb) {
      //         this.ccMiniGameCommonPopup.show(message,closeCb,confirmCb);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KimCuongNoHuView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts', './BlinkCmp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, Sprite, Label, _decorator, Component, Tween, Vec3, tween, UIOpacity, StringUtils, BlinkCmp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Sprite = module.Sprite;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      BlinkCmp = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "5e426fc6mVOQqFA8Eqca/We", "KimCuongNoHuView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let KimCuongNoHuView = exports('default', (_dec = ccclass('KimCuongNoHuView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Sprite), _dec5 = property(BlinkCmp), _dec6 = property(Sprite), _dec7 = property(Label), _dec(_class = (_class2 = (_temp = class KimCuongNoHuView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "root", _descriptor, this);

          _initializerDefineProperty(this, "black_screen", _descriptor2, this);

          _initializerDefineProperty(this, "noHuMoneyBg", _descriptor3, this);

          _initializerDefineProperty(this, "glow", _descriptor4, this);

          _initializerDefineProperty(this, "finishFx", _descriptor5, this);

          _initializerDefineProperty(this, "nohu_win_amount", _descriptor6, this);

          _defineProperty(this, "win_amount_tween", null);

          _defineProperty(this, "activated_click", false);
        }

        onLoad() {
          this.black_screen.on("click", () => {
            if (!this.activated_click) return;
            this.hide();
          });
        }

        activeClick() {
          this.black_screen.active = true;
          this.activated_click = true;
        }

        show(win_amount) {
          var _this$noHuMoneyBg, _this$finishFx, _this$glow, _this$noHuMoneyBg2;

          this.root.active = true;
          this.black_screen.active = true;
          this.activated_click = false;
          Tween.stopAllByTarget((_this$noHuMoneyBg = this.noHuMoneyBg) === null || _this$noHuMoneyBg === void 0 ? void 0 : _this$noHuMoneyBg.node);
          Tween.stopAllByTarget((_this$finishFx = this.finishFx) === null || _this$finishFx === void 0 ? void 0 : _this$finishFx.node);
          Tween.stopAllByTarget((_this$glow = this.glow) === null || _this$glow === void 0 ? void 0 : _this$glow.node);
          this.win_amount_tween && this.win_amount_tween.stop();
          this.finishFx.node.setScale(new Vec3(0.2, 0.2, 0.2));
          let finishAction = tween(this.finishFx.node).sequence(tween().to(0.3, {
            scale: new Vec3(1.3, 1.3, 1.3)
          }), tween().to(0.3, {
            scale: Vec3.ONE
          }));
          finishAction.start();
          let startPos = new Vec3(this.noHuMoneyBg.node.position);
          startPos.y = -485;
          this.noHuMoneyBg.node.setPosition(startPos);
          let moveAction = tween((_this$noHuMoneyBg2 = this.noHuMoneyBg) === null || _this$noHuMoneyBg2 === void 0 ? void 0 : _this$noHuMoneyBg2.node).sequence(tween().delay(0.6), tween().to(0.3, {
            position: new Vec3(0, -260, 0)
          }));
          moveAction.start();
          this.glow.run();
          let obj = {
            a: 0
          };
          this.win_amount_tween = tween(obj).to(2, {
            a: win_amount
          }, {
            progress: (start, end, current, ratio) => {
              this.nohu_win_amount.string = StringUtils.formatNumber(Math.floor(current));
              return start + (end - start) * ratio;
            }
          }).call(() => this.nohu_win_amount.string = StringUtils.formatNumber(Math.floor(win_amount))).start();
          this.node.getComponent(UIOpacity).opacity = 255;
        }

        hide() {
          this.black_screen.active = false;
          this.activated_click = false;
          Tween.stopAllByTarget(this.node);
          this.node.getComponent(UIOpacity).opacity = 255;
          let fade = tween(this.node.getComponent(UIOpacity)).to(0.5, {
            opacity: 1
          }).call(() => {
            this.root.active = false;
          });
          fade.start();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "black_screen", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "noHuMoneyBg", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "glow", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "finishFx", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nohu_win_amount", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class)); //  * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
      //  */
      // // // Learn TypeScript:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // // Learn Attribute:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // // Learn life-cycle callbacks:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // // 
      // // import { GameCard } from "../../Utils/MauBinh_CardLib";
      // // import { StringUtils } from "../../Utils/StringUtils";
      // // import BlinkCmp from "../TaiXiu/BlinkCmp";
      // // 
      // // const { ccclass, property } = cc._decorator;
      // // 
      // // @ccclass
      // // export default class KimCuongNoHuView extends cc.Component {
      // //     @property(cc.Node)
      // //     private black_screen: cc.Node = null;
      // // 
      // //     @property(cc.Sprite)
      // //     private noHuMoneyBg: cc.Sprite = null;
      // // 
      // //     @property(BlinkCmp)
      // //     private glow: BlinkCmp = null;
      // // 
      // //     @property(cc.Sprite)
      // //     private finishFx: cc.Sprite = null;
      // // 
      // //     @property(cc.Label)
      // //     private nohu_win_amount: cc.Label = null;
      // // 
      // //     private win_amount_tween : cc.Tween = null;
      // // 
      // //     private activated_click = false;
      // // 
      // //     onLoad() {
      // //         this.black_screen.on("click", () => {
      // //             if(!this.activated_click) return;
      // //             this.hide();
      // //         });
      // //     }
      // // 
      // //     activeClick() {
      // //         this.black_screen.active = true;
      // //         this.activated_click = true;
      // //     }
      // // 
      // //     show(win_amount) {
      // //         this.black_screen.active = true;
      // //         this.activated_click = false;
      // // 
      // //         this.noHuMoneyBg.node.stopAllActions();
      // //         this.finishFx.node.stopAllActions();
      // //         this.glow.node.stopAllActions();
      // //         this.win_amount_tween && this.win_amount_tween.stop();
      // // 
      // //         this.finishFx.node.scale = 0.2;
      // //         let finishAction = cc.sequence(cc.scaleTo(0.3, 1.3), cc.scaleTo(0.3, 1.0));
      // //         this.finishFx.node.runAction(finishAction);
      // // 
      // //         let startPos = this.noHuMoneyBg.node.position;
      // //         startPos.y = -485;
      // //         this.noHuMoneyBg.node.position = startPos;
      // //         let moveAction = cc.sequence(cc.delayTime(0.6), cc.moveBy(0.3, cc.v2(0, 200)));
      // //         this.noHuMoneyBg.node.runAction(moveAction);
      // // 
      // //         this.glow.run();
      // // 
      // //         let obj = { a: 0 };
      // // 
      // //         this.win_amount_tween = cc.tween(obj)
      // //             .to(2, { a: win_amount }, {
      // //                 progress: (start, end, current, ratio) => {
      // //                     this.nohu_win_amount.string = StringUtils.formatNumber(Math.floor(current));
      // //                     return start + (end - start) * ratio;
      // //                 }
      // //             }).call(() => this.nohu_win_amount.string = StringUtils.formatNumber(Math.floor(win_amount)))
      // //             .start();
      // // 
      // //         this.node.opacity = 255;
      // //     }
      // // 
      // //     hide() {
      // //         this.black_screen.active = false;
      // //         this.activated_click = false;
      // //         this.node.stopAllActions();
      // //         this.node.opacity = 255;
      // // 
      // //         this.node.runAction(cc.fadeOut(0.5));
      // //     }
      // // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameBaiPlayerView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './BubbleChat.ts', './PlayerView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, ProgressBar, sp, _decorator, Tween, tween, Vec3, BubbleChat, PlayerView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      sp = module.sp;
      _decorator = module._decorator;
      Tween = module.Tween;
      tween = module.tween;
      Vec3 = module.Vec3;
    }, function (module) {
      BubbleChat = module.BubbleChat;
    }, function (module) {
      PlayerView = module.PlayerView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "61f2aWYKNNGX7URr2T4Bp/t", "GameBaiPlayerView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GameBaiPlayerView = exports('GameBaiPlayerView', (_dec = ccclass('GameBaiPlayerView'), _dec2 = property(Node), _dec3 = property(ProgressBar), _dec4 = property(sp.Skeleton), _dec5 = property(Node), _dec6 = property(Number), _dec7 = property(BubbleChat), _dec(_class = (_class2 = (_temp = class GameBaiPlayerView extends PlayerView {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "card_pos", _descriptor, this);

          _initializerDefineProperty(this, "progressBar", _descriptor2, this);

          _initializerDefineProperty(this, "time_dot", _descriptor3, this);

          _initializerDefineProperty(this, "nodeTimer", _descriptor4, this);

          _initializerDefineProperty(this, "maxTime", _descriptor5, this);

          _initializerDefineProperty(this, "resultText", _descriptor6, this);

          _defineProperty(this, "cards", []);

          _defineProperty(this, "_state", 0);

          _defineProperty(this, "_remainingCard", 0);

          _defineProperty(this, "prgress_tween", null);
        }

        getCardPos() {
          return this.card_pos;
        }

        addCard(card, isInteractable = false) {
          card.setInteractable(isInteractable);
          this.cards.push(card);
        }

        getSelectedCards() {
          return this.cards.filter(card => card.getSelected());
        }

        getPlayerCard() {
          return this.cards;
        }

        getCountPosibleToSelect() {
          return this.cards.filter(x => x.isCanSelect()).length;
        }

        setCurrentState(pS, rmC) {
          this._state = pS;
          this._remainingCard = rmC;
        }

        getCurrentState() {
          return this._state;
        }

        getRemainingCard() {
          return this._remainingCard;
        }

        showResultText(content, timeToShow = 5) {
          if (content == "" || content == null || content == undefined) {
            return;
          }

          this.resultText.show(content, false, timeToShow);
        }

        startCountDown(remainTime) {
          var _this$spr_avatar;

          Tween.stopAllByTarget(this.nodeTimer);
          Tween.stopAllByTarget(this.spr_avatar.node);
          this.nodeTimer.active = true;

          if (this.prgress_tween != null && this.prgress_tween != undefined) {
            this.prgress_tween.stop();
          }

          let scale = tween((_this$spr_avatar = this.spr_avatar) === null || _this$spr_avatar === void 0 ? void 0 : _this$spr_avatar.node).sequence(tween().to(0.1, {
            scale: new Vec3(this.spr_avatar.node.scale.x + this.spr_avatar.node.scale.x * 0.3, this.spr_avatar.node.scale.y + this.spr_avatar.node.scale.y * 0.3, this.spr_avatar.node.scale.z + this.spr_avatar.node.scale.z * 0.3)
          }), tween().to(0.1, {
            scale: new Vec3(this.spr_avatar.node.scale)
          }));
          scale.start();
          let countdown = Math.floor(remainTime);
          this.time_dot.setAnimation(0, "loop", true);
          this.progressBar.progress = countdown / this.maxTime;
          this.time_dot.node.parent.setRotationFromEuler(0, 0, 360 * this.progressBar.progress);
          let sequence = tween(this.nodeTimer).repeat(countdown, tween().sequence(tween().call(() => {
            if (this.prgress_tween != null && this.prgress_tween != undefined) {
              this.prgress_tween.stop();
            }

            let obj = {
              a: this.progressBar.progress
            };
            this.prgress_tween = tween(obj).to(1, {
              a: (countdown - 1) / this.maxTime
            }, {
              progress: (start, end, current, ratio) => {
                this.progressBar.progress = current;
                this.time_dot.node.parent.setRotationFromEuler(0, 0, 360 * this.progressBar.progress);
                return start + (end - start) * ratio;
              }
            });
            this.prgress_tween.start();
          }), tween().delay(1), tween().call(() => {
            countdown -= 1;
          })));
          sequence.start();
        }

        stopCountDown() {
          this.nodeTimer.active = false;
          this.progressBar.progress = 0;
        }

        resetUI() {
          this.cards = [];
          this.stopCountDown();
          this.ready(false);
        }

        getCardItemWithCode(code) {
          let f = this.cards.filter(c => c.getCode() == code);

          if (f.length > 0) {
            return f[0];
          }

          return null;
        }

        removeCardItemWithCode(code) {
          this.cards = this.cards.filter(c => c.getCode() != code);
        }

        popCard() {
          return this.cards.pop();
        }

        rearrangeCard() {
          let velocity = 900;

          for (let i = 0; i < this.cards.length; i++) {
            let target = new Vec3(this.getCardPos().position);
            target.x += i * 80;
            let card = this.cards[i];

            if (card.node.position.x != target.x) {
              Tween.stopAllByTarget(card.node);
              let distance = Vec3.distance(card.node.position, target);
              let time = distance / velocity;
              let move = tween(card.node).sequence(tween().call(() => {
                card.setInteractable(false);
              }), tween().to(time, {
                position: target
              }), tween().call(() => {
                card.lockPosition(target);
                card.setInteractable(true);
              }));
              move.start();
            }
          }
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "card_pos", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "time_dot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodeTimer", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "maxTime", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 20;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "resultText", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CCButtonLoader.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CCComponentLoader.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, String, _decorator, CCComponentLoader;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      String = module.String;
      _decorator = module._decorator;
    }, function (module) {
      CCComponentLoader = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _temp;

      cclegacy._RF.push({}, "6604f1KVStOhapZ1JnR0jSQ", "CCButtonLoader", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CCButtonLoader = exports('default', (_dec = ccclass('CCButtonLoader'), _dec2 = property(String), _dec3 = property(String), _dec(_class = (_class2 = (_temp = class CCButtonLoader extends CCComponentLoader {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "asset_path_normal", _descriptor, this);

          _initializerDefineProperty(this, "insetTop_normal", _descriptor2, this);

          _initializerDefineProperty(this, "insetBottom_normal", _descriptor3, this);

          _initializerDefineProperty(this, "insetLeft_normal", _descriptor4, this);

          _initializerDefineProperty(this, "insetRight_normal", _descriptor5, this);

          _initializerDefineProperty(this, "asset_path_disable", _descriptor6, this);

          _initializerDefineProperty(this, "insetTop_disable", _descriptor7, this);

          _initializerDefineProperty(this, "insetBottom_disable", _descriptor8, this);

          _initializerDefineProperty(this, "insetLeft_disable", _descriptor9, this);

          _initializerDefineProperty(this, "insetRight_disable", _descriptor10, this);

          _defineProperty(this, "button", null);
        }

        init() {//if(this.button == null) this.button = this.node.getComponent(cc.Button);
          //let self = this;
          //cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,this.asset_path_normal), (sprite_frame : cc.SpriteFrame) => {
          //sprite_frame.insetTop = this.insetTop_normal;
          //sprite_frame.insetBottom = this.insetBottom_normal;
          //sprite_frame.insetLeft = this.insetLeft_normal;
          //sprite_frame.insetRight = this.insetRight_normal;
          //self.button.normalSprite = sprite_frame;
          //});
          //cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,this.asset_path_disable), (sprite_frame : cc.SpriteFrame) => {
          //sprite_frame.insetTop = this.insetTop_disable;
          //sprite_frame.insetBottom = this.insetBottom_disable;
          //sprite_frame.insetLeft = this.insetLeft_disable;
          //sprite_frame.insetRight = this.insetRight_disable;
          //self.button.disabledSprite = sprite_frame;
          //});
        }

        getPaths() {//return [this.asset_path_normal,this.asset_path_disable];
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "asset_path_normal", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "insetTop_normal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "insetBottom_normal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "insetLeft_normal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "insetRight_normal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "asset_path_disable", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "";
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "insetTop_disable", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "insetBottom_disable", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "insetLeft_disable", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "insetRight_disable", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import CCComponentLoader from "./CCComponentLoader";
      // import CCSpriteFrameLoader from "./CCSpriteFrameLoader";
      // import Downloader from "./Downloader";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class CCButtonLoader extends CCComponentLoader {
      //     @property(cc.String)
      //     public asset_path_normal = "";
      // 
      //     @property
      //     protected insetTop_normal : number = 0;
      // 
      //     @property
      //     protected insetBottom_normal : number = 0;
      // 
      //     @property
      //     protected insetLeft_normal : number = 0;
      // 
      //     @property
      //     protected insetRight_normal : number = 0;
      // 
      //     @property(cc.String)
      //     public asset_path_disable = "";
      // 
      //     @property
      //     protected insetTop_disable : number = 0;
      // 
      //     @property
      //     protected insetBottom_disable : number = 0;
      // 
      //     @property
      //     protected insetLeft_disable : number = 0;
      // 
      //     @property
      //     protected insetRight_disable : number = 0;
      // 
      //     private button : cc.Button = null;
      // 
      //     init() {   
      //         if(this.button == null) this.button = this.node.getComponent(cc.Button);
      // 
      //         let self = this;
      //         cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,this.asset_path_normal), (sprite_frame : cc.SpriteFrame) => {
      //             sprite_frame.insetTop = this.insetTop_normal;
      //             sprite_frame.insetBottom = this.insetBottom_normal;
      //             sprite_frame.insetLeft = this.insetLeft_normal;
      //             sprite_frame.insetRight = this.insetRight_normal;
      //             self.button.normalSprite = sprite_frame;
      //         });
      //         cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,this.asset_path_disable), (sprite_frame : cc.SpriteFrame) => {
      //             sprite_frame.insetTop = this.insetTop_disable;
      //             sprite_frame.insetBottom = this.insetBottom_disable;
      //             sprite_frame.insetLeft = this.insetLeft_disable;
      //             sprite_frame.insetRight = this.insetRight_disable;
      //             self.button.disabledSprite = sprite_frame;
      //         });
      //     }
      // 
      //     getPaths() : string[] {
      //         return [this.asset_path_normal,this.asset_path_disable];
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseMiniGameView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './GlobalVariables.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, UIOpacity, CommonPopup, GlobalVariables;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "66a2cqNPDtBN7sSh4pu0O5N", "BaseMiniGameView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BaseMiniGameView = exports('default', (_dec = ccclass('BaseMiniGameView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property([Node]), _dec(_class = (_class2 = (_temp = class BaseMiniGameView extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "outside_click_node", _descriptor, this);

          _initializerDefineProperty(this, "inner_click_node", _descriptor2, this);

          _initializerDefineProperty(this, "blur_node", _descriptor3, this);
        }

        isCanDeactiveRoot() {
          return true;
        }

        onLoad() {
          this.outside_click_node.on(Node.EventType.TOUCH_START, () => {
            this.outside_click_node.active = false;
            this.blur();
          });
          this.inner_click_node.on(Node.EventType.TOUCH_START, () => {
            this.outside_click_node.active = true;
            this.blur(false);
          });
          this.node.scale = GlobalVariables.getScale();
        }

        blur(isBlur = true) {
          this.blur_node.forEach(node => node.getComponent(UIOpacity).opacity = isBlur ? 100 : 255);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "outside_click_node", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "inner_click_node", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "blur_node", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import MiniGameNodeController from "../MiniGameNodeController";
      // import GameUtils from "../Utils/GameUtils";
      // import { GlobalVariables } from "../Utils/GlobalVariables";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class BaseMiniGameView extends cc.Component {
      //     @property(cc.Node)
      //     private outside_click_node : cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private inner_click_node : cc.Node = null;
      // 
      //     @property([cc.Node])
      //     private blur_node : cc.Node[] = [];
      // 
      //     onLoad() {
      //         this.outside_click_node.on(cc.Node.EventType.TOUCH_START, () => {
      //             this.outside_click_node.active = false;
      //             this.blur();
      //         });
      // 
      //         this.inner_click_node.on(cc.Node.EventType.TOUCH_START, () => {
      //             this.outside_click_node.active = true;
      //             this.blur(false);
      //         });
      // 
      //         this.node.scale = GlobalVariables.getScale();
      //     }
      // 
      //     public show(): boolean {
      //         return true;
      //     }
      // 
      //     public hide(isImmediately = false){
      //     }
      // 
      //     public blur(isBlur = true) {
      //         this.blur_node.forEach(node => node.opacity = isBlur ? 100 : 255);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './ProfilesPopup.ts', './ChangeAvatarPopup.ts', './ChangePasswordPopup.ts', './GameHistoryPopup.ts', './GameSettingPopup.ts', './InvitePopup.ts', './LoginPopup.ts', './RegisterPopup.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, CommonPopup, ProfilesPopup, ChangeAvatarPopup, ChangePasswordPopup, GameHistoryPopup, GameSettingPopup, InvitePopup, LoginPopup, RegisterPopup, GamePlayManager, NETWORK_STATE;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      ProfilesPopup = module.ProfilesPopup;
    }, function (module) {
      ChangeAvatarPopup = module.default;
    }, function (module) {
      ChangePasswordPopup = module.ChangePasswordPopup;
    }, function (module) {
      GameHistoryPopup = module.default;
    }, function (module) {
      GameSettingPopup = module.GameSettingPopup;
    }, function (module) {
      InvitePopup = module.InvitePopup;
    }, function (module) {
      LoginPopup = module.LoginPopup;
    }, function (module) {
      RegisterPopup = module.RegisterPopup;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
      NETWORK_STATE = module.NETWORK_STATE;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3, _temp;

      cclegacy._RF.push({}, "66febuP1UhEB5GjMYCCMDhb", "PopupController", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let PopupController = exports('PopupController', (_dec = ccclass('PopupController'), _dec2 = property(LoginPopup), _dec3 = property(RegisterPopup), _dec4 = property(ProfilesPopup), _dec5 = property(ChangePasswordPopup), _dec6 = property(GameHistoryPopup), _dec7 = property(GameSettingPopup), _dec8 = property(ChangeAvatarPopup), _dec9 = property(InvitePopup), _dec10 = property(CommonPopup), _dec(_class = (_class2 = (_temp = _class3 = class PopupController extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "loginPopup", _descriptor, this);

          _initializerDefineProperty(this, "registerPopup", _descriptor2, this);

          _initializerDefineProperty(this, "profilesPopup", _descriptor3, this);

          _initializerDefineProperty(this, "changePasswordPopup", _descriptor4, this);

          _initializerDefineProperty(this, "gameHistoryPopup", _descriptor5, this);

          _initializerDefineProperty(this, "gameSettingPopup", _descriptor6, this);

          _initializerDefineProperty(this, "changeAvatarPopup", _descriptor7, this);

          _initializerDefineProperty(this, "invitePopup", _descriptor8, this);

          _initializerDefineProperty(this, "commonPopup", _descriptor9, this);
        }

        static getInstance() {
          return PopupController.instance;
        }

        onLoad() {
          PopupController.instance = this;
        }

        closeAll() {
          this.hideLoginPopup();
          this.hideCommonPopup();
          this.hideRegisterPopup();
          this.hideChangePasswordPopup();
          this.hideProfilesPopup();
          this.hideInvitePopup();
        }

        showCommonPopup(msg, onOK = null, onCancel = null) {
          var _this$commonPopup, _this$commonPopup2;

          (_this$commonPopup = this.commonPopup) === null || _this$commonPopup === void 0 ? void 0 : _this$commonPopup.setPopup(msg, onOK, onCancel);
          (_this$commonPopup2 = this.commonPopup) === null || _this$commonPopup2 === void 0 ? void 0 : _this$commonPopup2.show();
        }

        hideCommonPopup() {
          var _this$commonPopup3;

          (_this$commonPopup3 = this.commonPopup) === null || _this$commonPopup3 === void 0 ? void 0 : _this$commonPopup3.hide();
        }

        showLoginPopup() {
          var _this$loginPopup;

          (_this$loginPopup = this.loginPopup) === null || _this$loginPopup === void 0 ? void 0 : _this$loginPopup.show();
        }

        hideLoginPopup() {
          var _this$loginPopup2;

          (_this$loginPopup2 = this.loginPopup) === null || _this$loginPopup2 === void 0 ? void 0 : _this$loginPopup2.hide();
        }

        showRegisterPopup() {
          var _this$registerPopup;

          (_this$registerPopup = this.registerPopup) === null || _this$registerPopup === void 0 ? void 0 : _this$registerPopup.show();
        }

        hideRegisterPopup() {
          var _this$registerPopup2;

          (_this$registerPopup2 = this.registerPopup) === null || _this$registerPopup2 === void 0 ? void 0 : _this$registerPopup2.hide();
        }

        showProfilePopup(displayName, userID, money, avatar) {
          var _this$profilesPopup, _this$profilesPopup2;

          if (GamePlayManager.STATE == NETWORK_STATE.UNLOGGED_IN) {
            this.showLoginPopup();
            return;
          }

          (_this$profilesPopup = this.profilesPopup) === null || _this$profilesPopup === void 0 ? void 0 : _this$profilesPopup.setProfiles(displayName, userID, money, avatar);
          (_this$profilesPopup2 = this.profilesPopup) === null || _this$profilesPopup2 === void 0 ? void 0 : _this$profilesPopup2.show();
        }

        hideProfilesPopup() {
          var _this$profilesPopup3;

          (_this$profilesPopup3 = this.profilesPopup) === null || _this$profilesPopup3 === void 0 ? void 0 : _this$profilesPopup3.close();
        }

        showChangePasswordPopup() {
          var _this$changePasswordP;

          (_this$changePasswordP = this.changePasswordPopup) === null || _this$changePasswordP === void 0 ? void 0 : _this$changePasswordP.show();
        }

        hideChangePasswordPopup() {
          var _this$changePasswordP2;

          (_this$changePasswordP2 = this.changePasswordPopup) === null || _this$changePasswordP2 === void 0 ? void 0 : _this$changePasswordP2.hide();
        }

        showGameHistoryPopup() {
          var _this$gameHistoryPopu;

          (_this$gameHistoryPopu = this.gameHistoryPopup) === null || _this$gameHistoryPopu === void 0 ? void 0 : _this$gameHistoryPopu.fetchHistory();
        }

        hideGameHistoryPopup() {
          var _this$gameHistoryPopu2;

          (_this$gameHistoryPopu2 = this.gameHistoryPopup) === null || _this$gameHistoryPopu2 === void 0 ? void 0 : _this$gameHistoryPopu2.hide();
        }

        showGameSettingPopup() {
          var _this$gameSettingPopu;

          (_this$gameSettingPopu = this.gameSettingPopup) === null || _this$gameSettingPopu === void 0 ? void 0 : _this$gameSettingPopu.show();
        }

        hideGameSettingPopup() {
          var _this$gameSettingPopu2;

          (_this$gameSettingPopu2 = this.gameSettingPopup) === null || _this$gameSettingPopu2 === void 0 ? void 0 : _this$gameSettingPopu2.close();
        }

        showChangeAvatarPopup() {
          var _this$changeAvatarPop;

          (_this$changeAvatarPop = this.changeAvatarPopup) === null || _this$changeAvatarPop === void 0 ? void 0 : _this$changeAvatarPop.fetchAvatars();
        }

        hideChangeAvatarPopup() {
          var _this$changeAvatarPop2;

          (_this$changeAvatarPop2 = this.changeAvatarPopup) === null || _this$changeAvatarPop2 === void 0 ? void 0 : _this$changeAvatarPop2.hide();
        }

        showInvitePopup(name, money, gameID, bet, roomID, roomPassword) {
          var _this$invitePopup;

          (_this$invitePopup = this.invitePopup) === null || _this$invitePopup === void 0 ? void 0 : _this$invitePopup.display(name, money, gameID, bet, roomID, roomPassword);
        }

        hideInvitePopup() {
          var _this$invitePopup2;

          (_this$invitePopup2 = this.invitePopup) === null || _this$invitePopup2 === void 0 ? void 0 : _this$invitePopup2.hide();
        }

      }, _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "loginPopup", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "registerPopup", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "profilesPopup", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "changePasswordPopup", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "gameHistoryPopup", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "gameSettingPopup", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "changeAvatarPopup", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "invitePopup", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "commonPopup", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuPopupCmp.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, _decorator, Component, Vec3, Tween, UITransform, UIOpacity, tween;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      Tween = module.Tween;
      UITransform = module.UITransform;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "67df6jukxNHTKW0nLHfCeKU", "TaiXiuPopupCmp", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TaiXiuPopupCmp = exports('default', (_dec = ccclass('TaiXiuPopupCmp'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = class TaiXiuPopupCmp extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "black_screen", _descriptor, this);

          _defineProperty(this, "original_scale", Vec3.ONE);

          _defineProperty(this, "start_position", Vec3.ZERO);

          _defineProperty(this, "follow_with_node", null);

          _defineProperty(this, "isOpened", false);
        }

        onLoad() {
          this.black_screen.on("click", () => {
            this.hide();
          });
        }

        followNode(node) {
          this.follow_with_node = node;
        }

        show() {
          var _this$follow_with_nod;

          if (this.isOpened || !this.isTotallyClosed()) return;
          Tween.stopAllByTarget(this.node);
          this.isOpened = true;
          let wPos = (_this$follow_with_nod = this.follow_with_node.parent) === null || _this$follow_with_nod === void 0 ? void 0 : _this$follow_with_nod.getComponent(UITransform).convertToWorldSpaceAR(this.follow_with_node.position);
          this.start_position = wPos;
          this.node.active = true;
          this.node.getComponent(UIOpacity).opacity = 0;
          this.node.scale = Vec3.ZERO;
          this.node.setWorldPosition(this.start_position);
          let showAct = tween(this.node).parallel(tween().to(0.3, {
            position: Vec3.ZERO
          }, {
            easing: 'linear'
          }), tween().to(0.3, {
            scale: Vec3.ONE
          }, {
            easing: 'linear'
          }));
          showAct.start();
          let fadeAct = tween(this.node.getComponent(UIOpacity)).to(0.3, {
            opacity: 255
          }, {
            easing: 'circIn'
          }).call(() => {
            this.node.getComponent(UIOpacity).opacity = 255;
          });
          fadeAct.start();
        }

        hide() {
          if (!this.isOpened || !this.isTotallyOpened()) return;
          Tween.stopAllByTarget(this.node);
          this.isOpened = false;
          this.node.getComponent(UIOpacity).opacity = 255;
          this.node.scale = this.original_scale;
          let self = this;
          let hideAct = tween(this.node).parallel(tween().to(0.4, {
            worldPosition: this.start_position
          }, {
            easing: 'linear'
          }), tween().to(0.4, {
            scale: Vec3.ZERO
          }, {
            easing: 'linear'
          }));
          let seq = tween(this.node).sequence(hideAct, tween().delay(0.2), tween().call(() => {
            self.node.active = false;
          }));
          seq.start();
          let fadeAct = tween(this.node.getComponent(UIOpacity)).to(0.3, {
            opacity: 1
          }, {
            easing: 'circOut'
          });
          fadeAct.start();
        }

        isTotallyOpened() {
          var _this$node$getCompone;

          return ((_this$node$getCompone = this.node.getComponent(UIOpacity)) === null || _this$node$getCompone === void 0 ? void 0 : _this$node$getCompone.opacity) == 255;
        }

        isTotallyClosed() {
          var _this$node$getCompone2;

          return ((_this$node$getCompone2 = this.node.getComponent(UIOpacity)) === null || _this$node$getCompone2 === void 0 ? void 0 : _this$node$getCompone2.opacity) == 1;
        }

      }, _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "black_screen", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuPopupCmp extends cc.Component {
      //     @property(cc.Node)
      //     protected black_screen : cc.Node = null;
      // 
      //     protected original_scale = 0;
      // 
      //     protected start_position : cc.Vec2 = cc.Vec2.ZERO;
      // 
      //     protected follow_with_node : cc.Node = null;
      // 
      //     protected isOpened = false;
      // 
      //     onLoad() {
      //         this.black_screen.on("click",() => {
      //             this.hide();
      //         });
      //     }
      // 
      //     public followNode(node : cc.Node) {
      //         this.follow_with_node = node;
      //     }
      // 
      //     public show() {
      //         if (this.isOpened || !this.isTotallyClosed()) return;
      // 
      //         this.node.stopAllActions();
      // 
      //         this.isOpened = true;
      // 
      //         let wPos = this.follow_with_node.parent.convertToWorldSpaceAR(this.follow_with_node.position);
      //         let pos = this.node.parent.convertToNodeSpaceAR(wPos);
      //         this.start_position = new cc.Vec2(pos.x,pos.y);
      // 
      //         this.node.active = true;
      //         this.node.opacity = 0;
      //         this.node.scale = 0;
      // 
      //         this.node.position = this.start_position;
      // 
      //         let showAct = cc.spawn(
      //             cc.moveTo(0.3,cc.Vec2.ZERO).easing(cc.easeOut(2.5)),
      //             cc.fadeIn(0.3).easing(cc.easeIn(2.5)), 
      //             cc.scaleTo(0.3, this.original_scale).easing(cc.easeOut(2.5))
      //         );
      //         this.node.runAction(showAct);
      //     }
      // 
      //     public hide() {
      //         if (!this.isOpened || !this.isTotallyOpened()) return;
      // 
      //         this.node.stopAllActions();
      // 
      //         this.isOpened = false;
      // 
      //         this.node.opacity = 255;
      //         this.node.scale = this.original_scale;
      //         let self = this;
      //         let hideAct = cc.spawn(
      //             cc.moveTo(0.4,this.start_position).easing(cc.easeIn(1.5)),
      //             cc.fadeOut(0.3).easing(cc.easeOut(1.5)),
      //             cc.scaleTo(0.4,0).easing(cc.easeIn(1.5))
      //         );
      //         this.node.runAction(cc.sequence(hideAct,cc.delayTime(0.2),cc.callFunc(() => 
      //         {
      //             self.node.active = false;
      //         })));
      //     }
      // 
      //     private isTotallyOpened() {
      //         return this.node.opacity == 255;
      //     }
      // 
      //     private isTotallyClosed() {
      //         return this.node.opacity == 0;
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuChatView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './MiniGameNetworkHandler.ts', './ChatItemView.ts', './TaiXiuMessageHandler.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, EditBox, ScrollView, _decorator, Component, Vec3, Tween, tween, UITransform, instantiate, UIOpacity, GameConfigManager, MessageRequest, MiniGameNetworkHandler, ChatItemView, TaiXiuKhongCan_Message;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      EditBox = module.EditBox;
      ScrollView = module.ScrollView;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      Tween = module.Tween;
      tween = module.tween;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MiniGameNetworkHandler = module.MiniGameNetworkHandler;
    }, function (module) {
      ChatItemView = module.default;
    }, function (module) {
      TaiXiuKhongCan_Message = module.TaiXiuKhongCan_Message;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3, _temp;

      cclegacy._RF.push({}, "6b631WUJlFHr5xMHQUpwYRF", "TaiXiuChatView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TaiXiuChatView = exports('default', (_dec = ccclass('TaiXiuChatView'), _dec2 = property(Node), _dec3 = property(EditBox), _dec4 = property(ScrollView), _dec(_class = (_class2 = (_temp = _class3 = class TaiXiuChatView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "chat_item", _descriptor, this);

          _initializerDefineProperty(this, "edbChat", _descriptor2, this);

          _initializerDefineProperty(this, "scr_chat", _descriptor3, this);

          _initializerDefineProperty(this, "max_chat_item", _descriptor4, this);

          _initializerDefineProperty(this, "spacing_chat", _descriptor5, this);

          _defineProperty(this, "loaded_chat_items", []);

          _defineProperty(this, "isScrolling", false);

          _defineProperty(this, "is_chat_layout_dirty", false);

          _defineProperty(this, "is_loaded_history", false);

          _defineProperty(this, "lastest_node_position", null);
        }

        static getInstance() {
          return TaiXiuChatView.instance;
        }

        onLoad() {
          this.lastest_node_position = new Vec3(this.node.position);
          TaiXiuChatView.instance = this;
          this.scr_chat.node.on("scroll-began", () => {
            Tween.stopAllByTarget(this.node);
            this.isScrolling = true;
          });
          this.scr_chat.node.on("scroll-ended", () => {
            let seq = tween(this.node).sequence(tween().delay(0.5), tween().call(() => {
              this.isScrolling = false;
            }));
            seq.start();
          });
        }

        update() {
          this.updateLayoutChat();
        }

        markAsDirty() {
          this.is_chat_layout_dirty = true;
        }

        updateLayoutChat() {
          var _this$scr_chat$conten, _this$scr_chat$conten2, _this$scr_chat$conten3;

          if (this.loaded_chat_items == null || this.loaded_chat_items.length == 0) return;
          let content_height = this.loaded_chat_items.map(x => {
            var _x$node$getComponent;

            return (_x$node$getComponent = x.node.getComponent(UITransform)) === null || _x$node$getComponent === void 0 ? void 0 : _x$node$getComponent.contentSize.height;
          }).reduce((x, y) => x + y + this.spacing_chat);
          (_this$scr_chat$conten = this.scr_chat.content) === null || _this$scr_chat$conten === void 0 ? void 0 : (_this$scr_chat$conten2 = _this$scr_chat$conten.getComponent(UITransform)) === null || _this$scr_chat$conten2 === void 0 ? void 0 : _this$scr_chat$conten2.setContentSize((_this$scr_chat$conten3 = this.scr_chat.content.getComponent(UITransform)) === null || _this$scr_chat$conten3 === void 0 ? void 0 : _this$scr_chat$conten3.contentSize.width, content_height);

          if (this.is_chat_layout_dirty) {
            let is_all_chat_item_clean = this.loaded_chat_items.filter(x => x.isDirty()).length == 0;
            if (!is_all_chat_item_clean) return;
            this.loaded_chat_items.forEach((chat_item, index) => {
              Tween.stopAllByTarget(chat_item.node);

              if (index > 0) {
                let pos = this.loaded_chat_items[index - 1].node.position;
                let p = new Vec3(pos.x, pos.y, pos.z);
                p.y -= this.loaded_chat_items[index - 1].node.getComponent(UITransform).contentSize.height + this.spacing_chat;
                chat_item.node.setPosition(p);
              }
            });
            let target = [];
            let offset_y = 0;

            for (let i = this.loaded_chat_items.length - 1; i >= 0; i--) {
              let pos = this.loaded_chat_items[i].node.position;
              offset_y += this.loaded_chat_items[i].node.getComponent(UITransform).contentSize.height + this.spacing_chat;
              let p = new Vec3(pos.x, pos.y, pos.z);
              p.y = offset_y;
              target.push(p);
            }

            target = target.reverse();
            this.loaded_chat_items.forEach((chat_item, index) => {
              let seq = tween(chat_item.node).to(0.2, {
                position: new Vec3(target[index].x, target[index].y, target[index].z)
              });
              seq.start();
            });
            this.scr_chat.scrollToBottom();
            this.is_chat_layout_dirty = false;
            if (!this.is_loaded_history) this.is_loaded_history = true;
          }
        }

        isUpdatable() {
          return this.is_loaded_history && !this.isScrolling && !this.is_chat_layout_dirty;
        }

        loadChatHistory(chatHistory) {
          let len = chatHistory.length > this.max_chat_item ? this.max_chat_item : chatHistory.length;

          for (let i = 0; i < len; i++) {
            let dict = chatHistory[i];
            let displayName = dict["fu"];
            let message = dict["mgs"];
            let chat_instance_item = this.loaded_chat_items.length >= this.max_chat_item ? this.loaded_chat_items.shift() : instantiate(this.chat_item).getComponent(ChatItemView);
            chat_instance_item.node.active = true;
            chat_instance_item.node.parent = this.chat_item.parent;
            chat_instance_item.show(displayName, message);
            this.loaded_chat_items.push(chat_instance_item);
          }

          this.is_chat_layout_dirty = true;
        }

        updateChat(chat_array) {
          let len = chat_array.length > this.max_chat_item ? this.max_chat_item : chat_array.length;

          for (let i = 0; i < len; i++) {
            let dict = chat_array[i];
            let displayName = dict["fu"];
            let message = dict["mgs"];
            let chat_instance_item = this.loaded_chat_items.length >= this.max_chat_item ? this.loaded_chat_items.shift() : cc.instantiate(this.chat_item).getComponent(ChatItemView);
            chat_instance_item.node.active = true;
            chat_instance_item.node.parent = this.chat_item.parent;
            chat_instance_item.show(displayName, message);
            this.loaded_chat_items.push(chat_instance_item);
          }

          this.is_chat_layout_dirty = true;
        }

        sendMes() {
          let strMes = this.edbChat.string;

          if (strMes == undefined || strMes == "") {
            return;
          }

          this.edbChat.string = "";
          let dict = {};
          dict["cmd"] = TaiXiuKhongCan_Message.CHAT;
          dict["mgs"] = strMes;
          let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "taixiuUnbalancedPlugin", dict];
          MiniGameNetworkHandler.send(mes);
        }

        open() {
          this.node.getComponent(UIOpacity).opacity = 1;
          this.node.scale = Vec3.ONE;
          let pos = new Vec3(this.node.position);
          pos.x = GameConfigManager.getSizeWidth() * 0.5 + 360 * 0.65;
          this.node.setPosition(pos);
          let endPos = new Vec3(this.node.position);
          endPos.x = GameConfigManager.getSizeWidth() * 0.5 - 360 * 0.5;
          let move = tween(this.node).to(0.4, {
            position: endPos
          }, {
            easing: 'expoOut'
          });
          move.start();
          let scaleUpFade = tween(this.node.getComponent(UIOpacity)).to(0.2, {
            opacity: 255
          }, {
            easing: 'circIn'
          });
          scaleUpFade.start();
        }

        close() {
          this.node.getComponent(UIOpacity).opacity = 1;
          this.node.scale = Vec3.ZERO;
          let pos = new Vec3(this.node.position);
          pos.x = GameConfigManager.getSizeWidth() * 0.5;
          this.node.setPosition(pos);
        }

      }, _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "chat_item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "edbChat", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "scr_chat", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "max_chat_item", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 30;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "spacing_chat", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 5;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { TaiXiu_Message } from "../../Network/MiniGame/TaiXiuMessageHandler";
      // import { MessageRequest, MiniGameNetworkHandler } from "../../Network/MiniGameNetworkHandler";
      // import ChatItemView from "./ChatItemView";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuChatView extends cc.Component {
      //     @property(cc.Node)
      //     private chat_item: cc.Node = null;
      // 
      //     @property(cc.EditBox)
      //     private edbChat: cc.EditBox = null;
      // 
      //     @property(cc.ScrollView)
      //     private scr_chat: cc.ScrollView = null;
      // 
      //     @property
      //     private max_chat_item = 30;
      // 
      //     @property
      //     private spacing_chat = 5;
      // 
      //     private loaded_chat_items: ChatItemView[] = [];
      // 
      //     private isScrolling = false;
      // 
      //     private is_chat_layout_dirty = false;
      // 
      //     private is_loaded_history = false;
      // 
      //     private static instance: TaiXiuChatView = null;
      // 
      //     private lastest_node_position : cc.Vec2;
      // 
      //     static getInstance(): TaiXiuChatView {
      //         return TaiXiuChatView.instance;
      //     }
      // 
      //     onLoad() {
      //         this.lastest_node_position = this.node.position;
      // 
      //         TaiXiuChatView.instance = this;
      // 
      //         this.scr_chat.node.on("scroll-began", () => {
      //             this.node.stopAllActions();
      //             this.isScrolling = true;
      //         });
      // 
      //         this.scr_chat.node.on("scroll-ended", () => {
      // 
      //             this.node.runAction(cc.sequence(
      //                 cc.delayTime(0.5),
      //                 cc.callFunc(() => {
      //                     this.isScrolling = false;
      //                 })
      //             ));
      //         });
      //     }
      // 
      //     update() {
      //         this.updateLayoutChat();
      //     }
      // 
      //     markAsDirty() {
      //         this.is_chat_layout_dirty = true;
      //     }
      // 
      //     private updateLayoutChat() {
      //         if(this.loaded_chat_items == null || this.loaded_chat_items.length == 0) return;
      // 
      //         let content_height = this.loaded_chat_items.map(x => x.node.getContentSize().height).reduce((x,y) => x + y + this.spacing_chat);
      //         this.scr_chat.content.setContentSize(this.scr_chat.content.getContentSize().width,content_height);
      //         if (this.is_chat_layout_dirty) {
      //             let is_all_chat_item_clean = this.loaded_chat_items.filter(x => x.isDirty()).length == 0;
      //             if (!is_all_chat_item_clean) return;
      // 
      //             this.loaded_chat_items.forEach((chat_item, index) => {
      //                 chat_item.node.stopAllActions();
      //                 if (index > 0) {
      //                     let pos = this.loaded_chat_items[index - 1].node.position;
      //                     pos.y -= this.loaded_chat_items[index - 1].node.getContentSize().height + this.spacing_chat;
      //                     chat_item.node.position = pos;
      //                 }
      //             });
      // 
      //             let target : cc.Vec2[] = [];
      //             let offset_y = 0;
      //             for(let i = this.loaded_chat_items.length - 1 ; i >= 0;i--){
      //                 let pos = this.loaded_chat_items[i].node.position;
      //                 offset_y += this.loaded_chat_items[i].node.getContentSize().height + this.spacing_chat;
      //                 pos.y = offset_y;
      //                 target.push(pos);
      //             }
      // 
      //             target = target.reverse();
      //             
      //             this.loaded_chat_items.forEach((chat_item,index) => {;
      //                 chat_item.node.runAction(cc.moveTo(0.2, target[index]));
      //             });
      // 
      //             this.scr_chat.scrollToBottom();
      // 
      //             this.is_chat_layout_dirty = false;
      // 
      //             if (!this.is_loaded_history) this.is_loaded_history = true;
      //         }
      //     }
      // 
      //     public isUpdatable() {
      //         return this.is_loaded_history && !this.isScrolling && !this.is_chat_layout_dirty;
      //     }
      // 
      //     public loadChatHistory(chatHistory: []) {
      //         let len = chatHistory.length > this.max_chat_item ? this.max_chat_item : chatHistory.length;
      //         for (let i = 0; i < len; i++) {
      //             let dict = chatHistory[i];
      //             let displayName = dict["fu"];
      //             let message = dict["mgs"];
      // 
      //             let chat_instance_item = this.loaded_chat_items.length >= this.max_chat_item ? this.loaded_chat_items.shift()
      //                 : cc.instantiate(this.chat_item).getComponent(ChatItemView);
      // 
      //             chat_instance_item.node.active = true;
      //             chat_instance_item.node.parent = this.chat_item.parent;
      // 
      //             chat_instance_item.show(displayName, message);
      // 
      //             this.loaded_chat_items.push(chat_instance_item);
      //         }
      // 
      //         this.is_chat_layout_dirty = true;
      //     }
      // 
      //     public updateChat(chat_array: []) {
      //         let len = chat_array.length > this.max_chat_item ? this.max_chat_item : chat_array.length;
      //         for (let i = 0; i < len; i++) {
      //             let dict = chat_array[i];
      //             let displayName = dict["fu"];
      //             let message = dict["mgs"];
      // 
      //             let chat_instance_item = this.loaded_chat_items.length >= this.max_chat_item ? this.loaded_chat_items.shift()
      //                 : cc.instantiate(this.chat_item).getComponent(ChatItemView);
      // 
      //             chat_instance_item.node.active = true;
      //             chat_instance_item.node.parent = this.chat_item.parent;
      // 
      //             chat_instance_item.show(displayName, message);
      // 
      //             this.loaded_chat_items.push(chat_instance_item);
      //         }
      // 
      //         this.is_chat_layout_dirty = true;
      //     }
      // 
      //     public sendMes() {
      //         let strMes = this.edbChat.string;
      // 
      //         if (strMes == undefined || strMes == "") {
      //             return;
      //         }
      // 
      //         this.edbChat.string = "";
      // 
      //         let dict = {};
      //         dict["cmd"] = TaiXiu_Message.CHAT;
      //         dict["mgs"] = strMes;
      //         let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "taixiuPlugin", dict];
      //         MiniGameNetworkHandler.send(mes);
      //     }
      // 
      //     public open() {
      //         this.node.opacity = 0;
      //         this.node.scale = 0;
      //         let scaleUp = cc.spawn(
      //         cc.moveTo(0.3,this.lastest_node_position).easing(cc.easeOut(2.5)),
      //         cc.fadeIn(0.3).easing(cc.easeIn(2.5)), 
      //         cc.scaleTo(0.3, 1.0).easing(cc.easeOut(2.5)));
      //         this.node.runAction(scaleUp);
      //     }
      // 
      //     public close(isImmediately = false) {
      //         let time_offset = isImmediately ? 0 : 1;
      //         this.lastest_node_position = this.node.position;
      // 
      //         let target = new cc.Vec2(this.lastest_node_position.x,this.lastest_node_position.y);
      //         target.x -= 100;
      // 
      //         this.node.opacity = 255;
      //         this.node.scale = 1;
      //         let scaleDown = cc.spawn(
      //         cc.moveTo(0.4 * time_offset,target).easing(cc.easeIn(1.5)),
      //         cc.fadeOut(0.3 * time_offset).easing(cc.easeOut(1.5)), 
      //         cc.scaleTo(0.4 * time_offset, 0.0).easing(cc.easeIn(1.5)));
      //         this.node.runAction(scaleDown);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ProfilesPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './StringUtils.ts', './SettingPopup.ts', './PopupController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Sprite, Button, _decorator, systemEvent, GameConfigManager, StringUtils, SettingPopup, PopupController, GamePlayManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Sprite = module.Sprite;
      Button = module.Button;
      _decorator = module._decorator;
      systemEvent = module.systemEvent;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      SettingPopup = module.SettingPopup;
    }, function (module) {
      PopupController = module.PopupController;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _class3, _temp;

      cclegacy._RF.push({}, "6e0abqNC9BPdJ9QUT14wVa5", "ProfilesPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ProfilesPopup = exports('ProfilesPopup', (_dec = ccclass('ProfilesPopup'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Sprite), _dec6 = property(Button), _dec7 = property(Button), _dec8 = property(Button), _dec9 = property(Button), _dec(_class = (_class2 = (_temp = _class3 = class ProfilesPopup extends SettingPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lbl_username", _descriptor, this);

          _initializerDefineProperty(this, "lbl_userid", _descriptor2, this);

          _initializerDefineProperty(this, "lbl_money", _descriptor3, this);

          _initializerDefineProperty(this, "spr_avatar", _descriptor4, this);

          _initializerDefineProperty(this, "btn_logout", _descriptor5, this);

          _initializerDefineProperty(this, "btn_doimatkhau", _descriptor6, this);

          _initializerDefineProperty(this, "btn_changeavatar", _descriptor7, this);

          _initializerDefineProperty(this, "btn_lichsuchoi", _descriptor8, this);
        }

        onLoad() {
          var _this$btn_logout, _this$btn_doimatkhau, _this$btn_lichsuchoi, _this$btn_changeavata;

          super.onLoad();
          (_this$btn_logout = this.btn_logout) === null || _this$btn_logout === void 0 ? void 0 : _this$btn_logout.node.on("click", () => {
            var _PopupController$getI;

            (_PopupController$getI = PopupController.getInstance()) === null || _PopupController$getI === void 0 ? void 0 : _PopupController$getI.showCommonPopup("Bạn có chắc chắn muốn đăng xuất?", () => {
              var _PopupController$getI2;

              localStorage.setItem(GameConfigManager.LOGGED_USER_NAME, "");
              localStorage.setItem(GameConfigManager.LOGGED_PASSWORD, "");
              GamePlayManager.logout();
              (_PopupController$getI2 = PopupController.getInstance()) === null || _PopupController$getI2 === void 0 ? void 0 : _PopupController$getI2.hideCommonPopup();
            }, () => {
              var _PopupController$getI3;

              (_PopupController$getI3 = PopupController.getInstance()) === null || _PopupController$getI3 === void 0 ? void 0 : _PopupController$getI3.hideCommonPopup();
            });
          });
          (_this$btn_doimatkhau = this.btn_doimatkhau) === null || _this$btn_doimatkhau === void 0 ? void 0 : _this$btn_doimatkhau.node.on("click", () => {
            var _PopupController$getI4;

            (_PopupController$getI4 = PopupController.getInstance()) === null || _PopupController$getI4 === void 0 ? void 0 : _PopupController$getI4.showChangePasswordPopup();
          });
          (_this$btn_lichsuchoi = this.btn_lichsuchoi) === null || _this$btn_lichsuchoi === void 0 ? void 0 : _this$btn_lichsuchoi.node.on("click", () => {
            var _PopupController$getI5;

            (_PopupController$getI5 = PopupController.getInstance()) === null || _PopupController$getI5 === void 0 ? void 0 : _PopupController$getI5.showGameHistoryPopup();
          });
          (_this$btn_changeavata = this.btn_changeavatar) === null || _this$btn_changeavata === void 0 ? void 0 : _this$btn_changeavata.node.on("click", () => {
            var _PopupController$getI6;

            (_PopupController$getI6 = PopupController.getInstance()) === null || _PopupController$getI6 === void 0 ? void 0 : _PopupController$getI6.showChangeAvatarPopup();
          });
          systemEvent.on(ProfilesPopup.CHANGE_AVATAR, spriteFrame => {
            this.spr_avatar.spriteFrame = spriteFrame;
          });
        }

        setProfiles(displayName, userID, money, avatar) {
          this.lbl_username.string = displayName;
          this.lbl_userid.string = "ID: " + userID;
          this.lbl_money.string = StringUtils.formatNumber(money);
          this.spr_avatar.spriteFrame = avatar;
        }

      }, _defineProperty(_class3, "CHANGE_AVATAR", "CHANGE_AVATAR"), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbl_username", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbl_userid", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbl_money", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spr_avatar", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btn_logout", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btn_doimatkhau", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btn_changeavatar", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btn_lichsuchoi", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniPokerBetRankItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, Color, StringUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      Color = module.Color;
    }, function (module) {
      StringUtils = module.StringUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "72a27QlbHBIsbInnd3zWl+N", "MiniPokerBetRankItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MiniPokerBetRankItemView = exports('default', (_dec = ccclass('MiniPokerBetRankItemView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec(_class = (_class2 = (_temp = class MiniPokerBetRankItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txt_time", _descriptor, this);

          _initializerDefineProperty(this, "txt_username", _descriptor2, this);

          _initializerDefineProperty(this, "txt_bet", _descriptor3, this);

          _initializerDefineProperty(this, "txt_win_amount", _descriptor4, this);

          _initializerDefineProperty(this, "txt_type", _descriptor5, this);
        }

        show(time, username, bet, winamount, type) {
          this.txt_time.string = time.toString();
          this.txt_username.string = username.toString();
          this.txt_bet.string = StringUtils.formatNumber(bet);
          this.txt_win_amount.color = Color.YELLOW;
          this.txt_win_amount.string = StringUtils.formatNumber(winamount);
          this.txt_type.string = type.toString();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txt_time", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txt_username", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txt_bet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txt_win_amount", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "txt_type", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { StringUtils } from "../../Utils/StringUtils";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class MiniPokerBetRankItemView extends cc.Component {
      //     @property(cc.Label)
      //     private txt_time : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_username: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_bet : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_win_amount : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_type : cc.Label = null;
      // 
      //     public show(time,username,bet,winamount,type){
      //         this.txt_time.string = time.toString();
      //         this.txt_username.string = username.toString();
      //         this.txt_bet.string = StringUtils.formatNumber(bet);
      //         this.txt_win_amount.string = StringUtils.formatNumber(winamount);
      //         this.txt_type.string = type.toString();
      //         
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MauBinh_CardLib.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GlobalVariables.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, _decorator, GlobalVariables;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }],
    execute: function () {
      exports('MAU_BINH_RESULT', void 0);

      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "730135MkMtOgLFTcToC0rVN", "MauBinh_CardLib", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MAU_BINH_RESULT;

      (function (MAU_BINH_RESULT) {
        MAU_BINH_RESULT[MAU_BINH_RESULT["THUNG_PHA_SANH"] = 0] = "THUNG_PHA_SANH";
        MAU_BINH_RESULT[MAU_BINH_RESULT["TU_QUY"] = 1] = "TU_QUY";
        MAU_BINH_RESULT[MAU_BINH_RESULT["CU_LU"] = 2] = "CU_LU";
        MAU_BINH_RESULT[MAU_BINH_RESULT["THUNG"] = 3] = "THUNG";
        MAU_BINH_RESULT[MAU_BINH_RESULT["SANH"] = 4] = "SANH";
        MAU_BINH_RESULT[MAU_BINH_RESULT["XAM_CO"] = 5] = "XAM_CO";
        MAU_BINH_RESULT[MAU_BINH_RESULT["THU"] = 6] = "THU";
        MAU_BINH_RESULT[MAU_BINH_RESULT["DOI"] = 7] = "DOI";
        MAU_BINH_RESULT[MAU_BINH_RESULT["MAU_THAU"] = 8] = "MAU_THAU";
      })(MAU_BINH_RESULT || (MAU_BINH_RESULT = exports('MAU_BINH_RESULT', {})));

      class GameCard {
        constructor() {
          _defineProperty(this, "N", -1);

          _defineProperty(this, "S", -1);

          _defineProperty(this, "serverCode", void 0);
        }

        setDirect(n, s, currentGameID) {
          this.S = s;
          this.N = n;

          if (this.N == 1) {
            this.N = 14;
          }

          if (this.N == 2 && currentGameID != GlobalVariables.BINH && currentGameID != GlobalVariables.POKER && currentGameID != GlobalVariables.BACAY && currentGameID != GlobalVariables.BLACK_JACK) {
            this.N = 15;
          }
        }

        decodeCard(code, currentGameID) {
          this.serverCode = code;
          this.S = code % 4 + 1;
          this.N = Math.floor(code / 4) + 1;

          if (this.N == 1) {
            this.N = 14;
          }

          if (this.N == 2 && currentGameID != GlobalVariables.BINH && currentGameID != GlobalVariables.POKER && currentGameID != GlobalVariables.BACAY && currentGameID != GlobalVariables.BLACK_JACK) {
            this.N = 15;
          }
        }

        encodeCard(currentGameID = -1) {
          let encodeValue = 0;

          if (currentGameID == GlobalVariables.TIENLEN) {
            encodeValue = 13 * (this.S - 1) + this.N - 2;
          } else {
            encodeValue = 13 * (this.S - 1) + this.N - 1;
          }

          return encodeValue;
        }

        getResourceName(useExtentsion = false) {
          let value = 0;

          if (this.N == 15) {
            value = 2;
          } else if (this.N == 14) {
            value = 1;
          } else {
            value = this.N;
          }

          if (value > 0) {
            return "Card_" + value.toString() + this.getSuitInVietnamese() + (useExtentsion ? ".png" : "");
          } else {
            return "Card_bc.png";
          }
        }

        isHiddenCard() {
          return this.getResourceName() == "Card_bc.png";
        }

        getSuitInVietnamese() {
          if (this.S == 1) return "B"; //bich

          if (this.S == 2) return "T"; //tep

          if (this.S == 3) return "R"; //ro

          if (this.S == 4) return "C"; //co

          return "-1";
        }

      }

      exports('GameCard', GameCard);
      let MauBinh_CardLib = exports('default', (_dec = ccclass('MauBinh_CardLib'), _dec(_class = (_temp = _class2 = class MauBinh_CardLib {
        static sortVector(vector) {
          return vector.sort((a, b) => a.N > b.N ? 1 : -1);
        }

        static sortVector2(vector) {
          return vector.sort((a, b) => {
            if (a.S > b.S || a.S == b.S && a.N > b.N) {
              return 1;
            }

            return -1;
          });
        }

        static indexA(baitrentay) {
          let index = 0;

          for (let i = 0; i < baitrentay.length; i++) {
            if (baitrentay[i].N == 14) {
              index = i;
              break;
            }
          }

          return index;
        }

        static checkThung(baitrentay1) {
          let check = 0;
          let sum = 0;
          let baitrentay = [];
          baitrentay = baitrentay1.slice();

          if (baitrentay1.length == 3) {
            return 0;
          }

          let thung = [];
          baitrentay = MauBinh_CardLib.sortVector2(baitrentay);

          for (let i = 0; i < baitrentay.length - 1; i++) {
            for (let j = i + 1; j < baitrentay.length; j++) {
              if (baitrentay[i].S - baitrentay[j].S == 0) {
                check++;
              } else {
                break;
              }
            }

            if (check != 4) {
              check = 0;
            }

            if (check == 4) {
              thung.push(baitrentay[i]);
              thung.push(baitrentay[i + 1]);
              thung.push(baitrentay[i + 2]);
              thung.push(baitrentay[i + 3]);
              thung.push(baitrentay[i + 4]);
              break;
            }
          }

          if (thung.length == 5) {
            return sum = 5 * 68 + baitrentay[4].N;
          }

          return sum;
        }

        static checkSanh(baitrentay1) {
          let check = 0;
          let sum = 0;
          let baitrentay = [];
          baitrentay = baitrentay1.slice();

          if (baitrentay1.length == 3) {
            return 0;
          }

          let sanh = [];
          baitrentay = MauBinh_CardLib.sortVector(baitrentay);

          if (baitrentay.length == 5) {
            for (let i = 0; i < baitrentay.length - 1; i++) {
              if (baitrentay[i + 1].N - baitrentay[i].N > 1) {
                check = 0;
                sanh = [];
              } else {
                check = check + baitrentay[i + 1].N - baitrentay[i].N;

                if (baitrentay[i + 1].N - baitrentay[i].N == 1) {
                  sanh.push(baitrentay[i]);

                  if (i == baitrentay.length - 2) {
                    sanh.push(baitrentay[i + 1]);
                    check++;
                  }
                }
              }

              if (check == 3) {
                if (sanh[2].N == 4 && MauBinh_CardLib.indexA(baitrentay) > 0) {
                  sanh.push(baitrentay[i + 1]);
                  sanh.push(baitrentay[MauBinh_CardLib.indexA(baitrentay)]);
                  check = 5;
                  break;
                }
              }

              if (check == 4) {
                if (sanh[3].N == 5 && MauBinh_CardLib.indexA(baitrentay) > 0) {
                  sanh.push(baitrentay[MauBinh_CardLib.indexA(baitrentay)]);
                  check++;
                  break;
                }
              }

              if (check == 5) {
                break;
              }
            }

            if (check == 5) {
              if (MauBinh_CardLib.indexA(baitrentay) > 0) {
                if (sanh[0].N == 10) {
                  sum = 4 * 68 + 14;
                } else if (sanh[0].N == 2) {
                  sum = 4 * 68 + 5;
                } else {
                  sum = 4 * 68 + sanh[4].N;
                }
              } else {
                sum = 4 * 68 + sanh[4].N;
              }
            }
          } else {
            for (let i = 0; i < baitrentay.length - 1; i++) {
              if (baitrentay[i + 1].N - baitrentay[i].N > 1) {
                check = 0;
                sanh = [];
              } else {
                check = check + baitrentay[i + 1].N - baitrentay[i].N;

                if (baitrentay[i + 1].N - baitrentay[i].N == 1) {
                  sanh.push(baitrentay[i]);

                  if (i == baitrentay.length - 2) {
                    sanh.push(baitrentay[i + 1]);
                    check++;
                  }
                }
              }

              if (check == 3) {
                if (sanh[2].N == 4 && MauBinh_CardLib.indexA(baitrentay) > 0) {
                  sanh.push(baitrentay[i + 1]);
                  sanh.push(baitrentay[MauBinh_CardLib.indexA(baitrentay)]);
                  check = 5;
                  break;
                }
              }

              if (check == 4) {
                if (sanh[3].N == 5 && MauBinh_CardLib.indexA(baitrentay) > 0) {
                  sanh.push(baitrentay[MauBinh_CardLib.indexA(baitrentay)]);
                  check++;
                  break;
                } else {
                  sanh.push(baitrentay[i + 1]);
                  check++;
                  break;
                }
              }

              if (check == 5) {
                break;
              }
            }

            if (check == 5) {
              if (MauBinh_CardLib.indexA(baitrentay) > 0) {
                if (sanh[0].N == 10) {
                  sum = 4 * 68 + 14;
                } else if (sanh[0].N == 2) {
                  sum = 4 * 68 + 5;
                } else {
                  sum = 4 * 68 + sanh[4].N;
                }
              } else {
                sum = 4 * 68 + sanh[4].N;
              }
            }
          }

          return sum;
        }

        static checkTPS(baitrentay1) {
          let baitrentay;
          baitrentay = baitrentay1.slice();
          let listValue = []; // int check = 0;

          let sum = 0;

          if (baitrentay1.length == 3) {
            return 0;
          }

          for (let i = 0; i < baitrentay.length; i++) {
            let c = baitrentay[i];
            listValue.push(c.encodeCard(GlobalVariables.BINH));
          }

          baitrentay = MauBinh_CardLib.sortVector(baitrentay);

          if (MauBinh_CardLib.checkThung(baitrentay) > 0 && MauBinh_CardLib.checkSanh(baitrentay) > 0) {
            sum = 8 * 68 + baitrentay[4].N;
          }

          return sum;
        }

        static checkCuLu(baitrentay1) {
          let baitrentay = [];
          baitrentay = baitrentay1.slice();
          let check = 0;
          let sum = 0;

          if (baitrentay1.length == 3) {
            return 0;
          }

          let culu = [];
          baitrentay = MauBinh_CardLib.sortVector(baitrentay);

          for (let i = 0; i < baitrentay.length - 1; i++) {
            for (let j = i + 1; j < baitrentay.length; j++) {
              if (baitrentay[i].N == baitrentay[j].N) {
                check++;
              } else {
                break;
              }
            }

            if (check != 2) {
              check = 0;
            }

            if (check == 2) {
              culu.push(baitrentay[i]);
              culu.push(baitrentay[i + 1]);
              culu.push(baitrentay[i + 2]);
              check = 0;
              break;
            }
          }

          culu.forEach(card => {
            baitrentay.splice(baitrentay.indexOf(card), 1);
          });

          for (let i = 0; i < baitrentay.length - 1; i++) {
            if (baitrentay[i].N == baitrentay[i + 1].N) {
              culu.push(baitrentay[i]);
              culu.push(baitrentay[i + 1]);
              baitrentay.splice(i, 1);
              baitrentay.splice(i, 1);
              break;
            }
          }

          if (culu.length == 5) {
            return 6 * 68 + culu[0].N;
          }

          return sum;
        }

        static checkTuQuy(baitrentay1) {
          let baitrentay = [];
          baitrentay = baitrentay1.slice();
          let listValue = [];
          let check = 0;
          let sum = 0;

          if (baitrentay1.length == 3) {
            return 0;
          }

          for (let i = 0; i < baitrentay.length; i++) {
            let c = baitrentay[i];
            listValue.push(c.encodeCard(GlobalVariables.BINH));
          }

          let tuquy = [];
          baitrentay = MauBinh_CardLib.sortVector(baitrentay);

          for (let i = 0; i < baitrentay.length - 1; i++) {
            for (let j = i + 1; j < baitrentay.length; j++) {
              if ((baitrentay[i].N - baitrentay[j].N) % 13 == 0) {
                check++;
              } else {
                break;
              }
            }

            if (check != 3) {
              check = 0;
            }

            if (check == 3) {
              tuquy.push(baitrentay[i]);
              tuquy.push(baitrentay[i + 1]);
              tuquy.push(baitrentay[i + 2]);
              tuquy.push(baitrentay[i + 3]);
              break;
            }
          }

          tuquy.forEach(card => {
            baitrentay = baitrentay.splice(baitrentay.indexOf(card), 1);
          });

          if (tuquy.length == 4) {
            // tuquy.push_back(baitrentay[Random.Range(0, baitrentay.size() - 1)]);
            tuquy.push(baitrentay[0]);
          }

          if (tuquy.length == 5) {
            return 7 * 68 + tuquy[0].N;
          }

          return sum;
        }

        static checkDoi(baitrentay) {
          let sum = 0;
          let baitrentay1 = [];
          baitrentay1 = baitrentay.slice();
          baitrentay1 = MauBinh_CardLib.sortVector(baitrentay1);

          for (let i = 0; i < baitrentay1.length - 1; i++) {
            if (baitrentay1[i].N == baitrentay1[i + 1].N) {
              sum = 1 * 68 + baitrentay1[i].N;
              baitrentay1.splice(i, 1);
              baitrentay1.splice(i, 1);
              break;
            }
          }

          return sum;
        }

        static checkThu(baitrentay) {
          let listValue = [];
          let sum = 0;
          let baiThu = [];

          for (let i = 0; i < baitrentay.length; i++) {
            let c = baitrentay[i];
            listValue.push(c.encodeCard(GlobalVariables.BINH));
          }

          let baitrentay1 = [];
          baitrentay1 = baitrentay.slice();

          if (baitrentay1.length == 3) {
            return 0;
          }

          baitrentay1 = MauBinh_CardLib.sortVector(baitrentay1);
          let check = 0;

          for (let i = 0; i < baitrentay1.length - 1; i++) {
            for (let j = i + 1; j < baitrentay1.length; j++) {
              if (baitrentay1[i].N == baitrentay1[j].N) {
                check++;
              } else {
                break;
              }
            }

            if (check != 1) {
              check = 0;
            }

            if (check == 1) {
              baiThu.push(baitrentay1[i]);
              baiThu.push(baitrentay1[i + 1]);
              check = 0;
              break;
            }
          }

          baiThu.forEach(card => {
            baitrentay1.splice(baitrentay1.indexOf(card), 1);
          });

          for (let i = 0; i < baitrentay1.length - 1; i++) {
            for (let j = i + 1; j < baitrentay1.length; j++) {
              if (baitrentay1[i].N == baitrentay1[j].N && baitrentay1[i].N != baiThu[0].N) {
                check++;
              } else {
                break;
              }
            }

            if (check != 1) {
              check = 0;
            }

            if (check == 1) {
              baiThu.push(baitrentay1[i]);
              baiThu.push(baitrentay1[i + 1]);
              break;
            }
          }

          if (baiThu.length == 4) {
            sum = 2 * 68 + baiThu[3].N;
          }

          return sum;
        }

        static checkSam(baitrentay) {
          let listValue = [];
          let check = 0;
          let sum = 0;

          for (let i = 0; i < baitrentay.length; i++) {
            let c = baitrentay[i];
            listValue.push(c.encodeCard(GlobalVariables.BINH));
          }

          let baitrentay1;
          baitrentay1 = baitrentay.slice();
          baitrentay1 = MauBinh_CardLib.sortVector(baitrentay1);

          for (let i = 0; i < baitrentay1.length - 1; i++) {
            for (let j = i + 1; j < baitrentay1.length; j++) {
              if (baitrentay1[i].N == baitrentay1[j].N) {
                check++;
              } else {
                break;
              }
            }

            if (check != 2) {
              check = 0;
            }

            if (check == 2) {
              sum = 3 * 68 + baitrentay1[i].N;
              break;
            }
          }

          if (check == 2) {
            return sum;
          }

          return sum;
        }

        static getMark(baitrentay) {
          let sum = 0;

          if ((sum = MauBinh_CardLib.checkTPS(baitrentay)) > 0) {
            return sum;
          } else if ((sum = MauBinh_CardLib.checkTuQuy(baitrentay)) > 0) {
            return sum;
          } else if ((sum = MauBinh_CardLib.checkCuLu(baitrentay)) > 0) {
            return sum;
          } else if ((sum = MauBinh_CardLib.checkThung(baitrentay)) > 0) {
            return sum;
          } else if ((sum = MauBinh_CardLib.checkSanh(baitrentay)) > 0) {
            return sum;
          } else if ((sum = MauBinh_CardLib.checkSam(baitrentay)) > 0) {
            return sum;
          } else if ((sum = MauBinh_CardLib.checkThu(baitrentay)) > 0) {
            return sum;
          } else if ((sum = MauBinh_CardLib.checkDoi(baitrentay)) > 0) {
            return sum;
          }

          return sum;
        }

        static getPokerMiniResult(cards) {
          let mark = MauBinh_CardLib.getMark(cards);
          let resultPath = MAU_BINH_RESULT.MAU_THAU;

          if (mark > 8 * 68) {
            resultPath = MAU_BINH_RESULT.THUNG_PHA_SANH;
          } else if (mark > 7 * 68) {
            resultPath = MAU_BINH_RESULT.TU_QUY;
          } else if (mark > 6 * 68) {
            resultPath = MAU_BINH_RESULT.CU_LU;
          } else if (mark > 5 * 68) {
            resultPath = MAU_BINH_RESULT.THUNG;
          } else if (mark > 4 * 68) {
            resultPath = MAU_BINH_RESULT.SANH;
          } else if (mark > 3 * 68) {
            resultPath = MAU_BINH_RESULT.XAM_CO;
          } else if (mark > 2 * 68) {
            resultPath = MAU_BINH_RESULT.THU;
          } else if (mark > 1 * 68) {
            resultPath = MAU_BINH_RESULT.DOI;
          } else if (mark == 0) {
            resultPath = MAU_BINH_RESULT.MAU_THAU;
          }

          return resultPath;
        }

        static getPokerMiniResultString(cards) {
          let result = MauBinh_CardLib.getPokerMiniResult(cards);
          return MauBinh_CardLib.POKER_MINI_RESUTL_STRING[result];
        }

      }, _defineProperty(_class2, "POKER_MINI_RESUTL_STRING", ["Thùng Phá Sảnh", "Tứ Quý", "Cù Lũ", "Thùng", "Sảnh", "Xám Cô", "Thú", "Đôi J+", "Mậu Thầu"]), _temp)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { GlobalVariables } from "./GlobalVariables";
      // 
      // export class GameCard {
      //     public N: number = -1;
      //     public S: number = -1;
      // 
      //     public serverCode;
      // 
      //     public setDirect(n, s, currentGameID) {
      //         this.S = s;
      //         this.N = n;
      // 
      //         if (this.N == 1) {
      //             this.N = 14;
      //         }
      //         if (this.N == 2 && currentGameID != GlobalVariables.BINH && currentGameID != GlobalVariables.POKER && currentGameID !=
      //             GlobalVariables.BACAY && currentGameID != GlobalVariables.BLACK_JACK) {
      //             this.N = 15;
      //         }
      //     }
      // 
      //     public decodeCard(code, currentGameID) {
      //         this.serverCode = code;
      // 
      //         this.S = code % 4 + 1;
      //         this.N = Math.floor(code / 4) + 1;
      // 
      //         if (this.N == 1) {
      //             this.N = 14;
      //         }
      //         if (this.N == 2 && currentGameID != GlobalVariables.BINH && currentGameID != GlobalVariables.POKER && currentGameID !=
      //             GlobalVariables.BACAY && currentGameID != GlobalVariables.BLACK_JACK) {
      //             this.N = 15;
      //         }
      //     }
      // 
      //     public encodeCard(currentGameID = -1) {
      //         let encodeValue = 0;
      // 
      //         if (currentGameID == GlobalVariables.TIENLEN) {
      //             encodeValue = 13 * (this.S - 1) + this.N - 2;
      //         }
      //         else {
      //             encodeValue = 13 * (this.S - 1) + this.N - 1;
      //         }
      // 
      //         return encodeValue;
      //     }
      // 
      //     public getResourceName(useExtentsion = false) {
      //         let value = 0;
      //         if (this.N == 15) {
      //             value = 2;
      //         } else if (this.N == 14) {
      //             value = 1;
      //         } else {
      //             value = this.N;
      //         }
      //         if (value > 0) {
      //             return "Card_" + value.toString() + this.getSuitInVietnamese() + (useExtentsion ? ".png" : "");
      //         } else {
      //             return "Card_bc.png";
      //         }
      //     }
      // 
      //     public isHiddenCard() {
      //         return this.getResourceName() == "Card_bc.png";
      //     }
      // 
      //     public getSuitInVietnamese() {
      //         if (this.S == 1)
      //             return "B"; //bich
      //         if (this.S == 2)
      //             return "T"; //tep
      //         if (this.S == 3)
      //             return "R"; //ro
      //         if (this.S == 4)
      //             return "C"; //co
      //         return "-1";
      //     }
      // }
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class MauBinh_CardLib {
      // 
      //     public static sortVector(vector: GameCard[]) {
      //         return vector.sort((a, b) => a.N > b.N ? 1 : -1);
      //     }
      // 
      //     public static sortVector2(vector: GameCard[]) {
      //         return vector.sort((a, b) => {
      //             if (a.S > b.S || (a.S == b.S && a.N > b.N)) {
      //                 return 1;
      //             }
      // 
      //             return -1;
      //         });
      //     }
      // 
      //     public static indexA(baitrentay: GameCard[]) {
      //         let index = 0;
      //         for (let i = 0; i < baitrentay.length; i++) {
      //             if (baitrentay[i].N == 14) {
      //                 index = i;
      //                 break;
      //             }
      //         }
      //         return index;
      //     }
      // 
      //     public static checkThung(baitrentay1: GameCard[]) {
      // 
      //         let listValue: number[] = [];
      //         let check = 0;
      //         let sum = 0;
      //         let baitrentay: GameCard[] = [];
      //         baitrentay = baitrentay1.slice();
      //         if (baitrentay1.length == 3) {
      //             return 0;
      //         }
      // 
      //         let thung: GameCard[] = [];
      //         baitrentay = MauBinh_CardLib.sortVector2(baitrentay);
      // 
      //         for (let i = 0; i < baitrentay.length - 1; i++) {
      //             for (let j = i + 1; j < baitrentay.length; j++) {
      //                 if ((baitrentay[i].S - baitrentay[j].S) == 0) {
      //                     check++;
      //                 } else {
      //                     break;
      //                 }
      //             }
      //             if (check != 4) {
      //                 check = 0;
      //             }
      //             if (check == 4) {
      //                 thung.push(baitrentay[i]);
      //                 thung.push(baitrentay[i + 1]);
      //                 thung.push(baitrentay[i + 2]);
      //                 thung.push(baitrentay[i + 3]);
      //                 thung.push(baitrentay[i + 4]);
      //                 break;
      //             }
      //         }
      //         if (thung.length == 5) {
      //             return sum = 5 * 68 + baitrentay[4].N;
      //         }
      //         return sum;
      //     }
      // 
      //     public static checkSanh(baitrentay1: GameCard[]) {
      //         let listValue;
      //         let check = 0;
      //         let sum = 0;
      // 
      //         let baitrentay: GameCard[] = [];
      //         baitrentay = baitrentay1.slice();
      // 
      //         if (baitrentay1.length == 3) {
      //             return 0;
      //         }
      //         let sanh: GameCard[] = [];
      //         baitrentay = MauBinh_CardLib.sortVector(baitrentay);
      // 
      //         if (baitrentay.length == 5) {
      //             for (let i = 0; i < baitrentay.length - 1; i++) {
      //                 if (baitrentay[i + 1].N - baitrentay[i].N > 1) {
      //                     check = 0;
      //                     sanh = [];
      //                 } else {
      //                     check = check + baitrentay[i + 1].N - baitrentay[i].N;
      //                     if (baitrentay[i + 1].N - baitrentay[i].N == 1) {
      //                         sanh.push(baitrentay[i]);
      // 
      //                         if (i == baitrentay.length - 2) {
      //                             sanh.push(baitrentay[i + 1]);
      //                             check++;
      //                         }
      //                     }
      //                 }
      //                 if (check == 3) {
      //                     if (sanh[2].N == 4 && MauBinh_CardLib.indexA(baitrentay) > 0) {
      //                         sanh.push(baitrentay[i + 1]);
      //                         sanh.push(baitrentay[MauBinh_CardLib.indexA(baitrentay)]);
      //                         check = 5;
      //                         break;
      //                     }
      //                 }
      //                 if (check == 4) {
      //                     if (sanh[3].N == 5 && MauBinh_CardLib.indexA(baitrentay) > 0) {
      //                         sanh.push(baitrentay[MauBinh_CardLib.indexA(baitrentay)]);
      //                         check++;
      //                         break;
      //                     }
      //                 }
      //                 if (check == 5) {
      //                     break;
      //                 }
      //             }
      // 
      //             if (check == 5) {
      //                 if (MauBinh_CardLib.indexA(baitrentay) > 0) {
      //                     if (sanh[0].N == 10) {
      //                         sum = 4 * 68 + 14;
      //                     } else if (sanh[0].N == 2) {
      //                         sum = 4 * 68 + 5;
      //                     } else {
      //                         sum = 4 * 68 + sanh[4].N;
      //                     }
      //                 } else {
      //                     sum = 4 * 68 + sanh[4].N;
      //                 }
      //             }
      //         } else {
      //             for (let i = 0; i < baitrentay.length - 1; i++) {
      //                 if (baitrentay[i + 1].N - baitrentay[i].N > 1) {
      //                     check = 0;
      //                     sanh = [];
      //                 } else {
      //                     check = check + baitrentay[i + 1].N - baitrentay[i].N;
      //                     if (baitrentay[i + 1].N - baitrentay[i].N == 1) {
      //                         sanh.push(baitrentay[i]);
      //                         if (i == baitrentay.length - 2) {
      //                             sanh.push(baitrentay[i + 1]);
      //                             check++;
      //                         }
      //                     }
      //                 }
      //                 if (check == 3) {
      //                     if (sanh[2].N == 4 && MauBinh_CardLib.indexA(baitrentay) > 0) {
      //                         sanh.push(baitrentay[i + 1]);
      //                         sanh.push(baitrentay[MauBinh_CardLib.indexA(baitrentay)]);
      //                         check = 5;
      //                         break;
      //                     }
      //                 }
      //                 if (check == 4) {
      //                     if (sanh[3].N == 5 && MauBinh_CardLib.indexA(baitrentay) > 0) {
      //                         sanh.push(baitrentay[MauBinh_CardLib.indexA(baitrentay)]);
      //                         check++;
      //                         break;
      //                     } else {
      //                         sanh.push(baitrentay[i + 1]);
      //                         check++;
      //                         break;
      //                     }
      //                 }
      //                 if (check == 5) {
      //                     break;
      //                 }
      //             }
      // 
      //             if (check == 5) {
      //                 if (MauBinh_CardLib.indexA(baitrentay) > 0) {
      //                     if (sanh[0].N == 10) {
      //                         sum = 4 * 68 + 14;
      //                     } else if (sanh[0].N == 2) {
      //                         sum = 4 * 68 + 5;
      //                     } else {
      //                         sum = 4 * 68 + sanh[4].N;
      //                     }
      //                 } else {
      //                     sum = 4 * 68 + sanh[4].N;
      //                 }
      //             }
      //         }
      // 
      //         return sum;
      //     }
      // 
      // 
      //     public static checkTPS(baitrentay1: GameCard[]): number {
      //         let baitrentay: GameCard[];
      //         baitrentay = baitrentay1.slice();
      //         let listValue: number[] = [];
      //         //    int check = 0;
      //         let sum = 0;
      //         if (baitrentay1.length == 3) {
      //             return 0;
      //         }
      //         for (let i = 0; i < baitrentay.length; i++) {
      //             let c = baitrentay[i];
      //             listValue.push(c.encodeCard(GlobalVariables.BINH));
      //         }
      // 
      //         baitrentay = MauBinh_CardLib.sortVector(baitrentay);
      // 
      //         if (MauBinh_CardLib.checkThung(baitrentay) > 0 && MauBinh_CardLib.checkSanh(baitrentay) > 0) {
      //             sum = 8 * 68 + baitrentay[4].N;
      //         }
      // 
      //         return sum;
      //     }
      // 
      //     public static checkCuLu(baitrentay1: GameCard[]) {
      //         let listValue;
      //         let baitrentay: GameCard[] = [];
      //         baitrentay = baitrentay1.slice();
      // 
      //         let check = 0;
      //         let sum = 0;
      //         if (baitrentay1.length == 3) {
      //             return 0;
      //         }
      // 
      //         let culu: GameCard[] = [];
      //         baitrentay = MauBinh_CardLib.sortVector(baitrentay);
      // 
      //         for (let i = 0; i < baitrentay.length - 1; i++) {
      //             for (let j = i + 1; j < baitrentay.length; j++) {
      //                 if (baitrentay[i].N == baitrentay[j].N) {
      //                     check++;
      //                 } else {
      //                     break;
      //                 }
      //             }
      //             if (check != 2) {
      //                 check = 0;
      //             }
      //             if (check == 2) {
      //                 culu.push(baitrentay[i]);
      //                 culu.push(baitrentay[i + 1]);
      //                 culu.push(baitrentay[i + 2]);
      //                 check = 0;
      //                 break;
      //             }
      //         }
      //         culu.forEach(card => {
      //             baitrentay.splice(baitrentay.indexOf(card), 1);
      //         });
      //         for (let i = 0; i < baitrentay.length - 1; i++) {
      //             if (baitrentay[i].N == baitrentay[i + 1].N) {
      //                 culu.push(baitrentay[i]);
      //                 culu.push(baitrentay[i + 1]);
      //                 baitrentay.splice(i, 1);
      //                 baitrentay.splice(i, 1);
      //                 break;
      //             }
      //         }
      // 
      //         if (culu.length == 5) {
      //             return 6 * 68 + culu[0].N;
      //         }
      //         return sum;
      //     }
      // 
      //     public static checkTuQuy(baitrentay1: GameCard[]) {
      //         let baitrentay: GameCard[] = [];
      //         baitrentay = baitrentay1.slice();
      //         let listValue: number[] = [];
      // 
      //         let check = 0;
      //         let sum = 0;
      //         if (baitrentay1.length == 3) {
      //             return 0;
      //         }
      //         for (let i = 0; i < baitrentay.length; i++) {
      //             let c = baitrentay[i];
      //             listValue.push(c.encodeCard(GlobalVariables.BINH));
      //         }
      //         let tuquy: GameCard[] = [];
      //         baitrentay = MauBinh_CardLib.sortVector(baitrentay);
      // 
      //         for (let i = 0; i < baitrentay.length - 1; i++) {
      //             for (let j = i + 1; j < baitrentay.length; j++) {
      //                 if ((baitrentay[i].N - baitrentay[j].N) % 13 == 0) {
      //                     check++;
      //                 } else {
      //                     break;
      //                 }
      //             }
      //             if (check != 3) {
      //                 check = 0;
      //             }
      //             if (check == 3) {
      //                 tuquy.push(baitrentay[i]);
      //                 tuquy.push(baitrentay[i + 1]);
      //                 tuquy.push(baitrentay[i + 2]);
      //                 tuquy.push(baitrentay[i + 3]);
      //                 break;
      //             }
      //         }
      //         tuquy.forEach(card => {
      //             baitrentay = baitrentay.splice(baitrentay.indexOf(card), 1);
      //         });
      // 
      //         if (tuquy.length == 4) {
      //             //        tuquy.push_back (baitrentay [Random.Range (0, baitrentay.size()-1)]);
      //             tuquy.push(baitrentay[0]);
      //         }
      //         if (tuquy.length == 5) {
      //             return 7 * 68 + tuquy[0].N;
      //         }
      //         return sum;
      //     }
      // 
      //     public static checkDoi(baitrentay: GameCard[]) {
      //         let listValue;
      //         let sum = 0;
      //         let baitrentay1: GameCard[] = [];
      //         baitrentay1 = baitrentay.slice();
      //         baitrentay1 = MauBinh_CardLib.sortVector(baitrentay1);
      // 
      //         for (let i = 0; i < baitrentay1.length - 1; i++) {
      //             if (baitrentay1[i].N == baitrentay1[i + 1].N) {
      //                 sum = 1 * 68 + baitrentay1[i].N;
      //                 baitrentay1.splice(i, 1);
      //                 baitrentay1.splice(i, 1);
      //                 break;
      //             }
      //         }
      //         return sum;
      //     }
      // 
      //     public static checkThu(baitrentay: GameCard[]) {
      //         let listValue: number[] = [];
      //         let sum = 0;
      //         let baiThu: GameCard[] = [];
      //         for (let i = 0; i < baitrentay.length; i++) {
      //             let c = baitrentay[i];
      //             listValue.push(c.encodeCard(GlobalVariables.BINH));
      //         }
      // 
      //         let baitrentay1: GameCard[] = [];
      //         baitrentay1 = baitrentay.slice();
      //         if (baitrentay1.length == 3) {
      //             return 0;
      //         }
      //         baitrentay1 = MauBinh_CardLib.sortVector(baitrentay1);
      // 
      //         let check = 0;
      //         for (let i = 0; i < baitrentay1.length - 1; i++) {
      //             for (let j = i + 1; j < baitrentay1.length; j++) {
      //                 if (baitrentay1[i].N == baitrentay1[j].N) {
      //                     check++;
      //                 } else {
      //                     break;
      //                 }
      //             }
      //             if (check != 1) {
      //                 check = 0;
      //             }
      //             if (check == 1) {
      //                 baiThu.push(baitrentay1[i]);
      //                 baiThu.push(baitrentay1[i + 1]);
      //                 check = 0;
      //                 break;
      //             }
      //         }
      // 
      //         baiThu.forEach(card => {
      //             baitrentay1.splice(baitrentay1.indexOf(card), 1);
      //         });
      // 
      //         for (let i = 0; i < baitrentay1.length - 1; i++) {
      //             for (let j = i + 1; j < baitrentay1.length; j++) {
      //                 if (baitrentay1[i].N == baitrentay1[j].N && baitrentay1[i].N != baiThu[0].N) {
      //                     check++;
      //                 } else {
      //                     break;
      //                 }
      //             }
      //             if (check != 1) {
      //                 check = 0;
      //             }
      //             if (check == 1) {
      //                 baiThu.push(baitrentay1[i]);
      //                 baiThu.push(baitrentay1[i + 1]);
      //                 break;
      //             }
      //         }
      //         if (baiThu.length == 4) {
      //             sum = 2 * 68 + baiThu[3].N;
      //         }
      //         return sum;
      //     }
      // 
      //     public static checkSam(baitrentay: GameCard[]) {
      //         let listValue: number[] = [];
      //         let check = 0;
      //         let sum = 0;
      //         for (let i = 0; i < baitrentay.length; i++) {
      //             let c = baitrentay[i];
      //             listValue.push(c.encodeCard(GlobalVariables.BINH));
      //         }
      //         let baitrentay1: GameCard[];
      //         baitrentay1 = baitrentay.slice();
      // 
      //         baitrentay1 = MauBinh_CardLib.sortVector(baitrentay1);
      // 
      //         for (let i = 0; i < baitrentay1.length - 1; i++) {
      //             for (let j = i + 1; j < baitrentay1.length; j++) {
      //                 if (baitrentay1[i].N == baitrentay1[j].N) {
      //                     check++;
      //                 } else {
      //                     break;
      //                 }
      //             }
      //             if (check != 2) {
      //                 check = 0;
      //             }
      //             if (check == 2) {
      //                 sum = 3 * 68 + baitrentay1[i].N;
      //                 break;
      //             }
      //         }
      //         if (check == 2) {
      //             return sum;
      //         }
      //         return sum;
      //     }
      // 
      // 
      //     public static getMark(baitrentay: GameCard[]): number {
      //         let sum = 0;
      //         if ((sum = MauBinh_CardLib.checkTPS(baitrentay)) > 0) {
      //             return sum;
      //         } else if ((sum = MauBinh_CardLib.checkTuQuy(baitrentay)) > 0) {
      //             return sum;
      //         } else if ((sum = MauBinh_CardLib.checkCuLu(baitrentay)) > 0) {
      //             return sum;
      //         } else if ((sum = MauBinh_CardLib.checkThung(baitrentay)) > 0) {
      //             return sum;
      //         } else if ((sum = MauBinh_CardLib.checkSanh(baitrentay)) > 0) {
      //             return sum;
      //         } else if ((sum = MauBinh_CardLib.checkSam(baitrentay)) > 0) {
      //             return sum;
      //         } else if ((sum = MauBinh_CardLib.checkThu(baitrentay)) > 0) {
      //             return sum;
      //         } else if ((sum = MauBinh_CardLib.checkDoi(baitrentay)) > 0) {
      //             return sum;
      //         }
      //         return sum;
      //     }
      // 
      //     public static getPokerMiniResult(cards: GameCard[]) {
      //         let mark = MauBinh_CardLib.getMark(cards);
      //         let resultPath = MAU_BINH_RESULT.MAU_THAU;
      //         if (mark > 8 * 68) {
      //             resultPath = MAU_BINH_RESULT.THUNG_PHA_SANH;
      //         }
      //         else if (mark > 7 * 68) {
      //             resultPath = MAU_BINH_RESULT.TU_QUY;
      //         }
      //         else if (mark > 6 * 68) {
      //             resultPath = MAU_BINH_RESULT.CU_LU;
      //         }
      //         else if (mark > 5 * 68) {
      //             resultPath = MAU_BINH_RESULT.THUNG;
      //         }
      //         else if (mark > 4 * 68) {
      //             resultPath = MAU_BINH_RESULT.SANH;
      //         }
      //         else if (mark > 3 * 68) {
      //             resultPath = MAU_BINH_RESULT.XAM_CO;
      //         }
      //         else if (mark > 2 * 68) {
      //             resultPath = MAU_BINH_RESULT.THU;
      //         }
      //         else if (mark > 1 * 68) {
      //             resultPath = MAU_BINH_RESULT.DOI;
      //         }
      //         else if (mark == 0) {
      //             resultPath = MAU_BINH_RESULT.MAU_THAU;
      //         }
      // 
      //         return resultPath;
      //     }
      // 
      //     public static getPokerMiniResultString(cards: GameCard[]) {
      //         let result = MauBinh_CardLib.getPokerMiniResult(cards);
      //         return MauBinh_CardLib.POKER_MINI_RESUTL_STRING[result];
      //     }
      // 
      //     public static POKER_MINI_RESUTL_STRING = ["Thùng Phá Sảnh","Tứ Quý","Cù Lũ","Thùng","Sảnh","Xám Cô","Thú","Đôi J+","Mậu Thầu"];
      // }
      // 
      // export enum MAU_BINH_RESULT {
      //     THUNG_PHA_SANH, TU_QUY, CU_LU, THUNG,
      //     SANH, XAM_CO, THU, DOI, MAU_THAU
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GamePlayManager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './MiniGameNetworkHandler.ts', './GameNetworkHandler.ts', './NotiView.ts', './GlobalVariables.ts', './LoadingView.ts', './LobbyViewController.ts', './CCMiniGameRoot.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, _decorator, log, GameConfigManager, MessageRequest, MessageResponse, GameNetworkHandler, NotiView, GLOBAL_MESSAGE, LoadingView, LobbyViewController, CCMiniGameRoot;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MessageResponse = module.MessageResponse;
    }, function (module) {
      GameNetworkHandler = module.GameNetworkHandler;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GLOBAL_MESSAGE = module.GLOBAL_MESSAGE;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      CCMiniGameRoot = module.CCMiniGameRoot;
    }],
    execute: function () {
      exports({
        GameState: void 0,
        NETWORK_STATE: void 0
      });

      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "738b98p6o9Odqw+fDWXda36", "GamePlayManager", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let NETWORK_STATE;

      (function (NETWORK_STATE) {
        NETWORK_STATE[NETWORK_STATE["UNLOGGED_IN"] = 0] = "UNLOGGED_IN";
        NETWORK_STATE[NETWORK_STATE["LOGGED_IN"] = 1] = "LOGGED_IN";
      })(NETWORK_STATE || (NETWORK_STATE = exports('NETWORK_STATE', {})));

      let GameState;

      (function (GameState) {
        GameState[GameState["WAITING"] = 0] = "WAITING";
        GameState[GameState["PLAYING"] = 1] = "PLAYING";
        GameState[GameState["VIEWING"] = 2] = "VIEWING";
      })(GameState || (GameState = exports('GameState', {})));

      let GamePlayManager = exports('GamePlayManager', (_dec = ccclass('GamePlayManager'), _dec(_class = (_temp = _class2 = class GamePlayManager {
        static joinRoom(roomID, serverID, roomPassword) {
          GamePlayManager.roomID = roomID;
          GamePlayManager.roomPassword = roomPassword;
          let data = [MessageRequest.JoinRoom_Type, "Simms", roomID, roomPassword];
          GameNetworkHandler.send(data);
        }

        static reJoinRoom() {
          let data = [MessageRequest.JoinRoom_Type, "Simms", GamePlayManager.roomID, GamePlayManager.roomPassword];
          GameNetworkHandler.send(data);
        }

        static leaveRoom(roomID = -1) {
          if (roomID == -1) {
            roomID = GamePlayManager.roomID;
          }

          let data = [MessageRequest.LeaveRoom_Type, "Simms", roomID];
          GameNetworkHandler.send(data);
        }

        static canSendChat() {
          return GamePlayManager.timeoutChat == null;
        }

        static sendChat(content, roomID = -1) {
          if (GamePlayManager.STATE == NETWORK_STATE.UNLOGGED_IN || !GamePlayManager.canSendChat()) {
            return;
          }

          let dict = {};
          dict["cmd"] = 102;
          dict["mgs"] = content;
          let data = [MessageRequest.RoomPlugin_Type, "Simms", GamePlayManager.roomID, dict];
          GameNetworkHandler.send(data);
          GamePlayManager.timeoutChat = setTimeout(() => {
            GamePlayManager.timeoutChat = null;
          }, 2000);
        }

        static login() {
          GameNetworkHandler.init(GameConfigManager.MainWSURL);
        }

        static reconnect() {
          var _LobbyViewController$;

          GamePlayManager.login();
          (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.reconnect();
        }

        static refreshInBackground() {
          GamePlayManager.isRefreshingInBackground = true;
          GamePlayManager.logout();
        }

        static logout() {
          var _LoadingView$getInsta;

          (_LoadingView$getInsta = LoadingView.getInstance()) === null || _LoadingView$getInsta === void 0 ? void 0 : _LoadingView$getInsta.show();
          let data = [MessageRequest.LogOut_Type, "Simms"];
          GameNetworkHandler.send(data);
        }

        static sendRefreshMoney() {
          if (GamePlayManager.STATE == NETWORK_STATE.UNLOGGED_IN) {
            return;
          }

          let dict = {};
          dict["cmd"] = GLOBAL_MESSAGE.REFRESH_MONEY;
          let mes = [MessageRequest.ZonePlugin_Type, "Simms", "channelPlugin", dict];
          GameNetworkHandler.send(mes);
        }

        static getUserInLobby() {
          if (GamePlayManager.STATE == NETWORK_STATE.UNLOGGED_IN) {
            return;
          }

          let dict = {};
          dict["cmd"] = 303;
          dict["rid"] = GamePlayManager.roomID;
          let mes = [MessageRequest.ZonePlugin_Type, "Simms", "channelPlugin", dict];
          GameNetworkHandler.send(mes);
        }

        static sendInvitationsTo(names) {
          if (GamePlayManager.STATE == NETWORK_STATE.UNLOGGED_IN) {
            return;
          } // * CHEAT TO TEST ONLY *


          names.push("de97dffc-9fa2-46dc-8cee-3a2de75ba8d7"); // kushi01

          names.push("055ee000-a89e-476b-88c9-d0b33374aa02"); // lavi002

          names.push("222f9874-001f-4bf7-9042-1237bda4d19f"); // kushi12345

          let dict = {};
          dict["cmd"] = 304;
          dict["rid"] = GamePlayManager.roomID;
          dict["us"] = names;
          let mes = [MessageRequest.ZonePlugin_Type, "Simms", "channelPlugin", dict];
          GameNetworkHandler.send(mes);
        }

        static getTables(gameID) {
          if (GamePlayManager.STATE == NETWORK_STATE.UNLOGGED_IN) {
            return;
          }

          let dict = {};
          dict["cmd"] = GLOBAL_MESSAGE.GET_TABLES;
          dict["gid"] = gameID;
          dict["aid"] = 1;
          let mes = [MessageRequest.ZonePlugin_Type, "Simms", "channelPlugin", dict];
          GameNetworkHandler.send(mes);
        }

        static handleMessage(message) {
          message = JSON.parse(message);
          let messageType = message[0];

          switch (messageType) {
            case MessageResponse.LogIn_Response:
              {
                log("===== Handle LOG IN message response =====");
                let isSucceed = message[1];
                GamePlayManager.STATE = isSucceed ? NETWORK_STATE.LOGGED_IN : NETWORK_STATE.UNLOGGED_IN;

                if (isSucceed) {
                  var _CCMiniGameRoot$getIn;

                  log("=== Logged In SUCCEED ===");
                  (_CCMiniGameRoot$getIn = CCMiniGameRoot.getInstance()) === null || _CCMiniGameRoot$getIn === void 0 ? void 0 : _CCMiniGameRoot$getIn.login();
                } else {
                  var _LoadingView$getInsta2;

                  log("=== Logged In FAILED ===");
                  (_LoadingView$getInsta2 = LoadingView.getInstance()) === null || _LoadingView$getInsta2 === void 0 ? void 0 : _LoadingView$getInsta2.hide();
                }

                break;
              }

            case MessageResponse.LogOut_Response:
              {
                var _CCMiniGameRoot$getIn2;

                let logOutCode = message[2];
                let mesDialog = "";
                if (logOutCode == 1) ;else if (logOutCode == 2) {
                  mesDialog = "Bạn bị mời ra khỏi hệ thống!";
                } else if (logOutCode == 4) {
                  mesDialog = "Bạn đã đăng nhập trên thiết bị khác!";
                }

                if (mesDialog.length > 0) {
                  NotiView.getInstance().showMessage(mesDialog);
                }

                GamePlayManager.STATE = NETWORK_STATE.UNLOGGED_IN;
                (_CCMiniGameRoot$getIn2 = CCMiniGameRoot.getInstance()) === null || _CCMiniGameRoot$getIn2 === void 0 ? void 0 : _CCMiniGameRoot$getIn2.logout();
                break;
              }

            case MessageResponse.JoinRoom_Response:
              {
                var _LobbyViewController$2;

                (_LobbyViewController$2 = LobbyViewController.getInstance()) === null || _LobbyViewController$2 === void 0 ? void 0 : _LobbyViewController$2.handleJoinRoomResponse(message);
                break;
              }

            case MessageResponse.LeaveRoom_Response:
              {
                var _LobbyViewController$3;

                (_LobbyViewController$3 = LobbyViewController.getInstance()) === null || _LobbyViewController$3 === void 0 ? void 0 : _LobbyViewController$3.handleLeaveRoomResponse(message);
                break;
              }

            case MessageResponse.Extension_Response:
              {
                var _LobbyViewController$4;

                (_LobbyViewController$4 = LobbyViewController.getInstance()) === null || _LobbyViewController$4 === void 0 ? void 0 : _LobbyViewController$4.handleLobbyMessage(message);
                break;
              }

            case MessageResponse.Ping_Response:
              {
                break;
              }

            default:
              log("\n===== Handle UNKNOWN message response =====");
              break;
          }
        }

      }, _defineProperty(_class2, "roomID", ""), _defineProperty(_class2, "roomPassword", ""), _defineProperty(_class2, "STATE", NETWORK_STATE.UNLOGGED_IN), _defineProperty(_class2, "isRefreshingInBackground", false), _defineProperty(_class2, "timeoutChat", null), _temp)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TableListView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './MiniGameNetworkHandler.ts', './GameNetworkHandler.ts', './GlobalVariables.ts', './LoadingView.ts', './TableItemView.ts', './LobbyViewController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Button, Sprite, SpriteFrame, _decorator, Component, sys, instantiate, GameConfigManager, MessageRequest, GameNetworkHandler, GLOBAL_MESSAGE, GlobalVariables, LoadingView, TableItemView, LobbyViewController, GamePlayManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Button = module.Button;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      Component = module.Component;
      sys = module.sys;
      instantiate = module.instantiate;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      MessageRequest = module.MessageRequest;
    }, function (module) {
      GameNetworkHandler = module.GameNetworkHandler;
    }, function (module) {
      GLOBAL_MESSAGE = module.GLOBAL_MESSAGE;
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      TableItemView = module.TableItemView;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _temp;

      cclegacy._RF.push({}, "74c98TqVuxN8axTRhAkKQNQ", "TableListView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class TableInfo {
        constructor() {
          _defineProperty(this, "roomID", void 0);

          _defineProperty(this, "bet", void 0);

          _defineProperty(this, "serverID", void 0);

          _defineProperty(this, "maxUser", void 0);

          _defineProperty(this, "userCount", void 0);

          _defineProperty(this, "minMoney", void 0);

          _defineProperty(this, "minMoneyBuyIn", void 0);

          _defineProperty(this, "maxMoneyBuyIn", void 0);

          _defineProperty(this, "hasPassword", false);

          _defineProperty(this, "isBigTable", false);

          _defineProperty(this, "chan_gameMode", void 0);

          _defineProperty(this, "chan_chickyMode", void 0);
        }

      }

      exports('TableInfo', TableInfo);
      let TableListView = exports('TableListView', (_dec = ccclass('TableListView'), _dec2 = property(Node), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(Button), _dec6 = property(Sprite), _dec7 = property([SpriteFrame]), _dec8 = property(TableItemView), _dec(_class = (_class2 = (_temp = class TableListView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "root", _descriptor, this);

          _initializerDefineProperty(this, "btn_trove", _descriptor2, this);

          _initializerDefineProperty(this, "btn_choinhanh", _descriptor3, this);

          _initializerDefineProperty(this, "btn_luatchoi", _descriptor4, this);

          _initializerDefineProperty(this, "spr_table_list_logo", _descriptor5, this);

          _initializerDefineProperty(this, "spr_frame_table_list_logo", _descriptor6, this);

          _initializerDefineProperty(this, "item_template", _descriptor7, this);

          _defineProperty(this, "pooled_items", []);

          _defineProperty(this, "gameID", -1);
        }

        onLoad() {
          var _this$btn_trove, _this$btn_choinhanh, _this$btn_luatchoi;

          (_this$btn_trove = this.btn_trove) === null || _this$btn_trove === void 0 ? void 0 : _this$btn_trove.node.on('click', () => {
            var _LobbyViewController$;

            (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.showGameList();
          });
          (_this$btn_choinhanh = this.btn_choinhanh) === null || _this$btn_choinhanh === void 0 ? void 0 : _this$btn_choinhanh.node.on('click', () => {
            this.onPlayNow();
          });
          (_this$btn_luatchoi = this.btn_luatchoi) === null || _this$btn_luatchoi === void 0 ? void 0 : _this$btn_luatchoi.node.on('click', () => {
            sys.openURL(GameConfigManager.helpURL);
          });
        }

        onPlayNow() {
          LoadingView.getInstance().show();
          let dict = {};
          dict["cmd"] = GLOBAL_MESSAGE.QUICK_PLAY;
          dict["gid"] = this.gameID;
          dict["aid"] = 1;

          if (this.gameID == GlobalVariables.SAM || this.gameID == GlobalVariables.TIENLEN) {
            dict["Mu"] = 2;
          }

          let mes = [MessageRequest.ZonePlugin_Type, "Simms", "channelPlugin", dict];
          GameNetworkHandler.send(mes);
        }

        getPooledItem() {
          let items = this.pooled_items.filter(x => !x.node.active);

          if (items.length <= 0) {
            var _this$item_template;

            let item = instantiate((_this$item_template = this.item_template) === null || _this$item_template === void 0 ? void 0 : _this$item_template.node);
            item.parent = this.item_template.node.parent;
            let cmp = item === null || item === void 0 ? void 0 : item.getComponent(TableItemView);
            this.pooled_items.push(cmp);
            return cmp;
          }

          return items[0].getComponent(TableItemView);
        }

        getTables(gameID) {
          var _LoadingView$getInsta, _LobbyViewController$2;

          (_LoadingView$getInsta = LoadingView.getInstance()) === null || _LoadingView$getInsta === void 0 ? void 0 : _LoadingView$getInsta.show();
          (_LobbyViewController$2 = LobbyViewController.getInstance()) === null || _LobbyViewController$2 === void 0 ? void 0 : _LobbyViewController$2.getLogo().setAnimation(0, "loading", true);
          GamePlayManager.getTables(gameID);
        }

        reset() {
          this.pooled_items.forEach(x => {
            x.node.active = false;
          });
        }

        show(tableArr) {
          this.reset();
          let tablesInfo = [];

          for (let i = 0; i < tableArr.length; i++) {
            let newTableInfo = new TableInfo();
            let tableDict = tableArr[i];

            if (tableDict["inc"] != null && tableDict["inc"] != undefined && tableDict["inc"] == true) {
              continue;
            }

            this.gameID = tableDict["gid"];
            newTableInfo.roomID = tableDict["rid"];
            newTableInfo.bet = tableDict["b"];
            newTableInfo.serverID = tableDict["sid"];
            newTableInfo.maxUser = tableDict["Mu"];
            newTableInfo.userCount = tableDict["uC"];
            newTableInfo.minMoney = tableDict["mM"];
            newTableInfo.minMoneyBuyIn = tableDict["mMBI"];
            newTableInfo.maxMoneyBuyIn = tableDict["MMBI"];

            if (tableDict["hpwd"] != null && tableDict["hpwd"] != undefined) {
              newTableInfo.hasPassword = tableDict["hpwd"];
            }

            if (tableDict["hg"] != null && tableDict["hg"] != undefined) {
              newTableInfo.isBigTable = tableDict["hg"];
            } //... fix chan


            if (tableDict["rMt"] != null && tableDict["rMt"] != undefined) {
              let vlRoomMode = tableDict["rMt"];
              newTableInfo.chan_gameMode = vlRoomMode["gM"];
              newTableInfo.chan_chickyMode = vlRoomMode["ckM"];
            }

            tablesInfo.push(newTableInfo);
          }

          let allTablesInfo = tablesInfo.reduce(function (r, a) {
            r[a.bet] = r[a.bet] || [];
            r[a.bet].push(a);
            return r;
          }, Object.create(null));
          let groupTables = [];

          for (let bet in allTablesInfo) {
            let table = new TableInfo();
            table.bet = bet;
            table.userCount = 0;
            allTablesInfo[bet].forEach(ti => {
              table.userCount += ti.userCount;
            });
            groupTables.push(table);
          }

          groupTables = groupTables.sort((a, b) => {
            return a.isBigTable && a.bet > b.bet ? -1 : 1;
          });
          groupTables.forEach(c => {
            let item = this.getPooledItem();
            item.show(c.bet, c.userCount, this.gameID);
          });
          this.spr_table_list_logo.spriteFrame = this.spr_frame_table_list_logo[this.gameID];
          this.root.active = true;
        }

        hide() {
          this.root.active = false;
          this.pooled_items.forEach(x => x.hide());
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_trove", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_choinhanh", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_luatchoi", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "spr_table_list_logo", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "spr_frame_table_list_logo", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "item_template", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScaleCmp.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, _decorator, Component, Vec3, tween, Tween;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      tween = module.tween;
      Tween = module.Tween;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "75004oWkDtN/r1G/Wi9q+UP", "ScaleCmp", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ScaleCmp = exports('default', (_dec = ccclass('ScaleCmp'), _dec2 = property(Number), _dec3 = property(Number), _dec(_class = (_class2 = (_temp = class ScaleCmp extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "time", _descriptor, this);

          _initializerDefineProperty(this, "to", _descriptor2, this);

          _defineProperty(this, "originalScale", Vec3.ONE);
        }

        start() {
          this.originalScale = this.node.scale;
          let scale = tween(this.node).repeatForever(tween(this.node).sequence(tween().to(this.time, {
            scale: new Vec3(this.to, this.to, 1)
          }), tween().to(this.time, {
            scale: new Vec3(this.originalScale)
          })));
          scale.start();
        }

        stop() {
          Tween.stopAllByTarget(this.node);
          this.node.scale = this.originalScale;
        }

        run(from = 0.9) {
          Tween.stopAllByTarget(this.node);
          let scale = tween(this.node).repeatForever(tween(this.node).sequence(tween().to(this.time, {
            scale: new Vec3(this.to, this.to, 1)
          }), tween().to(this.time, {
            scale: new Vec3(from, from, from)
          })));
          scale.start();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0.2;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "to", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0.5;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class ScaleCmp extends cc.Component {
      //     @property(Number)
      //     time : number = 0.2;
      // 
      //     @property(Number)
      //     to : number = 0.5;
      // 
      //     private originalScale = 1;
      // 
      //     start () {
      //         this.originalScale = this.node.scale;
      // 
      //         let scale = cc.sequence(cc.scaleTo(this.time,this.to),cc.scaleTo(this.time,this.originalScale));
      //         this.node.runAction(cc.repeatForever(scale));
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UserChatTextItem.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, Label, Button, _decorator, Component, GamePlayManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      Label = module.Label;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "7b847KHG8RPe4onr77Rc9GK", "UserChatTextItem", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let UserChatTextItem = exports('UserChatTextItem', (_dec = ccclass('UserChatTextItem'), _dec2 = property(sp.Skeleton), _dec3 = property(Label), _dec4 = property(Button), _dec(_class = (_class2 = (_temp = class UserChatTextItem extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "emo", _descriptor, this);

          _initializerDefineProperty(this, "label", _descriptor2, this);

          _initializerDefineProperty(this, "button", _descriptor3, this);
        }

        initClick(onClicked = () => {}) {
          this.button.node.on('click', () => {
            this.sendChat();
            onClicked();
          });
        }

        setEmo() {
          if (this.emo != null) {
            this.emo.setAnimation(0, this.emo.node.name, true);
          }
        }

        setText(content, onClicked = () => {}) {
          this.label.string = content;
          this.initClick(onClicked);
        }

        sendChat() {
          let content = this.label == null ? this.emo.node.name : this.label.string;
          GamePlayManager.sendChat(content);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "emo", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InvitationPlayerView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Label, Toggle, _decorator, Component, StringUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Toggle = module.Toggle;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      StringUtils = module.StringUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "8089eKSXttMjrsSlRNQCmVl", "InvitationPlayerView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let InvitationPlayerView = exports('InvitationPlayerView', (_dec = ccclass('InvitationPlayerView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Toggle), _dec(_class = (_class2 = (_temp = class InvitationPlayerView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lbl_displayName", _descriptor, this);

          _initializerDefineProperty(this, "lbl_money", _descriptor2, this);

          _initializerDefineProperty(this, "toggle_invite", _descriptor3, this);

          _defineProperty(this, "uid", "");
        }

        isSelected() {
          var _this$toggle_invite;

          return this.node.active && ((_this$toggle_invite = this.toggle_invite) === null || _this$toggle_invite === void 0 ? void 0 : _this$toggle_invite.isChecked);
        }

        getName() {
          return this.uid;
        }

        show(uid, displayName, money) {
          this.uid = uid;
          this.toggle_invite.isChecked = true;
          this.lbl_money.string = StringUtils.formatMoneyNumber(money);
          this.lbl_displayName.string = displayName;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbl_displayName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbl_money", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "toggle_invite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniSlotGameItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './JackpotItemView.ts', './GameUtils.ts', './LobbyViewController.ts', './MiniGameNodeController.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Button, sp, _decorator, Component, systemEvent, JackpotItemView, GameUtils, LobbyViewController, MiniGameNodeController;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
      systemEvent = module.systemEvent;
    }, function (module) {
      JackpotItemView = module.JackpotItemView;
    }, function (module) {
      GameUtils = module.default;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      MiniGameNodeController = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "86f89bXy9JM1q9TX56cll1C", "MiniSlotGameItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MiniSlotGameItemView = exports('MiniSlotGameItemView', (_dec = ccclass('SlotGameItemView'), _dec2 = property(Button), _dec3 = property(sp.Skeleton), _dec4 = property([JackpotItemView]), _dec5 = property(Number), _dec(_class = (_class2 = (_temp = class MiniSlotGameItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "button", _descriptor, this);

          _initializerDefineProperty(this, "skeleton", _descriptor2, this);

          _initializerDefineProperty(this, "jackpotItemView", _descriptor3, this);

          _initializerDefineProperty(this, "gameID", _descriptor4, this);
        }

        onLoad() {
          var _this$button;

          this.init(this.gameID);
          (_this$button = this.button) === null || _this$button === void 0 ? void 0 : _this$button.node.on("click", () => {
            var _MiniGameNodeControll;

            (_MiniGameNodeControll = MiniGameNodeController.getInstance()) === null || _MiniGameNodeControll === void 0 ? void 0 : _MiniGameNodeControll.showMiniGame(this.gameID);
          }); // this.skeleton?.setAnimationCacheMode(sp.AnimationCacheMode.PRIVATE_CACHE);
        }

        init(gameID) {
          this.jackpotItemView.forEach((x, i) => {
            switch (i) {
              case 0:
                {
                  x.updateAmount(GameUtils.getRandomInt(100000, 999999));
                  break;
                }

              case 1:
                {
                  x.updateAmount(GameUtils.getRandomInt(1000000, 9999999));
                  break;
                }

              case 2:
                {
                  x.updateAmount(GameUtils.getRandomInt(10000000, 99999999));
                  break;
                }
            }
          });
          systemEvent.off(LobbyViewController.UPDATE_JACKPOT_EVENT_KEY.replace("%gameID", this.gameID.toString()));
          systemEvent.on(LobbyViewController.UPDATE_JACKPOT_EVENT_KEY.replace("%gameID", gameID.toString()), data => {
            data.forEach((d, i) => {
              if (this.jackpotItemView[i] != null && this.jackpotItemView[i] != undefined) {
                this.jackpotItemView[i].updateAmount(d);
              }
            });
          });
        }

        onDestroy() {
          systemEvent.off(LobbyViewController.UPDATE_JACKPOT_EVENT_KEY.replace("%gameID", this.gameID.toString()));
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "skeleton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "jackpotItemView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gameID", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BauCuaSettingPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './NotiView.ts', './LoadingView.ts', './SettingPopup.ts', './LobbyViewController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Button, Toggle, _decorator, NotiView, LoadingView, SettingPopup, LobbyViewController, GamePlayManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Toggle = module.Toggle;
      _decorator = module._decorator;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      SettingPopup = module.SettingPopup;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3, _temp;

      cclegacy._RF.push({}, "87d759JUS9DAqadlm/UqHeA", "BauCuaSettingPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BauCuaSettingPopup = exports('BauCuaSettingPopup', (_dec = ccclass('BauCuaSettingPopup'), _dec2 = property(Button), _dec3 = property(Toggle), _dec(_class = (_class2 = (_temp = _class3 = class BauCuaSettingPopup extends SettingPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "btn_exit", _descriptor, this);

          _initializerDefineProperty(this, "toggle_hideChat", _descriptor2, this);
        }

        isHideChat() {
          var _this$toggle_hideChat;

          return (_this$toggle_hideChat = this.toggle_hideChat) === null || _this$toggle_hideChat === void 0 ? void 0 : _this$toggle_hideChat.isChecked;
        }

        onLoad() {
          var _this$btn_exit, _this$toggle_hideChat2;

          super.onLoad();
          (_this$btn_exit = this.btn_exit) === null || _this$btn_exit === void 0 ? void 0 : _this$btn_exit.node.on("click", () => this.exitRoom());
          (_this$toggle_hideChat2 = this.toggle_hideChat) === null || _this$toggle_hideChat2 === void 0 ? void 0 : _this$toggle_hideChat2.node.on("toggle", () => {
            console.log(this.isHideChat());
            localStorage.setItem(BauCuaSettingPopup.SAVE_HIDE_CHAT_KEY, this.isHideChat() ? "true" : "false");
          });
          let savedHidechat = localStorage.getItem(BauCuaSettingPopup.SAVE_HIDE_CHAT_KEY);

          if (savedHidechat == null || savedHidechat == undefined) {
            this.toggle_hideChat.isChecked = false;
          } else {
            this.toggle_hideChat.isChecked = savedHidechat == "true" ? true : false;
          }
        }

        exitRoom() {
          var _LobbyViewController$;

          let ended = (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.isEnded();

          if (!ended) {
            var _NotiView$getInstance, _LobbyViewController$2;

            (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage("Ván chơi chưa kết thúc!", null, (_LobbyViewController$2 = LobbyViewController.getInstance()) === null || _LobbyViewController$2 === void 0 ? void 0 : _LobbyViewController$2.getCurrentViewGameID());
            return;
          }

          GamePlayManager.leaveRoom();
          LoadingView.getInstance().show();
        }

      }, _defineProperty(_class3, "SAVE_HIDE_CHAT_KEY", "SAVE_HIDE_CHAT_KEY"), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_exit", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toggle_hideChat", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuGameItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './JackpotItemView.ts', './GlobalVariables.ts', './MiniGameNodeController.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Button, sp, _decorator, Component, systemEvent, JackpotItemView, GlobalVariables, MiniGameNodeController;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
      systemEvent = module.systemEvent;
    }, function (module) {
      JackpotItemView = module.JackpotItemView;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      MiniGameNodeController = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

      cclegacy._RF.push({}, "8a57bYcXUtGt6nQv/A+oYBp", "TaiXiuGameItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TaiXiuGameItemView = exports('TaiXiuGameItemView', (_dec = ccclass('TaiXiuGameItemView'), _dec2 = property(Button), _dec3 = property(sp.Skeleton), _dec4 = property(JackpotItemView), _dec5 = property(JackpotItemView), _dec(_class = (_class2 = (_temp = _class3 = class TaiXiuGameItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "button", _descriptor, this);

          _initializerDefineProperty(this, "bg_skeleton", _descriptor2, this);

          _initializerDefineProperty(this, "tai_bet_amount", _descriptor3, this);

          _initializerDefineProperty(this, "xiu_bet_amount", _descriptor4, this);
        }

        onLoad() {
          var _this$button;

          systemEvent.off(TaiXiuGameItemView.START_NEW_SESSION_EVENT_KEY);
          systemEvent.on(TaiXiuGameItemView.START_NEW_SESSION_EVENT_KEY, winTai => {
            var _this$bg_skeleton;

            this.tai_bet_amount.updateAmount(0, 0, true);
            this.xiu_bet_amount.updateAmount(0, 0, true);
            (_this$bg_skeleton = this.bg_skeleton) === null || _this$bg_skeleton === void 0 ? void 0 : _this$bg_skeleton.setAnimation(0, "animation", true);
          });
          systemEvent.off(TaiXiuGameItemView.UPDATE_BET_EVENT_KEY);
          systemEvent.on(TaiXiuGameItemView.UPDATE_BET_EVENT_KEY, (totalTaiBeting, totalXiuBeting) => {
            this.tai_bet_amount.updateAmount(totalTaiBeting, 0, true);
            this.xiu_bet_amount.updateAmount(totalXiuBeting, 0, true);
          });
          systemEvent.off(TaiXiuGameItemView.UPDATE_RESULT_EVENT_KEY);
          systemEvent.on(TaiXiuGameItemView.UPDATE_RESULT_EVENT_KEY, winTai => {
            var _this$bg_skeleton2;

            (_this$bg_skeleton2 = this.bg_skeleton) === null || _this$bg_skeleton2 === void 0 ? void 0 : _this$bg_skeleton2.setAnimation(0, winTai ? "win_tai" : "win_xiu", true);
          });
          (_this$button = this.button) === null || _this$button === void 0 ? void 0 : _this$button.node.on("click", () => {
            var _MiniGameNodeControll;

            (_MiniGameNodeControll = MiniGameNodeController.getInstance()) === null || _MiniGameNodeControll === void 0 ? void 0 : _MiniGameNodeControll.showMiniGame(GlobalVariables.TAIXIU);
          });
        }

        onDestroy() {
          systemEvent.off(TaiXiuGameItemView.START_NEW_SESSION_EVENT_KEY);
          systemEvent.off(TaiXiuGameItemView.UPDATE_BET_EVENT_KEY);
          systemEvent.off(TaiXiuGameItemView.UPDATE_RESULT_EVENT_KEY);
        }

      }, _defineProperty(_class3, "START_NEW_SESSION_EVENT_KEY", "start-new-session-taixiu"), _defineProperty(_class3, "UPDATE_BET_EVENT_KEY", "update-bet-taixiu"), _defineProperty(_class3, "UPDATE_RESULT_EVENT_KEY", "update-result-taixiu"), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bg_skeleton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "tai_bet_amount", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "xiu_bet_amount", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameListView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "8af2eJgizdNvZApom6+tjRv", "GameListView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GameListView = exports('GameListView', (_dec = ccclass('GameListView'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = class GameListView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "root", _descriptor, this);
        }

        show() {
          this.root.active = true;
        }

        hide() {
          this.root.active = false;
        }

      }, _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChangePasswordPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './GameConfigManager.ts', './NotiView.ts', './GameHTTPNetwork.ts', './PopupController.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, EditBox, Button, _decorator, CommonPopup, GameConfigManager, NotiView, GameHTTPNetwork, PopupController;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      EditBox = module.EditBox;
      Button = module.Button;
      _decorator = module._decorator;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      PopupController = module.PopupController;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "8bbd5Xys4dIkJ0VObAiVS+h", "ChangePasswordPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ChangePasswordPopup = exports('ChangePasswordPopup', (_dec = ccclass('ChangePasswordPopup'), _dec2 = property(EditBox), _dec3 = property(EditBox), _dec4 = property(EditBox), _dec5 = property(Button), _dec(_class = (_class2 = (_temp = class ChangePasswordPopup extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "edtBox_oldPassword", _descriptor, this);

          _initializerDefineProperty(this, "edtBox_password", _descriptor2, this);

          _initializerDefineProperty(this, "edtBox_retype_password", _descriptor3, this);

          _initializerDefineProperty(this, "btn_change", _descriptor4, this);
        }

        onLoad() {
          var _this$btn_change;

          super.onLoad();
          (_this$btn_change = this.btn_change) === null || _this$btn_change === void 0 ? void 0 : _this$btn_change.node.on("click", () => {
            this.changePassword();
          });
        }

        changePassword() {
          var _this$edtBox_oldPassw, _this$edtBox_password, _this$edtBox_retype_p;

          let oldPassword = (_this$edtBox_oldPassw = this.edtBox_oldPassword) === null || _this$edtBox_oldPassw === void 0 ? void 0 : _this$edtBox_oldPassw.string;
          let newPassword = (_this$edtBox_password = this.edtBox_password) === null || _this$edtBox_password === void 0 ? void 0 : _this$edtBox_password.string;
          let reTypepassword = (_this$edtBox_retype_p = this.edtBox_retype_password) === null || _this$edtBox_retype_p === void 0 ? void 0 : _this$edtBox_retype_p.string;

          if ((oldPassword === null || oldPassword === void 0 ? void 0 : oldPassword.length) == 0 || (newPassword === null || newPassword === void 0 ? void 0 : newPassword.length) == 0 || (reTypepassword === null || reTypepassword === void 0 ? void 0 : reTypepassword.length) == 0) {
            var _NotiView$getInstance;

            (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage("Vui lòng điền đủ thông tin.");
            return;
          }

          if (oldPassword != GameConfigManager.password) {
            var _NotiView$getInstance2;

            (_NotiView$getInstance2 = NotiView.getInstance()) === null || _NotiView$getInstance2 === void 0 ? void 0 : _NotiView$getInstance2.showMessage("Mật khẩu cũ không đúng!");
            return;
          }

          if (reTypepassword != newPassword) {
            var _NotiView$getInstance3;

            (_NotiView$getInstance3 = NotiView.getInstance()) === null || _NotiView$getInstance3 === void 0 ? void 0 : _NotiView$getInstance3.showMessage("Mật khẩu mới không khớp nhau!");
            return;
          }

          let url = GameConfigManager.changePassURL();
          url = url.replace("%newPassword%", newPassword);
          url = url.replace("%oldPassword%", oldPassword);
          console.log(url);
          GameHTTPNetwork.sendGET(url, resp => {
            this.changeCompleted(resp);
          });
        }

        changeCompleted(response) {
          let data = JSON.parse(response)["data"];
          let message = data["message"];

          if (message) {
            var _NotiView$getInstance4;

            (_NotiView$getInstance4 = NotiView.getInstance()) === null || _NotiView$getInstance4 === void 0 ? void 0 : _NotiView$getInstance4.showMessage(message);

            if (message == "Thay đổi mật khẩu thành công") {
              var _PopupController$getI;

              (_PopupController$getI = PopupController.getInstance()) === null || _PopupController$getI === void 0 ? void 0 : _PopupController$getI.hideChangePasswordPopup();
            }
          }
        }

        show() {
          super.show();
          this.edtBox_oldPassword.string = "";
          this.edtBox_password.string = "";
          this.edtBox_retype_password.string = "";
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "edtBox_oldPassword", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "edtBox_password", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "edtBox_retype_password", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_change", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpinButtonCmp.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Button, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "917962MWehHtpoEbCxiB05W", "SpinButtonCmp", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SpinButtonCmp = exports('default', (_dec = ccclass('SpinButtonCmp'), _dec2 = property(String), _dec3 = property(String), _dec4 = property(Button), _dec(_class = (_class2 = (_temp = class SpinButtonCmp extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spr_spin_path", _descriptor, this);

          _initializerDefineProperty(this, "spr_stop_path", _descriptor2, this);

          _initializerDefineProperty(this, "button", _descriptor3, this);

          _defineProperty(this, "spr", null);

          _defineProperty(this, "spr_spin", null);

          _defineProperty(this, "spr_stop", null);

          _defineProperty(this, "onSpin", null);

          _defineProperty(this, "onStop", null);
        }

        onLoad() {//let self = this;
          //self.spr = self.button.target.getComponent(cc.Sprite);
          //cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,this.spr_spin_path),(sf : cc.SpriteFrame) => {
          //self.spr_spin = sf;
          //},this.node);
          //cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,this.spr_stop_path),(sf : cc.SpriteFrame) => {
          //self.spr_stop = sf;
          //},this.node);
        }

        reset() {//this.spr.spriteFrame = this.spr_spin;
          //this.button.interactable = true;
        }

        press() {//if(this.spr.spriteFrame.name == this.spr_spin.name) {
          //this.spr.spriteFrame = this.spr_stop;
          //this.onSpin && this.onSpin();
          //} else if(this.spr.spriteFrame.name == this.spr_stop.name) {
          //this.onStop && this.onStop();
          //this.button.interactable = false;
          //}
        }

        isStop() {//return this.spr.spriteFrame.name == this.spr_stop.name && this.button.interactable == false;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spr_spin_path", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "mini-game/dball/sprites/main/db_btn_spin.png";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spr_stop_path", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "mini-game/dball/sprites/main/db_btn_stop.png";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import Downloader from "../Downloader/Downloader";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class SpinButtonCmp extends cc.Component {
      //     @property(String)
      //     public spr_spin_path : string = "cc-mini-game/dball/sprites/main/db_btn_spin.png";
      // 
      //     @property(String)
      //     public spr_stop_path : string = "cc-mini-game/dball/sprites/main/db_btn_stop.png";
      // 
      //     @property(cc.Button)
      //     private button : cc.Button = null;
      // 
      //     private spr : cc.Sprite = null;
      // 
      //     private spr_spin : cc.SpriteFrame = null;
      //     private spr_stop : cc.SpriteFrame = null;
      // 
      //     public onSpin = null;
      //     public onStop = null;
      // 
      //     onLoad() {
      //         let self = this;
      //         self.spr = self.button.target.getComponent(cc.Sprite);
      // 
      //         cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,this.spr_spin_path),(sf : cc.SpriteFrame) => {
      //             self.spr_spin = sf;
      //         },this.node);
      // 
      //         cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,this.spr_stop_path),(sf : cc.SpriteFrame) => {
      //             self.spr_stop = sf;
      //         },this.node);
      //     }
      // 
      //     reset() {
      //         this.spr.spriteFrame = this.spr_spin;
      //         this.button.interactable = true;
      //     }
      // 
      //     press() {
      //         if(this.spr.spriteFrame.name == this.spr_spin.name) {
      //             this.spr.spriteFrame = this.spr_stop;
      //             this.onSpin && this.onSpin();
      //         } else if(this.spr.spriteFrame.name == this.spr_stop.name) {
      //             this.onStop && this.onStop();
      //             this.button.interactable = false;
      //         }
      //     }
      // 
      //     isStop() {
      //         return this.spr.spriteFrame.name == this.spr_stop.name && this.button.interactable == false;
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameHistoryItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, Color, StringUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      Color = module.Color;
    }, function (module) {
      StringUtils = module.StringUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "926b6SxYqtIw77Wz9BNIU5i", "GameHistoryItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GameHistoryItemView = exports('default', (_dec = ccclass('GameHistoryItemView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec(_class = (_class2 = (_temp = class GameHistoryItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txt_phien_time", _descriptor, this);

          _initializerDefineProperty(this, "txt_dichvu", _descriptor2, this);

          _initializerDefineProperty(this, "txt_chitiet", _descriptor3, this);

          _initializerDefineProperty(this, "txt_thaydoi", _descriptor4, this);

          _initializerDefineProperty(this, "txt_sotien", _descriptor5, this);
        }

        show(time, dichvu, chitiet, thaydoi, sotien) {
          this.txt_phien_time.string = time;
          this.txt_dichvu.string = dichvu;
          this.txt_chitiet.string = chitiet;
          this.txt_sotien.string = StringUtils.formatNumber(sotien);
          this.txt_thaydoi.color = thaydoi > 0 ? Color.YELLOW : new Color("#FFA500");
          this.txt_thaydoi.string = (thaydoi > 0 ? "+" : "-") + StringUtils.formatNumber(thaydoi);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_time", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txt_dichvu", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txt_chitiet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txt_thaydoi", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "txt_sotien", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuBetHistoryItemView extends cc.Component {
      //     @property(cc.Label)
      //     private txt_phien_title : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_time : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_cuadat : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_ketqua : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_datcuoc : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_tracancua : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_tienthang : cc.Label = null;
      // 
      //     public show(sessionID,time,eid,d1,d2,d3,bet,received,refund){
      //         this.txt_phien_title.string = "#" + sessionID;
      //         this.txt_phien_time.string = time;
      //         this.txt_phien_cuadat.string = eid == 1 ? "Tài" : "Xỉu";
      // 
      //         let ketqua = d1 + d2 + d3 > 10 ? "(Tài)" : "(Xỉu)";
      //         this.txt_phien_ketqua.string = d1 + "-" + d2 + "-" + d3 + "\n" + ketqua;
      // 
      //         this.txt_phien_datcuoc.string = bet;
      // 
      //         this.txt_phien_tracancua.node.color = refund > 0 ? cc.Color.RED : cc.Color.WHITE;
      //         this.txt_phien_tracancua.string = refund;
      // 
      //         this.txt_phien_tienthang.string = received;
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameHistoryPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './GameConfigManager.ts', './StringUtils.ts', './NotiView.ts', './GameHTTPNetwork.ts', './GameHistoryItemView.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Button, Label, _decorator, UIOpacity, CommonPopup, GameConfigManager, StringUtils, NotiView, GameHTTPNetwork, GameHistoryItemView;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      GameHistoryItemView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "93500gX5WpPc41+9Qi8R1GP", "GameHistoryPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class GameHistory {
        constructor() {
          _defineProperty(this, "sotien", 0);

          _defineProperty(this, "time", "");

          _defineProperty(this, "dichvu", "");

          _defineProperty(this, "description", "");

          _defineProperty(this, "change", 0);
        }

      }

      exports('GameHistory', GameHistory);
      let GameHistoryPopup = exports('default', (_dec = ccclass('GameHistoryPopup'), _dec2 = property([GameHistoryItemView]), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(Label), _dec(_class = (_class2 = (_temp = class GameHistoryPopup extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "item_views", _descriptor, this);

          _initializerDefineProperty(this, "btn_prev", _descriptor2, this);

          _initializerDefineProperty(this, "btn_next", _descriptor3, this);

          _initializerDefineProperty(this, "lbl_page", _descriptor4, this);

          _defineProperty(this, "currentPage", 1);

          _defineProperty(this, "isMax", false);

          _defineProperty(this, "limit", 5);
        }

        onLoad() {
          super.onLoad();
          this.btn_prev.node.on("click", () => {
            if (this.currentPage - 1 > 0) {
              this.currentPage -= 1;
              this.lbl_page.string = this.currentPage.toString();
              this.fetchHistory(false);
            }
          });
          this.btn_next.node.on("click", () => {
            if (!this.isMax) {
              this.currentPage += 1;
              this.lbl_page.string = this.currentPage.toString();
              this.fetchHistory(false);
            }
          });
        }

        goToFirstPage() {
          this.currentPage = 1;
          this.lbl_page.string = this.currentPage.toString();
        }

        fetchHistory(hasFx = true) {
          if (hasFx) {
            this.goToFirstPage();
          }

          let url = GameConfigManager.getUserTransactionURL();
          url = url.replace("%limit%", this.limit.toString());
          url = url.replace("%skip%", ((this.currentPage - 1) * this.limit).toString());
          url = url.replace("%assetName%", "gold");
          console.log(new Date(1620535125).getFullYear());
          GameHTTPNetwork.sendGET(url, response => {
            response = JSON.parse(response);

            if (response["status"] != 0) {
              var _NotiView$getInstance;

              (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage("Đã xảy ra lỗi!");
            } else {
              let infos = [];
              let items = response["data"]["items"];

              for (let i = 0; i < items.length; i++) {
                let item = items[i];
                let info = new GameHistory();
                info.sotien = item["closingValue"];
                info.description = item["description"];
                info.dichvu = item["serviceName"];
                let createdTime = item["createdTime"];
                let date = StringUtils.formatUnixTime(createdTime * 1000);
                let timeStr = StringUtils.formatTime(date);
                info.time = timeStr;
                info.change = item["exchangeValue"];
                infos.push(info);
              }

              this.isMax = infos.length < this.limit;
              this.showHistory(infos, hasFx);
            }
          });
        }

        showHistory(infos, hasFx = true) {
          this.item_views.forEach((item, index) => {
            let info = index >= infos.length ? null : infos[index];

            if (info != null && info != undefined) {
              item.node.getComponent(UIOpacity).opacity = 255;
              item.show(info.time, info.dichvu, info.description, info.change, info.sotien);
            } else {
              item.node.getComponent(UIOpacity).opacity = 1;
            }
          });

          if (hasFx) {
            this.show();
          }
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item_views", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_prev", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_next", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbl_page", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { StringUtils } from "../../Utils/StringUtils";
      // import TaiXiuBetHistoryItemView from "./TaiXiuBetHistoryItemView";
      // import TaiXiuPopupCmp from "./TaiXiuPopupCmp";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // class TaiXiuBetResult {
      //     public bet;
      //     public refunded;
      //     public received;
      // 
      //     public eid;
      // 
      //     public d1;
      //     public d2;
      //     public d3;
      //     public sessionID;
      // 
      //     public betTime;
      // };
      // 
      // @ccclass
      // export default class TaiXiuBetHistoryView extends TaiXiuPopupCmp {
      //     @property([TaiXiuBetHistoryItemView])
      //     private item_views: TaiXiuBetHistoryItemView[] = [];
      // 
      //     @property(cc.Button)
      //     private btn_close: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_prev: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_next: cc.Button = null;
      // 
      //     @property(cc.Label)
      //     private lbl_page: cc.Label = null;
      // 
      //     private _bets: TaiXiuBetResult[] = [];
      // 
      //     private currentPage = 1;
      // 
      //     private max_item = 6;
      // 
      //     getPagesCount() {
      //         let a = this._bets.length / this.max_item;
      //         let b = this._bets.length % this.max_item > 0 ? 1 : 0;
      //         return a + b;
      //     }
      // 
      //     onLoad() {
      //         super.onLoad();
      //         this.original_scale = this.node.scale;
      //         this.btn_close.node.on("click", () => {
      //             this.hide();
      //         });
      // 
      //         this.btn_prev.node.on("click", () => {
      //             if (this.currentPage - 1 > 0) {
      //                 this.currentPage -= 1;
      //                 this.lbl_page.string = this.currentPage.toString();
      //             }
      //             this.showBetHistory();
      //         });
      // 
      //         this.btn_next.node.on("click", () => {
      //             if (this.currentPage + 1 < this.getPagesCount()) {
      //                 this.currentPage += 1;
      //                 this.lbl_page.string = this.currentPage.toString();
      //             }
      //             this.showBetHistory();
      //         });
      //     }
      // 
      //     goToFirstPage() {
      //         this.currentPage = 1;
      //         this.lbl_page.string = this.currentPage.toString();
      //     }
      // 
      //     public fetchHistory(betHistory, aid) {
      //         this.goToFirstPage();
      // 
      //         this._bets = [];
      //         for (let i = 0; i < betHistory.length; i++) {
      //             let historyDict = betHistory[i];
      // 
      //             let d1 = historyDict["d1"];
      //             let d2 = historyDict["d2"];
      //             let d3 = historyDict["d3"];
      //             let sessionID = historyDict["sid"];
      // 
      //             let eid = historyDict["eid"];
      // 
      //             let bet = historyDict["b"];
      //             let refunded = historyDict["rf"];
      //             let received = historyDict["po"];
      // 
      //             let betTime = historyDict["crt"];
      //             let date = new Date(betTime);
      //             let betTimeStr = StringUtils.formatTime(date);
      // 
      //             let newResult: TaiXiuBetResult = new TaiXiuBetResult();
      //             newResult.sessionID = sessionID;
      //             newResult.d1 = d1;
      //             newResult.d2 = d2;
      //             newResult.d3 = d3;
      //             newResult.bet = bet;
      //             newResult.refunded = refunded;
      //             newResult.received = received;
      //             newResult.betTime = betTimeStr;
      //             newResult.eid = eid;
      // 
      //             this._bets.push(newResult);
      //         }
      //         this.showBetHistory();
      //     }
      // 
      //     public showBetHistory() {
      //         this.item_views.forEach((item, index) => {
      //             let offset = (this.currentPage - 1) * this.max_item;
      //             let info = this._bets[index + offset];
      //             if (info != null && info != undefined) {
      //                 item.node.opacity = 255;
      //                 item.show(info.sessionID, info.betTime, info.eid, info.d1, info.d2, info.d3, info.bet, info.received, info.refunded);
      //             } else {
      //                 item.node.opacity = 0;
      //             }
      //         });
      // 
      //         this.show();
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChatItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GlobalVariables.ts', './TaiXiuChatView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Label, Node, _decorator, Component, UITransform, Color, GlobalVariables, TaiXiuChatView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      UITransform = module.UITransform;
      Color = module.Color;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      TaiXiuChatView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "947410bQjhPfZBbhHbekeaU", "ChatItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ChatItemView = exports('default', (_dec = ccclass('ChatItemView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Node), _dec(_class = (_class2 = (_temp = class ChatItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txt_display", _descriptor, this);

          _initializerDefineProperty(this, "txt_message", _descriptor2, this);

          _initializerDefineProperty(this, "mask", _descriptor3, this);

          _defineProperty(this, "IS_DIRTY", true);

          _defineProperty(this, "originNodeHeight", 0);
        }

        update(dt) {
          var _this$node$getCompone, _this$node$getCompone2, _this$txt_message$nod, _this$txt_message$nod2, _this$mask$getCompone, _this$txt_display$nod, _this$txt_display$nod2, _this$node$getCompone3, _this$node$getCompone5, _this$txt_message$nod3, _this$node$getCompone6, _this$txt_message$nod4, _this$mask$getCompone2, _this$txt_display$nod3, _this$mask$getCompone3, _this$txt_display$nod4;

          this.originNodeHeight = (_this$node$getCompone = this.node.getComponent(UITransform)) === null || _this$node$getCompone === void 0 ? void 0 : _this$node$getCompone.contentSize.height;
          (_this$node$getCompone2 = this.node.getComponent(UITransform)) === null || _this$node$getCompone2 === void 0 ? void 0 : _this$node$getCompone2.setContentSize((_this$txt_message$nod = this.txt_message.node.getComponent(UITransform)) === null || _this$txt_message$nod === void 0 ? void 0 : _this$txt_message$nod.contentSize.width, (_this$txt_message$nod2 = this.txt_message.node.getComponent(UITransform)) === null || _this$txt_message$nod2 === void 0 ? void 0 : _this$txt_message$nod2.contentSize.height);
          (_this$mask$getCompone = this.mask.getComponent(UITransform)) === null || _this$mask$getCompone === void 0 ? void 0 : _this$mask$getCompone.setContentSize(((_this$txt_display$nod = this.txt_display.node.getComponent(UITransform)) === null || _this$txt_display$nod === void 0 ? void 0 : _this$txt_display$nod.contentSize.width) + 5, ((_this$txt_display$nod2 = this.txt_display.node.getComponent(UITransform)) === null || _this$txt_display$nod2 === void 0 ? void 0 : _this$txt_display$nod2.contentSize.height) + 10);

          if (((_this$node$getCompone3 = this.node.getComponent(UITransform)) === null || _this$node$getCompone3 === void 0 ? void 0 : _this$node$getCompone3.contentSize.height) != this.originNodeHeight) {
            var _this$node$getCompone4;

            this.originNodeHeight = (_this$node$getCompone4 = this.node.getComponent(UITransform)) === null || _this$node$getCompone4 === void 0 ? void 0 : _this$node$getCompone4.contentSize.height;
            TaiXiuChatView.getInstance().markAsDirty();
          }

          if (!this.IS_DIRTY) return;

          if (((_this$node$getCompone5 = this.node.getComponent(UITransform)) === null || _this$node$getCompone5 === void 0 ? void 0 : _this$node$getCompone5.contentSize.width) == ((_this$txt_message$nod3 = this.txt_message.node.getComponent(UITransform)) === null || _this$txt_message$nod3 === void 0 ? void 0 : _this$txt_message$nod3.contentSize.width) && ((_this$node$getCompone6 = this.node.getComponent(UITransform)) === null || _this$node$getCompone6 === void 0 ? void 0 : _this$node$getCompone6.contentSize.height) == ((_this$txt_message$nod4 = this.txt_message.node.getComponent(UITransform)) === null || _this$txt_message$nod4 === void 0 ? void 0 : _this$txt_message$nod4.contentSize.height) && ((_this$mask$getCompone2 = this.mask.getComponent(UITransform)) === null || _this$mask$getCompone2 === void 0 ? void 0 : _this$mask$getCompone2.contentSize.width) == ((_this$txt_display$nod3 = this.txt_display.node.getComponent(UITransform)) === null || _this$txt_display$nod3 === void 0 ? void 0 : _this$txt_display$nod3.contentSize.width) + 5 && ((_this$mask$getCompone3 = this.mask.getComponent(UITransform)) === null || _this$mask$getCompone3 === void 0 ? void 0 : _this$mask$getCompone3.contentSize.height) == ((_this$txt_display$nod4 = this.txt_display.node.getComponent(UITransform)) === null || _this$txt_display$nod4 === void 0 ? void 0 : _this$txt_display$nod4.contentSize.height) + 10) {
            this.IS_DIRTY = false;
          }
        }

        isDirty() {
          return this.IS_DIRTY;
        }

        show(displayName, message) {
          if (displayName == undefined) {
            displayName = "??????";
          }

          if (message == undefined) {
            message = "??????";
          }

          let color = new Color(255, 117, 243, 255);

          if (displayName.length > 4) {
            let strTemp = displayName.substr(0, 4);

            if (strTemp == "[TOP") {
              color = Color.YELLOW;
            }
          }

          if (displayName == GlobalVariables.DISPLAY_NAME) {
            color = Color.GREEN;
          }

          this.txt_display.color = color;
          this.txt_display.string = displayName + ":";
          this.txt_message.string = displayName + ": " + message;
          this.IS_DIRTY = true;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txt_display", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txt_message", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "mask", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { GlobalVariables } from "../../Utils/GlobalVariables";
      // import TaiXiuBetRankView from "./TaiXiuBetRankView";
      // import TaiXiuChatView from "./TaiXiuChatView";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class ChatItemView extends cc.Component {
      //     @property(cc.Label)
      //     txt_display: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     txt_message: cc.Label = null;
      // 
      //     @property(cc.Node)
      //     mask: cc.Node = null;
      // 
      //     private IS_DIRTY = true;
      // 
      //     private originNodeHeight = 0;
      // 
      //     update(dt) {
      //         this.originNodeHeight = this.node.getContentSize().height;
      // 
      //         this.node.setContentSize(this.txt_message.node.getContentSize().width, this.txt_message.node.getContentSize().height);
      //         this.mask.setContentSize(this.txt_display.node.getContentSize().width + 5, this.txt_display.node.getContentSize().height);
      // 
      //         if(this.node.getContentSize().height != this.originNodeHeight) {
      //             this.originNodeHeight = this.node.getContentSize().height;
      //             TaiXiuChatView.getInstance().markAsDirty();
      //         }
      // 
      //         if(!this.IS_DIRTY) return;
      // 
      //         if (this.node.getContentSize().width == this.txt_message.node.getContentSize().width &&
      //             this.node.getContentSize().height == this.txt_message.node.getContentSize().height &&
      //             this.mask.getContentSize().width == this.txt_display.node.getContentSize().width + 5 &&
      //             this.mask.getContentSize().height == this.txt_display.node.getContentSize().height) {
      //             this.IS_DIRTY = false;
      //         }
      //     }
      // 
      //     public isDirty() {
      //         return this.IS_DIRTY;
      //     }
      // 
      //     public show(displayName, message) {
      //         let color = cc.Color.ORANGE.fromHEX("#FF993B");
      //         if (displayName.length > 4) {
      //             let strTemp = displayName.substr(0, 4);
      //             if (strTemp == "[TOP") {
      //                 color = cc.Color.YELLOW;
      //             }
      //         }
      //         if (displayName == GlobalVariables.DISPLAY_NAME) {
      //             color = cc.Color.YELLOW;
      //         }
      // 
      //         this.txt_display.node.color = color;
      //         this.txt_display.string = displayName + ":";
      //         this.txt_message.string = displayName + ":  " + message;
      // 
      //         this.IS_DIRTY = true;
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameHTTPNetwork.ts", ['cc', './GameConfigManager.ts', './NotiView.ts', './GlobalVariables.ts', './LoadingView.ts'], function (exports) {
  'use strict';

  var cclegacy, log, _decorator, GameConfigManager, NotiView, GlobalVariables, LoadingView;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      _decorator = module._decorator;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      LoadingView = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "95247CLpVhCcp1AoZ/xutRn", "GameHTTPNetwork", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GameHTTPNetwork = exports('default', (_dec = ccclass('GameHTTPNetwork'), _dec(_class = class GameHTTPNetwork {
        static sendGET(url, onCompleted, useLoading = true, showNoti = true) {
          let requestAction = () => {
            var _LoadingView$getInsta;

            if (useLoading) (_LoadingView$getInsta = LoadingView.getInstance()) === null || _LoadingView$getInsta === void 0 ? void 0 : _LoadingView$getInsta.show();
            let xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function () {
              if (xhr.readyState == 4 && xhr.responseText != "" && xhr.responseText != null) {
                var _LoadingView$getInsta2;

                if (useLoading) (_LoadingView$getInsta2 = LoadingView.getInstance()) === null || _LoadingView$getInsta2 === void 0 ? void 0 : _LoadingView$getInsta2.hide();
                var response = xhr.responseText;
                log("GameHTTPNetwork::sendGET" + response + "," + xhr.status + "," + xhr.readyState);
                let status = JSON.parse(response)["status"];

                if (xhr.status >= 200 && xhr.status < 400 && status != 500) {
                  onCompleted(response);
                } else {
                  var _NotiView$getInstance;

                  if (status == 500) {
                    // access token het han
                    GameHTTPNetwork.refreshToken(requestAction);
                    return;
                  }

                  if (showNoti) (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage("Có lỗi xảy ra khi kết nối. Bạn vui lòng thử lại!");
                }
              }
            };

            xhr.open("GET", url, true);
            xhr.setRequestHeader("Authorization", GameConfigManager.serverAccessToken);
            xhr.send();
          };

          requestAction();
        }

        static sendPOST(url, data, onCompleted, useLoading = true, showNoti = true) {
          let requestAction = () => {
            var _LoadingView$getInsta3;

            if (useLoading) (_LoadingView$getInsta3 = LoadingView.getInstance()) === null || _LoadingView$getInsta3 === void 0 ? void 0 : _LoadingView$getInsta3.show();
            let xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function () {
              if (xhr.readyState == 4 && xhr.responseText != "" && xhr.responseText != null) {
                var _LoadingView$getInsta4, _NotiView$getInstance2;

                if (useLoading) (_LoadingView$getInsta4 = LoadingView.getInstance()) === null || _LoadingView$getInsta4 === void 0 ? void 0 : _LoadingView$getInsta4.hide();
                var response = xhr.responseText;
                let status = JSON.parse(response)["status"];

                if (xhr.status >= 200 && xhr.status < 400 && status != 500) {
                  onCompleted(response);
                  return;
                }

                if (showNoti) (_NotiView$getInstance2 = NotiView.getInstance()) === null || _NotiView$getInstance2 === void 0 ? void 0 : _NotiView$getInstance2.showMessage("Có lỗi xảy ra khi kết nối. Bạn vui lòng thử lại!");
              }
            };

            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            xhr.send(data);
          };

          requestAction();
        }

        static refreshToken(onCompleted) {
          let url = GlobalVariables.REFRESH_TOKEN_URL.replace("%refreshToken%", GameConfigManager.serverRefreshToken);
          GameHTTPNetwork.sendGET(url, response => {
            let doc = JSON.parse(response);
            let status = doc["status"];

            if (status == 0) {
              let data = doc["data"];
              let accessToken = data["accessToken"];
              GameConfigManager.serverAccessToken = accessToken;
              onCompleted && onCompleted();
              log("send refresh token succeed:", status);
            } else {
              log("send refresh token fail:", status);
            }
          }, false, false);
        }

      }) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import NotiView from "../Games/TaiXiu/NotiView";
      // import { GlobalVariables } from "../Utils/GlobalVariables";
      // import LoadingView from "../Utils/LoadingView";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class GameHTTPNetwork {
      //     public static sendGET(url, onCompleted, useLoading = true, showNoti = true) {
      //         let requestAction = () => {
      //             if (useLoading) LoadingView.getInstance().show();
      // 
      //             let xhr = new XMLHttpRequest();
      // 
      //             xhr.onreadystatechange = function () {
      //                 if (xhr.readyState == 4 && xhr.responseText != "" && xhr.responseText != null) {
      //                     if (useLoading) LoadingView.getInstance().hide();
      // 
      //                     var response = xhr.responseText;
      //                     cc.log("GameHTTPNetwork::sendGET" + response + "," + xhr.status + "," + xhr.readyState);
      //                     let status = JSON.parse(response)["status"];
      // 
      //                     if (xhr.status >= 200 && xhr.status < 400
      //                         && status != 500) {
      //                         onCompleted(response);
      //                     }
      //                     else {
      //                         if (status == 500) { // access token het han
      //                             GameHTTPNetwork.refreshToken(requestAction);
      //                             return;
      //                         }
      //                         if (showNoti) NotiView.getInstance().showMessage("Có lỗi xảy ra khi kết nối. Bạn vui lòng thử lại!");
      //                     }
      //                 }
      //             };
      //             xhr.open("GET", url, true);
      //             xhr.setRequestHeader("Authorization", GlobalVariables.SERVER_ACCESS_TOKEN);
      //             xhr.send();
      //         }
      //         requestAction();
      //     }
      // 
      //     public static sendPOST(url, data,onCompleted, useLoading = true, showNoti = true) {
      //         let requestAction = () => {
      //             if (useLoading) LoadingView.getInstance().show();
      // 
      //             let xhr = new XMLHttpRequest();
      // 
      //             xhr.onreadystatechange = function () {
      //                 if (xhr.readyState == 4 && xhr.responseText != "" && xhr.responseText != null) {
      //                     if (useLoading) LoadingView.getInstance().hide();
      // 
      //                     var response = xhr.responseText;
      //                     let status = JSON.parse(response)["status"];
      // 
      //                     if (xhr.status >= 200 && xhr.status < 400
      //                         && status != 500) {
      //                         onCompleted(response);
      //                         return;
      //                     } 
      //                     if (showNoti) NotiView.getInstance().showMessage("Có lỗi xảy ra khi kết nối. Bạn vui lòng thử lại!");
      //                 }
      //             };
      //             xhr.open("POST", url, true);
      //             xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
      //             xhr.send(data);
      //         }
      //         requestAction();
      //     }
      // 
      //     public static refreshToken(onCompleted) {
      //         let url = GlobalVariables.REFRESH_TOKEN_URL.replace("%refreshToken%", GlobalVariables.REFRESH_TOKEN);
      // 
      //         GameHTTPNetwork.sendGET(url, (response) => {
      //             let doc = JSON.parse(response);
      //             let status = doc["status"];
      // 
      //             if (status == 0) {
      //                 let data = doc["data"];
      //                 let accessToken = data["accessToken"];
      //                 GlobalVariables.SERVER_ACCESS_TOKEN = accessToken;
      // 
      //                 onCompleted && onCompleted();
      //                 cc.log("send refresh token succeed:", status);
      //             } else {
      //                 cc.log("send refresh token fail:", status);
      //             }
      //         }, false, false);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BubbleChat.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, UITransform, Node, UIOpacity, Label, sp, _decorator, Component, Tween, Vec3, tween, Size;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      Node = module.Node;
      UIOpacity = module.UIOpacity;
      Label = module.Label;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
      Size = module.Size;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "97188GNpc5K5oZUEe+6cdOA", "BubbleChat", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BubbleChat = exports('BubbleChat', (_dec = ccclass('BubbleChat'), _dec2 = property(UITransform), _dec3 = property(UITransform), _dec4 = property(Node), _dec5 = property(UIOpacity), _dec6 = property(Label), _dec7 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = class BubbleChat extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "background", _descriptor, this);

          _initializerDefineProperty(this, "lbl_content_transform", _descriptor2, this);

          _initializerDefineProperty(this, "chat_content_node", _descriptor3, this);

          _initializerDefineProperty(this, "chat_content_node_opacity", _descriptor4, this);

          _initializerDefineProperty(this, "lbl_content", _descriptor5, this);

          _initializerDefineProperty(this, "emo", _descriptor6, this);
        }

        showEmo(content) {
          if (this.emo == null) return;
          this.emo.node.active = true;
          let track = this.emo.setAnimation(0, content, false);
          let self = this;

          if (track) {
            this.emo.setCompleteListener(trackEntry => {
              let name = trackEntry.animation ? trackEntry.animation.name : '';
              self.emo.node.active = false;
            });
          }
        }

        show(content, isAllowEmo, timeToShow = 5) {
          for (let i = 1; i <= 30; i++) {
            let emo = "emo_";
            emo += i.toString();

            if (content == emo) {
              if (i <= 16 && isAllowEmo) {
                this.showEmo(content);
              }

              return;
            }
          }

          Tween.stopAllByTarget(this.chat_content_node);
          Tween.stopAllByTarget(this.chat_content_node_opacity);
          this.chat_content_node.scale = Vec3.ZERO;
          this.chat_content_node_opacity.opacity = 255;
          let final = "";
          let max = 30;

          if (content.length > max) {
            let segment = content.length / max;
            let count = 0;

            while (count < segment) {
              let startIndex = count * max;
              let len = startIndex + max;
              final += content.slice(startIndex, len) + (len >= content.length ? "" : "\n");
              count++;
            }
          } else {
            final = content;
          }

          this.lbl_content.string = final;
          let seq = tween(this.chat_content_node).sequence(tween().to(0.25, {
            scale: Vec3.ONE
          }, {
            easing: 'expoOut'
          }), tween().call(() => {
            tween(this.chat_content_node).delay(timeToShow).call(() => {
              this.hide();
            }).start();
          }));
          seq.start();
        }

        hide() {
          Tween.stopAllByTarget(this.chat_content_node);
          Tween.stopAllByTarget(this.chat_content_node_opacity);
          this.chat_content_node.scale = Vec3.ONE;
          this.chat_content_node_opacity.opacity = 255;
          let seq = tween(this.chat_content_node).sequence(tween().call(() => {
            tween(this.chat_content_node).to(0.25, {
              scale: Vec3.ZERO
            }, {
              easing: 'expoIn'
            }).call(() => {}).start();
          }), tween().delay(0.1), tween().call(() => {
            tween(this.chat_content_node_opacity).to(0.2, {
              opacity: 1
            }).start();
          }));
          seq.start();
        }

        hideImmedialy() {
          Tween.stopAllByTarget(this.chat_content_node);
          Tween.stopAllByTarget(this.chat_content_node_opacity);
          this.chat_content_node.scale = Vec3.ZERO;
          this.chat_content_node_opacity.opacity = 1;
        }

        update(dt) {
          var _this$lbl_content_tra;

          let content_text_size = (_this$lbl_content_tra = this.lbl_content_transform) === null || _this$lbl_content_tra === void 0 ? void 0 : _this$lbl_content_tra.contentSize;
          let size = new Size(content_text_size.width + 30, content_text_size.height + 20);
          this.background.setContentSize(size);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "background", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbl_content_transform", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "chat_content_node", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "chat_content_node_opacity", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbl_content", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "emo", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuMessageHandler.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './MiniGameNetworkHandler.ts', './LoadingView.ts', './TaiXiuChatView.ts', './TaiXiuGameView.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, MessageRequest, MiniGameNetworkHandler, LoadingView, TaiXiuChatView, TaiXiuGameView, GamePlayManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MiniGameNetworkHandler = module.MiniGameNetworkHandler;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      TaiXiuChatView = module.default;
    }, function (module) {
      TaiXiuGameView = module.TaiXiuGameView;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      exports({
        TaiXiuKhongCan_Message: void 0,
        TaiXiu_Message: void 0
      });

      cclegacy._RF.push({}, "99490I3iFlIH72WfkvJNGaZ", "TaiXiuMessageHandler", undefined);

      let TaiXiu_Message;

      (function (TaiXiu_Message) {
        TaiXiu_Message[TaiXiu_Message["SUBSCRIBE_INFO"] = 1005] = "SUBSCRIBE_INFO";
        TaiXiu_Message[TaiXiu_Message["BET"] = 1000] = "BET";
        TaiXiu_Message[TaiXiu_Message["SHOW_RESULT"] = 1003] = "SHOW_RESULT";
        TaiXiu_Message[TaiXiu_Message["CALCULATE_RESULT_MONEY"] = 1004] = "CALCULATE_RESULT_MONEY";
        TaiXiu_Message[TaiXiu_Message["START_GAME"] = 1002] = "START_GAME";
        TaiXiu_Message[TaiXiu_Message["SESSION_ANALYTIC"] = 1007] = "SESSION_ANALYTIC";
        TaiXiu_Message[TaiXiu_Message["UPDATE_BET_INFO"] = 1008] = "UPDATE_BET_INFO";
        TaiXiu_Message[TaiXiu_Message["GET_BET_HISTORY"] = 1009] = "GET_BET_HISTORY";
        TaiXiu_Message[TaiXiu_Message["CHAT"] = 1011] = "CHAT";
        TaiXiu_Message[TaiXiu_Message["BET_FREE"] = 1010] = "BET_FREE";
      })(TaiXiu_Message || (TaiXiu_Message = exports('TaiXiu_Message', {})));

      let TaiXiuKhongCan_Message;

      (function (TaiXiuKhongCan_Message) {
        TaiXiuKhongCan_Message[TaiXiuKhongCan_Message["SUBSCRIBE_INFO"] = 2000] = "SUBSCRIBE_INFO";
        TaiXiuKhongCan_Message[TaiXiuKhongCan_Message["BET"] = 2002] = "BET";
        TaiXiuKhongCan_Message[TaiXiuKhongCan_Message["SHOW_RESULT"] = 2016] = "SHOW_RESULT";
        TaiXiuKhongCan_Message[TaiXiuKhongCan_Message["CALCULATE_RESULT_MONEY"] = 2006] = "CALCULATE_RESULT_MONEY";
        TaiXiuKhongCan_Message[TaiXiuKhongCan_Message["START_GAME"] = 2005] = "START_GAME";
        TaiXiuKhongCan_Message[TaiXiuKhongCan_Message["SESSION_ANALYTIC"] = 2009] = "SESSION_ANALYTIC";
        TaiXiuKhongCan_Message[TaiXiuKhongCan_Message["UPDATE_BET_INFO"] = 2007] = "UPDATE_BET_INFO";
        TaiXiuKhongCan_Message[TaiXiuKhongCan_Message["GET_BET_HISTORY"] = 2004] = "GET_BET_HISTORY";
        TaiXiuKhongCan_Message[TaiXiuKhongCan_Message["CHAT"] = 2008] = "CHAT";
      })(TaiXiuKhongCan_Message || (TaiXiuKhongCan_Message = exports('TaiXiuKhongCan_Message', {})));

      class TaiXiuMessageHandler {
        static subcribeTaiXiu() {
          let dict = {};
          dict["cmd"] = TaiXiuKhongCan_Message.SUBSCRIBE_INFO;
          let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "taixiuUnbalancedPlugin", dict];
          MiniGameNetworkHandler.send(mes);
        }

        static handleMessage(message) {
          let dict = message[1];
          let cmd = dict["cmd"];

          if (cmd == TaiXiuKhongCan_Message.SUBSCRIBE_INFO) {
            var _TaiXiuGameView$getIn, _TaiXiuGameView$getIn2; // subscribe tai xiu


            let sessionID = dict["sid"];
            let gameState = dict["gS"];
            let remainingTime = dict["rmT"];
            remainingTime /= 1000;
            let timeForBetting = dict["tFB"];
            let timeForPaying = dict["tFP"];
            timeForBetting /= 1000;
            timeForPaying /= 1000;
            let history = dict["htr"];
            let gameInfo = dict["bs"];
            let availableGold = dict["ag"];
            let availableChip = dict["ac"];
            let freeBetTimes = dict["fbn"];
            let freeBetAmount = dict["fba"];
            freeBetTimes = 4;
            let enableEvt = dict["enableEvent"];
            let eventStr;
            let eventURL;

            if (enableEvt) {
              eventStr = dict["eventMgs"];
              eventURL = dict["eventUrl"];
            }

            let chatHistory = dict["cH"];
            (_TaiXiuGameView$getIn = TaiXiuGameView.getInstance()) === null || _TaiXiuGameView$getIn === void 0 ? void 0 : _TaiXiuGameView$getIn.loadChatHistory(chatHistory);
            (_TaiXiuGameView$getIn2 = TaiXiuGameView.getInstance()) === null || _TaiXiuGameView$getIn2 === void 0 ? void 0 : _TaiXiuGameView$getIn2.subcribleInfo(sessionID, gameState, remainingTime, history, gameInfo, availableGold, availableChip, freeBetTimes, freeBetAmount, timeForBetting, timeForPaying, enableEvt, eventStr, eventURL);
          } else if (cmd == TaiXiuKhongCan_Message.BET) {
            // dat cuoc thanh cong
            console.log("beet");
            let betArr = dict["bs"];

            for (let i = 0; i < betArr.length; i++) {
              var _TaiXiuGameView$getIn3;

              let betDict = betArr[i];
              let aid = 1;
              let eid = betDict["eid"];
              let betting = betDict["b"];
              let totalEntryBetting = betDict["v"];
              let totalUser = betDict["bc"];
              (_TaiXiuGameView$getIn3 = TaiXiuGameView.getInstance()) === null || _TaiXiuGameView$getIn3 === void 0 ? void 0 : _TaiXiuGameView$getIn3.updateThisPlayerBetting(aid, eid, betting, totalEntryBetting, totalUser, 0);
            }

            GamePlayManager.sendRefreshMoney();
          } else if (cmd == 1010) ;else if (cmd == TaiXiuKhongCan_Message.SHOW_RESULT) {
            // hien thi ket qua
            let d1 = dict["d1"];
            let d2 = dict["d2"];
            let d3 = dict["d3"];
            TaiXiuGameView.getInstance().showResult(d1, d2, d3, true, false);
          } else if (cmd == TaiXiuKhongCan_Message.CALCULATE_RESULT_MONEY) {
            // he thong tinh tien
            TaiXiuGameView.getInstance().updateResultMoney(dict);
          } else if (cmd == TaiXiuKhongCan_Message.START_GAME) {
            var _TaiXiuGameView$getIn4; // bat dau van moi


            let sid = dict["sid"];
            (_TaiXiuGameView$getIn4 = TaiXiuGameView.getInstance()) === null || _TaiXiuGameView$getIn4 === void 0 ? void 0 : _TaiXiuGameView$getIn4.startNewGame(sid);
          } else if (cmd == TaiXiuKhongCan_Message.SESSION_ANALYTIC) {
            var _LoadingView$getInsta, _TaiXiuGameView$getIn6; // thong ke phien


            (_LoadingView$getInsta = LoadingView.getInstance()) === null || _LoadingView$getInsta === void 0 ? void 0 : _LoadingView$getInsta.hide();
            let thongKeArr = dict["bs"];
            let sessionID = dict["sid"];
            let d1 = dict["d1"];
            let d2 = dict["d2"];
            let d3 = dict["d3"];
            let startTime = dict["st"];
            let ended = dict["ended"];

            if (!ended) {
              var _TaiXiuGameView$getIn5;

              (_TaiXiuGameView$getIn5 = TaiXiuGameView.getInstance()) === null || _TaiXiuGameView$getIn5 === void 0 ? void 0 : _TaiXiuGameView$getIn5.showNoti("Phiên chưa kết thúc");
              return;
            }

            (_TaiXiuGameView$getIn6 = TaiXiuGameView.getInstance()) === null || _TaiXiuGameView$getIn6 === void 0 ? void 0 : _TaiXiuGameView$getIn6.fetchThongKe(thongKeArr, sessionID, d1, d2, d3, startTime);
          } else if (cmd == TaiXiuKhongCan_Message.UPDATE_BET_INFO) {
            var _TaiXiuGameView$getIn7; // cap nhat dat cuoc


            let betArr = dict["bs"];
            (_TaiXiuGameView$getIn7 = TaiXiuGameView.getInstance()) === null || _TaiXiuGameView$getIn7 === void 0 ? void 0 : _TaiXiuGameView$getIn7.updateBetInfo(betArr);
          } else if (cmd == TaiXiuKhongCan_Message.GET_BET_HISTORY) {
            var _LoadingView$getInsta2, _TaiXiuGameView$getIn8; // lich su dat cuoc


            (_LoadingView$getInsta2 = LoadingView.getInstance()) === null || _LoadingView$getInsta2 === void 0 ? void 0 : _LoadingView$getInsta2.hide();
            let betHistory = dict["items"];
            let aid = dict["aid"];
            (_TaiXiuGameView$getIn8 = TaiXiuGameView.getInstance()) === null || _TaiXiuGameView$getIn8 === void 0 ? void 0 : _TaiXiuGameView$getIn8.fetchHistory(betHistory, aid);
          } else if (cmd == TaiXiuKhongCan_Message.CHAT) {
            var _TaiXiuChatView$getIn; // chat


            this.chat_array.push(dict);

            if (((_TaiXiuChatView$getIn = TaiXiuChatView.getInstance()) === null || _TaiXiuChatView$getIn === void 0 ? void 0 : _TaiXiuChatView$getIn.isUpdatable()) && this.chat_array.length > 0) {
              var _TaiXiuGameView$getIn9;

              (_TaiXiuGameView$getIn9 = TaiXiuGameView.getInstance()) === null || _TaiXiuGameView$getIn9 === void 0 ? void 0 : _TaiXiuGameView$getIn9.updateChat(this.chat_array);
              this.chat_array = [];
            }
          }
        }

      }

      exports('TaiXiuMessageHandler', TaiXiuMessageHandler);
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // import TaiXiuChatView from "../../Games/TaiXiu/TaiXiuChatView";
      // import TaiXiuGameView from "../../Games/TaiXiu/TaiXiuGameView";
      // import MiniGameNodeController from "../../MiniGameNodeController";
      // import LoadingView from "../../Utils/LoadingView";
      // import { MessageRequest, MiniGameNetworkHandler } from "../MiniGameNetworkHandler";
      // 
      // export enum TaiXiu_Message {
      //     SUBSCRIBE_INFO = 1005,
      //     BET = 1000,
      //     SHOW_RESULT = 1003,
      //     CALCULATE_RESULT_MONEY = 1004,
      //     START_GAME = 1002,
      //     SESSION_ANALYTIC = 1007,
      //     UPDATE_BET_INFO = 1008,
      //     GET_BET_HISTORY = 1009,
      //     CHAT = 1011,
      // 
      //     BET_FREE = 1010
      // };
      // 
      // export class TaiXiuMessageHandler {
      //     private static chat_array = [];
      // 
      //     public static subcribeTaiXiu() {
      //         let dict = {};
      //         dict["cmd"] = TaiXiu_Message.SUBSCRIBE_INFO;
      //         let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "taixiuPlugin", dict];
      //         MiniGameNetworkHandler.send(mes);
      //     }
      // 
      //     public static handleMessage(message) {
      //         let dict = message[1];
      //         let cmd = dict["cmd"];
      // 
      //         if (cmd == TaiXiu_Message.SUBSCRIBE_INFO) { // subscribe tai xiu
      //             let sessionID = dict["sid"];
      //             let gameState = dict["gS"];
      //             let remainingTime = dict["rmT"];
      //             remainingTime /= 1000;
      // 
      //             let timeForBetting = dict["tFB"];
      //             let timeForPaying = dict["tFP"];
      //             timeForBetting /= 1000;
      //             timeForPaying /= 1000;
      // 
      //             let history = dict["htr"];
      //             let gameInfo = dict["gi"];
      // 
      //             let availableGold = dict["ag"];
      //             let availableChip = dict["ac"];
      // 
      //             let freeBetTimes = dict["fbn"];
      //             let freeBetAmount = dict["fba"];
      //             //            freeBetTimes = 4;
      // 
      //             let enableEvt = dict["enableEvent"];
      //             let eventStr;
      //             let eventURL;
      //             if (enableEvt) {
      //                 eventStr = dict["eventMgs"];
      //                 eventURL = dict["eventUrl"];
      //             }
      //             let chatHistory = dict["cH"];
      //             TaiXiuGameView.getInstance().loadChatHistory(chatHistory);
      // 
      //             TaiXiuGameView.getInstance().subcribleInfo(sessionID, gameState, remainingTime, history, gameInfo, availableGold,
      //                 availableChip, freeBetTimes, freeBetAmount, timeForBetting, timeForPaying, enableEvt, eventStr, eventURL);
      //         }
      // 
      //         else if (cmd == TaiXiu_Message.BET) { // dat cuoc thanh cong
      //             cc.log("bet!!!!");
      //             let aid = dict["aid"];
      //             let eid = dict["eid"];
      //             let betting = dict["tB"];
      //             let totalEntryBetting = dict["tEB"];
      //             let availableBalance = dict["ab"];
      //             let totalUser = dict["tU"];
      // 
      //             TaiXiuGameView.getInstance().updateThisPlayerBetting(aid, eid,betting, totalEntryBetting, totalUser, 0);
      //             
      //             MiniGameNodeController.getInstance() && MiniGameNodeController.getInstance().sendRefreshMoney();
      //         }
      // 
      //         else if (cmd == 1010) {
      //         }
      // 
      //         else if (cmd == TaiXiu_Message.SHOW_RESULT) { // hien thi ket qua
      //             let d1 = dict["d1"];
      //             let d2 = dict["d2"];
      //             let d3 = dict["d3"];
      // 
      //             TaiXiuGameView.getInstance().showResult(d1, d2, d3, true, true);
      //         }
      // 
      //         else if (cmd == TaiXiu_Message.CALCULATE_RESULT_MONEY) { // he thong tinh tien
      //             let gold = 0;
      //             let chip = 0;
      //             let goldExchange = 0;
      //             let chipExchange = 0;
      //             let availableGold = 0;
      //             let availableChip = 0;
      //             let goldRefund = 0;
      //             let chipRefund = 0;
      //             let goldBet = 0;
      //             let chipBet = 0;
      // 
      //             if (dict["G"] != undefined) {
      //                 gold = dict["G"];
      //                 chip = dict["C"];
      //                 goldExchange = dict["GX"];
      //                 chipExchange = dict["CX"];
      //                 availableGold = dict["ag"];
      //                 availableChip = dict["ac"];
      //                 goldRefund = dict["gR"];
      //                 chipRefund = dict["cR"];
      //                 goldBet = dict["gB"];
      //                 chipBet = dict["cB"];
      //             }
      // 
      //             let goldBalanceBet = dict["gBB"];
      //             let chipBalanceBet = dict["cBB"];
      //             TaiXiuGameView.getInstance().updateResultMoney(gold, chip, goldExchange, chipExchange, availableGold, availableChip,
      //                 goldRefund, chipRefund, goldBet, chipBet, goldBalanceBet, chipBalanceBet);
      //         }
      // 
      //         else if (cmd == TaiXiu_Message.START_GAME) { // bat dau van moi
      //             let sid = dict["sid"];
      // 
      //             TaiXiuGameView.getInstance().startNewGame(sid);
      //         }
      // 
      //         else if (cmd == TaiXiu_Message.SESSION_ANALYTIC) { // thong ke phien
      //             LoadingView.getInstance().hide();
      // 
      //             let thongKeArr = dict["bs"];
      //             let sessionID = dict["sid"];
      //             let d1 = dict["d1"];
      //             let d2 = dict["d2"];
      //             let d3 = dict["d3"];
      //             let startTime = dict["st"];
      //             let ended = dict["ended"];
      //             if (!ended) {
      //                 TaiXiuGameView.getInstance().showNoti("Phiên chưa kết thúc");
      //                 return;
      //             }
      // 
      //             TaiXiuGameView.getInstance().fetchThongKe(thongKeArr, sessionID, d1, d2, d3, startTime);
      //         }
      //         else if (cmd == TaiXiu_Message.UPDATE_BET_INFO) { // cap nhat dat cuoc
      //             let betArr = dict["gi"];
      // 
      //             TaiXiuGameView.getInstance().updateBetInfo(betArr);
      //         }
      // 
      //         else if (cmd == TaiXiu_Message.GET_BET_HISTORY) { // lich su dat cuoc
      //             LoadingView.getInstance().hide();
      // 
      //             let betHistory = dict["items"];
      //             let aid = dict["aid"];
      // 
      //             TaiXiuGameView.getInstance().fetchHistory(betHistory, aid);
      //         }
      //         else if (cmd == TaiXiu_Message.CHAT) { // chat
      //             this.chat_array.push(dict);
      // 
      //             if (TaiXiuChatView.getInstance().isUpdatable() && this.chat_array.length > 0) {
      //                 TaiXiuGameView.getInstance().updateChat(this.chat_array);
      //                 this.chat_array = [];
      //             }
      //         }
      //     }
      // }

      _defineProperty(TaiXiuMessageHandler, "chat_array", []);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CardPooling.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CardItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, _decorator, Component, instantiate, CardItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      instantiate = module.instantiate;
    }, function (module) {
      CardItem = module.CardItem;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "9eb0bXmVghMdYaMVoNl+bpZ", "CardPooling", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CardPooling = exports('CardPooling', (_dec = ccclass('CardPooling'), _dec2 = property(CardItem), _dec(_class = (_class2 = (_temp = class CardPooling extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "card_template", _descriptor, this);

          _defineProperty(this, "pooled_card", []);
        }

        onLoad() {
          for (let i = 0; i < 52; i++) {
            let card = instantiate(this.card_template.node);
            card.name = "card_00" + i;
            card.parent = this.card_template.node.parent;
            card.active = false;
            this.pooled_card.push(card.getComponent(CardItem));
          }
        }

        getPooledCard() {
          let f = this.pooled_card.filter(c => !c.node.active);

          if (f.length > 0) {
            let card = f[0];
            card.setAsHideCard();
            card.node.setSiblingIndex(this.pooled_card.length - 1);
            card.node.setPosition(this.card_template.node.position);
            return card;
          }

          return null;
        }

        reset() {
          this.pooled_card.forEach(card => {
            card.reset();
            card.node.setScale(this.card_template.node.scale);
            card.node.setPosition(this.card_template.node.position);
          });
        }

        clearCardsNotInTheseCards(cards) {
          this.pooled_card.forEach(card => {
            if (cards.filter(c => c.name == card.name).length <= 0) {
              card.reset();
              card.node.setPosition(this.card_template.node.position);
            }
          });
        }

      }, _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "card_template", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniGameNodeDragView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CCMiniGameRoot.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, Vec3, UITransform, tween, CCMiniGameRoot;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      tween = module.tween;
    }, function (module) {
      CCMiniGameRoot = module.CCMiniGameRoot;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3, _temp;

      cclegacy._RF.push({}, "a0f1briJ25PvYMM4FLHXNhQ", "MiniGameNodeDragView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MiniGameNodeDragView = exports('default', (_dec = ccclass('MiniGameNodeDragView'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = _class3 = class MiniGameNodeDragView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "move_node", _descriptor, this);

          _defineProperty(this, "touch_moved", false);

          _defineProperty(this, "node_start_position", Vec3.ZERO);
        }

        onLoad() {
          this.node.on(Node.EventType.TOUCH_START, e => {
            this.node_start_position = new Vec3(this.move_node.position);
          });
          this.node.on(Node.EventType.TOUCH_MOVE, e => {
            this.move_node.setPosition(new Vec3(this.move_node.position.x + e.getDelta().x, this.move_node.position.y + e.getDelta().y, 0));

            if (Math.abs(this.move_node.position.x - this.node_start_position.x) > 10 || Math.abs(this.move_node.position.y - this.node_start_position.y) > 10) {
              this.touch_moved = true;
            }
          });
          this.node.on(Node.EventType.TOUCH_END, () => {
            this.checkAndSnapToBorder();
            if (!this.touch_moved) MiniGameNodeDragView.onClick && MiniGameNodeDragView.onClick();
            this.touch_moved = false;
          });
          this.node.on(Node.EventType.TOUCH_CANCEL, () => {
            this.checkAndSnapToBorder();
            this.touch_moved = false;
          });
        }

        checkAndSnapToBorder() {
          var _this$move_node;

          let position = new Vec3((_this$move_node = this.move_node) === null || _this$move_node === void 0 ? void 0 : _this$move_node.position);
          let uitransform = this.move_node.getComponent(UITransform);

          if (uitransform.getBoundingBox().yMin < -CCMiniGameRoot.WIN_SIZE_HEIGHT / 2 + uitransform.contentSize.height / 2) {
            position.y = -CCMiniGameRoot.WIN_SIZE_HEIGHT / 2 + uitransform.contentSize.height / 2;

            if (uitransform.getBoundingBox().xMin < -CCMiniGameRoot.WIN_SIZE_WIDTH / 2 + uitransform.contentSize.width) {
              position.x = -CCMiniGameRoot.WIN_SIZE_WIDTH / 2 + uitransform.contentSize.width / 2;
            } else if (uitransform.getBoundingBox().xMax > CCMiniGameRoot.WIN_SIZE_WIDTH / 2 - uitransform.contentSize.width) {
              position.x = CCMiniGameRoot.WIN_SIZE_WIDTH / 2 - uitransform.contentSize.width / 2;
            }
          } else if (uitransform.getBoundingBox().yMax > CCMiniGameRoot.WIN_SIZE_HEIGHT / 2 - uitransform.contentSize.height / 2) {
            position.y = CCMiniGameRoot.WIN_SIZE_HEIGHT / 2 - uitransform.contentSize.height / 2;

            if (uitransform.getBoundingBox().xMin < -CCMiniGameRoot.WIN_SIZE_WIDTH / 2 + uitransform.contentSize.width) {
              position.x = -CCMiniGameRoot.WIN_SIZE_WIDTH / 2 + uitransform.contentSize.width / 2;
            } else if (uitransform.getBoundingBox().xMax > CCMiniGameRoot.WIN_SIZE_WIDTH / 2 - uitransform.contentSize.width) {
              position.x = CCMiniGameRoot.WIN_SIZE_WIDTH / 2 - uitransform.contentSize.width / 2;
            }
          } else if (this.move_node.position.x < 0) {
            position.x = -CCMiniGameRoot.WIN_SIZE_WIDTH / 2 + uitransform.contentSize.width / 2;
          } else {
            position.x = CCMiniGameRoot.WIN_SIZE_WIDTH / 2 - uitransform.contentSize.width / 2;
          }

          tween(this.move_node).to(0.2, {
            position: new Vec3(position.x, position.y, position.z)
          }).start();
        }

      }, _defineProperty(_class3, "onClick", null), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "move_node", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import CCMiniGameRoot from "../CCMiniGameRoot";
      // import MiniGameNodeController from "../MiniGameNodeController";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class MiniGameNodeDragView extends cc.Component {
      //     @property(cc.Node)
      //     private move_node: cc.Node = null;
      // 
      //     public static onClick = null;
      // 
      //     private touch_moved = false;
      // 
      //     private node_start_position = cc.Vec2.ZERO;
      // 
      //     onLoad() {
      //         this.node.on(cc.Node.EventType.TOUCH_START, (e: cc.Event.EventTouch) => {
      //             this.node_start_position = this.move_node.position;
      //         });
      // 
      //         this.node.on(cc.Node.EventType.TOUCH_MOVE, (e: cc.Event.EventTouch) => {
      //             this.move_node.position = new cc.Vec2(this.move_node.position.x + e.getDelta().x, this.move_node.position.y + e.getDelta().y);
      // 
      //             if (Math.abs(this.move_node.position.x - this.node_start_position.x) > 10
      //                 || Math.abs(this.move_node.position.y - this.node_start_position.y) > 10) {
      //                 this.touch_moved = true;
      //             }
      //         });
      //         this.node.on(cc.Node.EventType.TOUCH_END, () => {
      //             this.checkAndSnapToBorder();
      //             if (!this.touch_moved) MiniGameNodeDragView.onClick && MiniGameNodeDragView.onClick();
      //             this.touch_moved = false;
      //         });
      //         this.node.on(cc.Node.EventType.TOUCH_CANCEL, () => {
      //             this.checkAndSnapToBorder();
      //             this.touch_moved = false;
      //         });
      //     }
      // 
      //     checkAndSnapToBorder() {
      //         let position = new cc.Vec2();
      //         let yPos = this.move_node.y;
      //         if (this.move_node.getBoundingBox().yMin < -CCMiniGameRoot.WIN_SIZE_HEIGHT / 2) {
      //             yPos = -CCMiniGameRoot.WIN_SIZE_HEIGHT  / 2 + (this.move_node.getContentSize().height / 2);
      //         }
      //         if (this.move_node.getBoundingBox().yMax > CCMiniGameRoot.WIN_SIZE_HEIGHT  / 2) {
      //             yPos = CCMiniGameRoot.WIN_SIZE_HEIGHT / 2 - (this.move_node.getContentSize().height / 2);
      //         }
      // 
      //         if (this.move_node.x < 0) {
      //             position.x = (-CCMiniGameRoot.WIN_SIZE_WIDTH  / 2) + (this.node.getContentSize().width / 2);
      //             position.y = yPos;
      //         } else {
      //             position.x = (CCMiniGameRoot.WIN_SIZE_WIDTH  / 2) - (this.node.getContentSize().width / 2);
      //             position.y = yPos;
      //         }
      // 
      //         this.move_node.runAction(cc.moveTo(0.2, cc.v2(position.x, position.y)));
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NotiView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Sprite, UITransform, SpriteFrame, _decorator, Component, UIOpacity, Tween, Vec3, tween, GameConfigManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      Component = module.Component;
      UIOpacity = module.UIOpacity;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

      cclegacy._RF.push({}, "a1b34kLShBELrQdgpbFVW5o", "NotiView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let NotiView = exports('default', (_dec = ccclass('NotiView'), _dec2 = property(Label), _dec3 = property(Sprite), _dec4 = property(UITransform), _dec5 = property([SpriteFrame]), _dec(_class = (_class2 = (_temp = _class3 = class NotiView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "message", _descriptor, this);

          _initializerDefineProperty(this, "icon", _descriptor2, this);

          _initializerDefineProperty(this, "bg_transform", _descriptor3, this);

          _initializerDefineProperty(this, "sprFrame_thongbao", _descriptor4, this);
        }

        static getInstance() {
          return NotiView.instance;
        }

        onLoad() {
          NotiView.instance = this;
        }

        showMessage(message, attachedNoded = null, gameID = 0) {
          if (attachedNoded && (!attachedNoded.active || attachedNoded.getComponent(UIOpacity).opacity == 1)) {
            return;
          }

          let f = this.sprFrame_thongbao.filter(x => x.name == "lb_icon_thongbao_" + gameID);
          let icon_frame = f.length > 0 ? f[0] : this.sprFrame_thongbao[0];
          this.message.string = message;
          this.icon.spriteFrame = icon_frame;
          Tween.stopAllByTarget(this.node);
          Tween.stopAllByTarget(this.node.getComponent(UIOpacity));
          let startPos = new Vec3(0, GameConfigManager.getSizeHeight() / 2 + this.bg_transform.contentSize.height / 2, 0);
          let endPos = new Vec3(0, GameConfigManager.getSizeHeight() / 2 - this.bg_transform.contentSize.height / 2, 0);
          this.node.setPosition(startPos);
          this.node.getComponent(UIOpacity).opacity = 1;
          let sequence = tween(this.node).sequence(tween(this.node).to(0.2, {
            position: endPos
          }), tween().delay(2.0), tween(this.node).to(0.3, {
            position: startPos
          }));
          sequence.start();
          let sequenceFade = tween(this.node.getComponent(UIOpacity)).sequence(tween(this.node.getComponent(UIOpacity)).to(0.2, {
            opacity: 255
          }), tween().delay(2.0), tween(this.node.getComponent(UIOpacity)).to(0.3, {
            opacity: 1
          }));
          sequenceFade.start();
        }

      }, _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "message", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bg_transform", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_thongbao", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class NotiView extends cc.Component {
      //     @property(cc.Label)
      //     message: cc.Label = null;
      // 
      //     private static instance : NotiView = null;
      // 
      //     public static getInstance(){
      //         return NotiView.instance;
      //     }
      // 
      //     onLoad(){
      //         NotiView.instance = this;
      //     }
      // 
      //     public showMessage(message,attachedNoded : cc.Node = null) {
      //         if(attachedNoded && attachedNoded.opacity == 0) {
      //             return;
      //         }
      // 
      //         this.node.stopAllActions();
      //         this.node.position = new cc.Vec2(0,220);
      //         this.node.opacity = 0;
      //         this.message.string = message;
      // 
      //         let sequence = cc.sequence(cc.spawn(cc.moveTo(0.3, cc.v2(0, 200)), cc.fadeIn(0.3)), 
      //             cc.delayTime(2.0), 
      //             cc.spawn(cc.moveTo(0.3, cc.v2(0, 220)), cc.fadeOut(0.3)));
      //         this.node.runAction(sequence);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniPokerBetHistoryItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts', './MiniPokerGameView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Sprite, _decorator, Component, Color, UIOpacity, StringUtils, MiniPokerGameView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Sprite = module.Sprite;
      _decorator = module._decorator;
      Component = module.Component;
      Color = module.Color;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      MiniPokerGameView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "a380539wtZKkYpserieITeC", "MiniPokerBetHistoryItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MiniPokerBetHistoryItemView = exports('default', (_dec = ccclass('MiniPokerBetHistoryItemView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property([Sprite]), _dec(_class = (_class2 = (_temp = class MiniPokerBetHistoryItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txt_phien_title", _descriptor, this);

          _initializerDefineProperty(this, "txt_phien_time", _descriptor2, this);

          _initializerDefineProperty(this, "txt_phien_datcuoc", _descriptor3, this);

          _initializerDefineProperty(this, "txt_phien_tienthang", _descriptor4, this);

          _initializerDefineProperty(this, "spr_cards", _descriptor5, this);
        }

        show(sessionID, time, bet, received, result) {
          this.txt_phien_title.string = "#" + sessionID.toString();
          this.txt_phien_time.string = time.toString();
          this.txt_phien_datcuoc.string = StringUtils.formatNumber(bet);
          this.txt_phien_tienthang.color = Color.YELLOW;
          this.txt_phien_tienthang.string = StringUtils.formatNumber(received);
          result.forEach((r, index) => {
            let spr = MiniPokerGameView.getInstance().loaded_card_normal.filter(x => x.name.indexOf(r.getResourceName()) >= 0)[0];
            if (spr == null || spr == undefined) this.spr_cards[index].node.opacity = 1;else this.spr_cards[index].node.getComponent(UIOpacity).opacity = 255;
            this.spr_cards[index].spriteFrame = spr;
          });
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_title", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_time", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_datcuoc", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_tienthang", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "spr_cards", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { GameCard } from "../../Utils/MauBinh_CardLib";
      // import { StringUtils } from "../../Utils/StringUtils";
      // import MiniPokerGameView from "./MiniPokerGameView";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class MiniPokerBetHistoryItemView extends cc.Component {
      //     @property(cc.Label)
      //     private txt_phien_title : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_time : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_datcuoc : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_tienthang : cc.Label = null;
      // 
      //     @property([cc.Sprite])
      //     private spr_cards : cc.Sprite[] = [];
      // 
      //     public show(sessionID,time,bet,received,result : GameCard[]){
      //         this.txt_phien_title.string = "#" + sessionID.toString();
      //         this.txt_phien_time.string = time.toString();
      //         this.txt_phien_datcuoc.string = StringUtils.formatNumber(bet);
      //         this.txt_phien_tienthang.string = StringUtils.formatNumber(received);
      // 
      //         result.forEach((r,index) => {
      //             let spr = MiniPokerGameView.getInstance().loaded_card_normal.filter(x => x.name.indexOf(r.getResourceName()) >= 0)[0];
      //             if(spr == null || spr == undefined)  this.spr_cards[index].node.opacity = 0;
      //             else this.spr_cards[index].node.opacity = 255;
      //             this.spr_cards[index].spriteFrame = spr;
      //         });
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoundButtonCmp.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "a3968sIGj1O9K8ac5EffFKQ", "SoundButtonCmp", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SoundButtonCmp = exports('default', (_dec = ccclass('SoundButtonCmp'), _dec(_class = (_class2 = (_temp = class SoundButtonCmp extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "path", _descriptor, this);

          _defineProperty(this, "sfx_button_click", null);
        }

        onLoad() {//return;
          //let self = this;
          //cc.loader.loadRes(this.path,cc.AudioClip,(err,asset) => {
          //self.sfx_button_click = asset;
          //});
          //this.node.on("click",() => {
          // if(this.sfx_button_click != null) cc.audioEngine.playEffect(this.sfx_button_click,false);
          //});
        }

      }, _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "path", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "";
        }
      }), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class SoundButtonCmp extends cc.Component {
      //     @property
      //     private path : string = "";
      // 
      //     private sfx_button_click: cc.AudioClip = null;
      // 
      //     onLoad() {
      //         return;
      //         let self = this;
      //         cc.loader.loadRes(this.path,cc.AudioClip,(err,asset) => {
      //             self.sfx_button_click = asset;
      //         });
      // 
      //         this.node.on("click",() => {
      //             // if(this.sfx_button_click != null) cc.audioEngine.playEffect(this.sfx_button_click,false);
      //         });
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniPokerBetHistoryView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './StringUtils.ts', './GlobalVariables.ts', './GameHTTPNetwork.ts', './MauBinh_CardLib.ts', './MiniPokerBetHistoryItemView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Button, Label, Node, _decorator, UIOpacity, CommonPopup, StringUtils, GlobalVariables, GameHTTPNetwork, GameCard, MiniPokerBetHistoryItemView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      Node = module.Node;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      GameCard = module.GameCard;
    }, function (module) {
      MiniPokerBetHistoryItemView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "a3edbEkjk9N+7WHFGim2qCN", "MiniPokerBetHistoryView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class MiniPokerBetResult {
        constructor() {
          _defineProperty(this, "bet", void 0);

          _defineProperty(this, "sessionID", void 0);

          _defineProperty(this, "money", void 0);

          _defineProperty(this, "cards", void 0);

          _defineProperty(this, "betTime", void 0);
        }

      }

      let MiniPokerBetHistoryView = exports('default', (_dec = ccclass('MiniPokerBetHistoryView'), _dec2 = property(Button), _dec3 = property(Button), _dec4 = property(Label), _dec5 = property([Node]), _dec(_class = (_class2 = (_temp = class MiniPokerBetHistoryView extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "btn_prev", _descriptor, this);

          _initializerDefineProperty(this, "btn_next", _descriptor2, this);

          _initializerDefineProperty(this, "lbl_page", _descriptor3, this);

          _initializerDefineProperty(this, "item_nodes", _descriptor4, this);

          _defineProperty(this, "_bets", []);

          _defineProperty(this, "currentPage", 1);

          _defineProperty(this, "max_pages", 0);

          _defineProperty(this, "item_views", []);
        }

        onLoad() {
          super.onLoad();
          this.btn_prev.node.on("click", () => {
            if (this.currentPage > 1) {
              this.currentPage -= 1;
              this.lbl_page.string = this.currentPage.toString();
            }

            this.fetchHistory(false);
          });
          this.btn_next.node.on("click", () => {
            if (this.currentPage < this.max_pages) {
              this.currentPage += 1;
              this.lbl_page.string = this.currentPage.toString();
            }

            this.fetchHistory(false);
          });
        }

        goToFirstPage() {
          this.currentPage = 1;
          this.lbl_page.string = this.currentPage.toString();
        }

        fetchHistory(hasFx = true) {
          if (hasFx) this.goToFirstPage();
          let skip = (this.currentPage - 1) * 6;
          let url = GlobalVariables.BET_HISTORY_URL.replace("%gameid%", GlobalVariables.MINIPOKER.toString()).replace("%skip%", skip.toString());
          GameHTTPNetwork.sendGET(url, response => {
            this._bets = [];
            let doc = JSON.parse(response);
            let data = doc["data"];
            let jarr = data["items"];
            let count = data["count"];
            this.max_pages = Math.ceil(count / 6);

            for (let i = 0; i < jarr.length; i++) {
              let jsonMNPKItem = jarr[i];
              let newBetHistory = new MiniPokerBetResult();
              newBetHistory.sessionID = jsonMNPKItem["sessionId"];
              newBetHistory.bet = jsonMNPKItem["betting"];
              newBetHistory.money = jsonMNPKItem["money"];
              let requestTime = jsonMNPKItem["createdTime"];
              let date = new Date(requestTime);
              newBetHistory.betTime = StringUtils.formatTime(date);
              newBetHistory.cards = [];
              let cards = jsonMNPKItem["symbols"];

              for (let j = 0; j < cards.length; j++) {
                newBetHistory.cards.push(cards[j]);
              }

              this._bets.push(newBetHistory);
            }

            this.showBetHistory(hasFx);
          });
        }

        showBetHistory(hasFx = true) {
          if (this.item_views.length <= 0) this.item_views = this.item_nodes.map(x => x.getComponent(MiniPokerBetHistoryItemView));
          this.item_views.forEach((item, index) => {
            let info = this._bets[index];

            if (info != null && info != undefined) {
              item.node.getComponent(UIOpacity).opacity = 255;
              let cards = info.cards.map(x => {
                let a = new GameCard();
                a.decodeCard(x, GlobalVariables.BINH);
                return a;
              });
              item.show(info.sessionID, info.betTime, info.bet, info.money, cards);
            } else {
              item.node.getComponent(UIOpacity).opacity = 1;
            }
          });

          if (hasFx) {
            this.show();
          }
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_prev", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_next", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbl_page", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "item_nodes", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import GameHTTPNetwork from "../../Network/GameHTTPNetwork";
      // import { GlobalVariables } from "../../Utils/GlobalVariables";
      // import { GameCard } from "../../Utils/MauBinh_CardLib";
      // import { StringUtils } from "../../Utils/StringUtils";
      // import TaiXiuPopupCmp from "../TaiXiu/TaiXiuPopupCmp";
      // import MiniPokerBetHistoryItemView from "./MiniPokerBetHistoryItemView";
      // 
      // class MiniPokerBetResult {
      //     public bet;
      //     public sessionID;
      //     public money;
      //     public cards: number[];
      //     public betTime;
      // };
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class MiniPokerBetHistoryView extends TaiXiuPopupCmp {
      //     @property(cc.Button)
      //     private btn_close: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_prev: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_next: cc.Button = null;
      // 
      //     @property(cc.Label)
      //     private lbl_page: cc.Label = null;
      // 
      //     @property([cc.Node])
      //     private item_nodes: cc.Node[] = [];
      // 
      //     private _bets: MiniPokerBetResult[] = [];
      // 
      //     private currentPage = 1;
      // 
      //     private max_pages = 0;
      // 
      //     private item_views: MiniPokerBetHistoryItemView[] = [];
      // 
      //     onLoad() {
      //         super.onLoad();
      //         this.original_scale = this.node.scale;
      //         this.btn_close.node.on("click", () => {
      //             this.hide();
      //         });
      // 
      //         this.btn_prev.node.on("click", () => {
      //             if (this.currentPage > 1) {
      //                 this.currentPage -= 1;
      //                 this.lbl_page.string = this.currentPage.toString();
      //             }
      //             this.fetchHistory(false);
      //         });
      // 
      //         this.btn_next.node.on("click", () => {
      //             if (this.currentPage < this.max_pages) {
      //                 this.currentPage += 1;
      //                 this.lbl_page.string = this.currentPage.toString();
      //             }
      //             this.fetchHistory(false);
      //         });
      //     }
      // 
      //     goToFirstPage() {
      //         this.currentPage = 1;
      //         this.lbl_page.string = this.currentPage.toString();
      //     }
      // 
      //     public fetchHistory(jumpToFirstPage = true) {
      //         if (jumpToFirstPage) this.goToFirstPage();
      // 
      //         let skip = (this.currentPage - 1) * 6;
      //         let url = GlobalVariables.BET_HISTORY_URL.replace("%gameid%",GlobalVariables.MINIPOKER.toString()).replace("%skip%", skip.toString());
      // 
      //         GameHTTPNetwork.sendGET(url, (response) => {
      //             this._bets = [];
      // 
      //             let doc = JSON.parse(response);
      // 
      //             let data = doc["data"];
      //             let jarr = data["items"];
      //             let count = data["count"];
      //             this.max_pages = Math.ceil(count / 6);
      // 
      //             for (let i = 0; i < jarr.length; i++) {
      //                 let jsonMNPKItem = jarr[i];
      // 
      //                 let newBetHistory = new MiniPokerBetResult();
      // 
      //                 newBetHistory.sessionID = jsonMNPKItem["sessionId"];
      //                 newBetHistory.bet = jsonMNPKItem["betting"];
      //                 newBetHistory.money = jsonMNPKItem["money"];
      //                 let requestTime = jsonMNPKItem["createdTime"];
      //                 let date = new Date(requestTime);
      //                 newBetHistory.betTime = StringUtils.formatTime(date);
      //                 newBetHistory.cards = [];
      // 
      //                 let cards: number[] = jsonMNPKItem["symbols"];
      //                 for (let j = 0; j < cards.length; j++) {
      //                     newBetHistory.cards.push(cards[j]);
      //                 }
      // 
      //                 this._bets.push(newBetHistory);
      //             }
      // 
      //             this.showBetHistory();
      //         });
      //     }
      // 
      //     public showBetHistory() {
      //         if(this.item_views.length <= 0) this.item_views = this.item_nodes.map(x => x.getComponent(MiniPokerBetHistoryItemView));
      //         this.item_views.forEach((item, index) => {
      //             let info = this._bets[index];
      //             if (info != null && info != undefined) {
      //                 item.node.opacity = 255;
      //                 let cards = info.cards.map(x => {
      //                     let a = new GameCard();
      //                     a.decodeCard(x, GlobalVariables.BINH);
      //                     return a;
      //                 });
      //                 item.show(info.sessionID, info.betTime, info.bet, info.money, cards);
      //             } else {
      //                 item.node.opacity = 0;
      //             }
      //         });
      // 
      //         this.show();
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuSessionHistoryView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './TaiXiuPopupCmp.ts', './LineCmp.ts', './TaiXiuSessionHistorySumItemView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Label, Button, Node, Toggle, _decorator, TaiXiuPopupCmp, LineCmp, TaiXiuSessionHistorySumItemView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Button = module.Button;
      Node = module.Node;
      Toggle = module.Toggle;
      _decorator = module._decorator;
    }, function (module) {
      TaiXiuPopupCmp = module.default;
    }, function (module) {
      LineCmp = module.default;
    }, function (module) {
      TaiXiuSessionHistorySumItemView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _temp;

      cclegacy._RF.push({}, "a79dfbZdVdPiIteTadQki2j", "TaiXiuSessionHistoryView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TaiXiuSessionHistoryView = exports('default', (_dec = ccclass('TaiXiuSessionHistoryView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Button), _dec5 = property(Button), _dec6 = property(Button), _dec7 = property([TaiXiuSessionHistorySumItemView]), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Node), _dec12 = property(Node), _dec13 = property(Label), _dec14 = property(Label), _dec15 = property(Label), _dec16 = property(Label), _dec17 = property(Node), _dec18 = property(Node), _dec19 = property(LineCmp), _dec20 = property(LineCmp), _dec21 = property(LineCmp), _dec22 = property(LineCmp), _dec23 = property(Toggle), _dec24 = property(Toggle), _dec25 = property(Toggle), _dec(_class = (_class2 = (_temp = class TaiXiuSessionHistoryView extends TaiXiuPopupCmp {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lb_recent_session", _descriptor, this);

          _initializerDefineProperty(this, "lb_recent_result", _descriptor2, this);

          _initializerDefineProperty(this, "btn_close", _descriptor3, this);

          _initializerDefineProperty(this, "btn_prev", _descriptor4, this);

          _initializerDefineProperty(this, "btn_next", _descriptor5, this);

          _initializerDefineProperty(this, "taiXiuSessionHistorySumItemViews", _descriptor6, this);

          _initializerDefineProperty(this, "tx_1_node", _descriptor7, this);

          _initializerDefineProperty(this, "tx_2_node", _descriptor8, this);

          _initializerDefineProperty(this, "tx_3_node", _descriptor9, this);

          _initializerDefineProperty(this, "content_result", _descriptor10, this);

          _initializerDefineProperty(this, "content_sum", _descriptor11, this);

          _initializerDefineProperty(this, "content_result_sum_tai", _descriptor12, this);

          _initializerDefineProperty(this, "content_result_sum_xiu", _descriptor13, this);

          _initializerDefineProperty(this, "content_sum_total_tai", _descriptor14, this);

          _initializerDefineProperty(this, "content_sum_total_xiu", _descriptor15, this);

          _initializerDefineProperty(this, "page_1", _descriptor16, this);

          _initializerDefineProperty(this, "page_2", _descriptor17, this);

          _initializerDefineProperty(this, "sumLineCmp", _descriptor18, this);

          _initializerDefineProperty(this, "d1linecmp", _descriptor19, this);

          _initializerDefineProperty(this, "d2linecmp", _descriptor20, this);

          _initializerDefineProperty(this, "d3linecmp", _descriptor21, this);

          _initializerDefineProperty(this, "tog_d1", _descriptor22, this);

          _initializerDefineProperty(this, "tog_d2", _descriptor23, this);

          _initializerDefineProperty(this, "tog_d3", _descriptor24, this);

          _defineProperty(this, "tx_1_dice_views", []);

          _defineProperty(this, "tx_2_dice_views", []);

          _defineProperty(this, "tx_3_dice_views", []);

          _defineProperty(this, "taiXiuSessionHistoryResultItemView", []);

          _defineProperty(this, "taiXiuSessionHistoryResultSumItemView", []);

          _defineProperty(this, "_result", []);
        }

        onLoad() {//super.onLoad();
          //this.original_scale = this.node.scale;
          //this.btn_close.node.on("click", () => {
          //this.hide();
          //});
          //this.btn_prev.node.on("click", () => {
          //this.page_1.runAction(cc.moveTo(0.25,cc.v2(0,0)));
          //this.page_2.runAction(cc.moveTo(0.25,cc.v2(this.page_2.getContentSize().width,0)));
          //this.btn_prev.node.active = false;
          //this.btn_next.node.active = true;
          //});
          //this.btn_next.node.on("click", () => {
          //this.page_1.runAction(cc.moveTo(0.25,cc.v2(-this.page_1.getContentSize().width,0)));
          //this.page_2.runAction(cc.moveTo(0.25,cc.v2(0,0)));
          //this.btn_prev.node.active = true;
          //this.btn_next.node.active = false;
          //});
          //this.tog_d1.node.on("click", () => {
          //if (this.tog_d1.isChecked) {
          //this.showD1(false);
          //} else {
          //this.showD1();
          //}
          //});
          //this.tog_d2.node.on("click", () => {
          //if (this.tog_d2.isChecked) {
          //this.showD2(false);
          //} else {
          //this.showD2();
          //}
          //});
          //this.tog_d3.node.on("click", () => {
          //if (this.tog_d3.isChecked) {
          //this.showD3(false);
          //} else {
          //this.showD3();
          //}
          //});
        }

        showD1(isshow = true) {//if (isshow) {
          //this.tx_1_dice_views.forEach((diceitem, index) => {
          //let d1 = this._result[this._result.length - 1 - index].d1;
          //diceitem.node.opacity = 255;
          //diceitem.show(d1);
          //});
          //let d1points = this.tx_1_dice_views.map(x => x.node.position);
          //this.d1linecmp.draw(d1points, 1, cc.Color.MAGENTA,this.node);
          //}
          //else {
          //this.tx_1_dice_views.forEach((diceitem, index) => {
          //diceitem.node.opacity = 0;
          //});
          //this.d1linecmp.clear();
          //}
        }

        showD2(isshow = true) {//if (isshow) {
          //this.tx_2_dice_views.forEach((diceitem, index) => {
          //let d2 = this._result[this._result.length - 1 - index].d2;
          //diceitem.node.opacity = 255;
          //diceitem.show(d2);
          //});
          //let d2points = this.tx_2_dice_views.map(x => x.node.position);
          //this.d2linecmp.draw(d2points, 1, cc.Color.YELLOW,this.node);
          //}
          //else {
          //this.tx_2_dice_views.forEach((diceitem, index) => {
          //diceitem.node.opacity = 0;
          //});
          //this.d2linecmp.clear();
          //}
        }

        showD3(isshow = true) {//if (isshow) {
          //this.tx_3_dice_views.forEach((diceitem, index) => {
          //let d3 = this._result[this._result.length - 1 - index].d3;
          //diceitem.node.opacity = 255;
          //diceitem.show(d3);
          //});
          //let d3points = this.tx_3_dice_views.map(x => x.node.position);
          //this.d3linecmp.draw(d3points, 1, cc.Color.RED,this.node);
          //}
          //else {
          //this.tx_3_dice_views.forEach((diceitem, index) => {
          //diceitem.node.opacity = 0;
          //});
          //this.d3linecmp.clear();
          //}
        }

        setHistory(result) {//this._result = result;
          //if (this.tx_1_dice_views.length <= 0) this.tx_1_dice_views = this.tx_1_node.getComponentsInChildren(TaiXiuSessionHistoryDiceItemView);
          //if (this.tx_2_dice_views.length <= 0) this.tx_2_dice_views = this.tx_2_node.getComponentsInChildren(TaiXiuSessionHistoryDiceItemView);
          //if (this.tx_3_dice_views.length <= 0) this.tx_3_dice_views = this.tx_3_node.getComponentsInChildren(TaiXiuSessionHistoryDiceItemView);
          //if (this.taiXiuSessionHistoryResultItemView.length <= 0)
          //this.taiXiuSessionHistoryResultItemView = this.content_result.getComponentsInChildren(TaiXiuSessionHistoryResultItemView);
          //if (this.taiXiuSessionHistoryResultSumItemView.length <= 0)
          //this.taiXiuSessionHistoryResultSumItemView = this.content_sum.getComponentsInChildren(TaiXiuSessionHistoryResultSumItemView);
          //let recent_result = result[result.length - 1];
          //this.lb_recent_session.string = "Phiên gần nhất: #" + recent_result.sessionID.toString();
          //let sum = recent_result.d1 + recent_result.d2 + recent_result.d3;
          //this.lb_recent_result.string = recent_result.d1 + "-" + recent_result.d2 + "-" + recent_result.d3 + "(" + (sum > 10 ? "Tài" : "Xỉu") + ")";
          //this.taiXiuSessionHistorySumItemViews.forEach((sumitem, index) => {
          //let total = result[result.length - 1 - index].d1 + result[result.length - 1 - index].d2 + result[result.length - 1 - index].d3;
          //sumitem.node.opacity = 255;
          //sumitem.show(total);
          //});
          // Draw page 2 lich su phien
          //let sum_tai = 0;
          //let sum_xiu = 0;
          //let grid = [];
          //let search_index = result.length - 1;
          //for(let column = 0 ; column < 20;column++){
          //let arr = [];
          //let is_tai_first = result[search_index].d1 + result[search_index].d2 + result[search_index].d3 > 10;
          //let limit = search_index - 5;
          //for(let i = search_index;i > limit ; i--){
          //let is_tai = result[i].d1 + result[i].d2 + result[i].d3 > 10;
          //if(is_tai == is_tai_first){
          //search_index = i;
          //arr.splice(0,0,result[i].d1 + result[i].d2 + result[i].d3);
          //}else{
          //search_index -= 1;
          //break;
          //}
          //}
          //if(arr.length > 0) grid.push(arr);
          //}
          //grid.forEach((arr : [],arr_index) => {
          //let start_index = arr_index * 5;
          //for(let i = 0 ;i < 5;i++){
          //let item_index = start_index + i;
          //if(i < arr.length){
          //this.taiXiuSessionHistoryResultSumItemView[item_index].node.opacity = 255;
          //let sum = arr[i];
          //if(sum > 10) sum_tai += 1;
          //else sum_xiu += 1;
          //this.taiXiuSessionHistoryResultSumItemView[item_index].show(sum);
          //}else{
          //this.taiXiuSessionHistoryResultSumItemView[item_index].node.opacity = 0;
          //}
          //}
          //});
          //this.content_sum_total_tai.string = "Tài: " + sum_tai.toString();
          //this.content_sum_total_xiu.string = "Xỉu: " + sum_xiu.toString();
          //sum_tai = 0;
          //sum_xiu = 0;
          //this.taiXiuSessionHistoryResultItemView.forEach((resultitem, index) => {
          //let total = result[result.length - 1 - index].d1 + result[result.length - 1 - index].d2 + result[result.length - 1 - index].d3;
          //resultitem.node.opacity = 255;
          //resultitem.show(total);
          //if(total > 10) sum_tai += 1;
          //else sum_xiu += 1;
          //});
          //this.content_result_sum_tai.string = "Tài: " + sum_tai.toString();
          //this.content_result_sum_xiu.string = "Xỉu: " + sum_xiu.toString();
          // End draw page lich su phien
          //if (this.tog_d1.isChecked) {
          //this.showD1();
          //} else {
          //this.showD1(false);
          //}
          //if (this.tog_d2.isChecked) {
          //this.showD2();
          //} else {
          //this.showD2(false);
          //}
          //if (this.tog_d3.isChecked) {
          //this.showD3();
          //} else {
          //this.showD3(false);
          //}
          //let sumpoints = this.taiXiuSessionHistorySumItemViews.map(x => x.node.position);
          //this.sumLineCmp.draw(sumpoints, 2, cc.Color.WHITE,this.node);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lb_recent_session", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lb_recent_result", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_close", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_prev", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btn_next", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "taiXiuSessionHistorySumItemViews", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "tx_1_node", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "tx_2_node", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "tx_3_node", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "content_result", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "content_sum", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "content_result_sum_tai", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "content_result_sum_xiu", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "content_sum_total_tai", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "content_sum_total_xiu", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "page_1", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "page_2", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "sumLineCmp", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "d1linecmp", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "d2linecmp", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "d3linecmp", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "tog_d1", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "tog_d2", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "tog_d3", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { StringUtils } from "../../Utils/StringUtils";
      // import LineCmp from "./LineCmp";
      // import { TaiXiuResult } from "./TaiXiuGameView";
      // import TaiXiuPopupCmp from "./TaiXiuPopupCmp";
      // import TaiXiuSessionHistoryDiceItemView from "./TaiXiuSessionHistoryDiceItemView";
      // import TaiXiuSessionHistoryResultItemView from "./TaiXiuSessionHistoryResultItemView";
      // import TaiXiuSessionHistoryResultSumItemView from "./TaiXiuSessionHistoryResultSumItemView";
      // import TaiXiuSessionHistorySumItemView from "./TaiXiuSessionHistorySumItemView";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuSessionHistoryView extends TaiXiuPopupCmp {
      //     @property(cc.Label)
      //     private lb_recent_session: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private lb_recent_result: cc.Label = null;
      // 
      //     @property(cc.Button)
      //     private btn_close: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_prev: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_next: cc.Button = null;
      // 
      //     @property([TaiXiuSessionHistorySumItemView])
      //     private taiXiuSessionHistorySumItemViews: TaiXiuSessionHistorySumItemView[] = [];
      // 
      //     @property(cc.Node)
      //     private tx_1_node: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private tx_2_node: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private tx_3_node: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private content_result: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private content_sum: cc.Node = null;
      // 
      //     @property(cc.Label)
      //     private content_result_sum_tai: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private content_result_sum_xiu: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private content_sum_total_tai: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private content_sum_total_xiu: cc.Label = null;
      // 
      //     @property(cc.Node)
      //     private page_1: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private page_2: cc.Node = null;
      // 
      //     @property(LineCmp)
      //     private sumLineCmp: LineCmp = null;
      // 
      //     @property(LineCmp)
      //     private d1linecmp: LineCmp = null;
      // 
      //     @property(LineCmp)
      //     private d2linecmp: LineCmp = null;
      // 
      //     @property(LineCmp)
      //     private d3linecmp: LineCmp = null;
      // 
      //     @property(cc.Toggle)
      //     private tog_d1: cc.Toggle = null;
      // 
      //     @property(cc.Toggle)
      //     private tog_d2: cc.Toggle = null;
      // 
      //     @property(cc.Toggle)
      //     private tog_d3: cc.Toggle = null;
      // 
      //     private tx_1_dice_views: TaiXiuSessionHistoryDiceItemView[] = [];
      // 
      //     private tx_2_dice_views: TaiXiuSessionHistoryDiceItemView[] = [];
      // 
      //     private tx_3_dice_views: TaiXiuSessionHistoryDiceItemView[] = [];
      // 
      //     private taiXiuSessionHistoryResultItemView: TaiXiuSessionHistoryResultItemView[] = [];
      // 
      //     private taiXiuSessionHistoryResultSumItemView: TaiXiuSessionHistoryResultSumItemView[] = [];
      // 
      //     private _result: TaiXiuResult[] = [];
      // 
      //     onLoad() {
      //         super.onLoad();
      //         
      //         this.original_scale = this.node.scale;
      //         this.btn_close.node.on("click", () => {
      //             this.hide();
      //         });
      // 
      //         this.btn_prev.node.on("click", () => {
      //             this.page_1.runAction(cc.moveTo(0.25,cc.v2(0,0)));
      //             this.page_2.runAction(cc.moveTo(0.25,cc.v2(this.page_2.getContentSize().width,0)));
      // 
      //             this.btn_prev.node.active = false;
      //             this.btn_next.node.active = true;
      //         });
      // 
      //         this.btn_next.node.on("click", () => {
      //             this.page_1.runAction(cc.moveTo(0.25,cc.v2(-this.page_1.getContentSize().width,0)));
      //             this.page_2.runAction(cc.moveTo(0.25,cc.v2(0,0)));
      // 
      //             this.btn_prev.node.active = true;
      //             this.btn_next.node.active = false;
      //         });
      // 
      //         this.tog_d1.node.on("click", () => {
      //             if (this.tog_d1.isChecked) {
      //                 this.showD1(false);
      //             } else {
      //                 this.showD1();
      //             }
      //         });
      // 
      //         this.tog_d2.node.on("click", () => {
      //             if (this.tog_d2.isChecked) {
      //                 this.showD2(false);
      //             } else {
      //                 this.showD2();
      //             }
      //         });
      // 
      //         this.tog_d3.node.on("click", () => {
      //             if (this.tog_d3.isChecked) {
      //                 this.showD3(false);
      //             } else {
      //                 this.showD3();
      //             }
      //         });
      //     }
      // 
      //     showD1(isshow = true) {
      //         if (isshow) {
      //             this.tx_1_dice_views.forEach((diceitem, index) => {
      //                 let d1 = this._result[this._result.length - 1 - index].d1;
      //                 diceitem.node.opacity = 255;
      //                 diceitem.show(d1);
      //             });
      //             let d1points = this.tx_1_dice_views.map(x => x.node.position);
      //             this.d1linecmp.draw(d1points, 1, cc.Color.MAGENTA,this.node);
      //         }
      //         else {
      //             this.tx_1_dice_views.forEach((diceitem, index) => {
      //                 diceitem.node.opacity = 0;
      //             });
      //             this.d1linecmp.clear();
      //         }
      //     }
      // 
      //     showD2(isshow = true) {
      //         if (isshow) {
      //             this.tx_2_dice_views.forEach((diceitem, index) => {
      //                 let d2 = this._result[this._result.length - 1 - index].d2;
      //                 diceitem.node.opacity = 255;
      //                 diceitem.show(d2);
      //             });
      //             let d2points = this.tx_2_dice_views.map(x => x.node.position);
      //             this.d2linecmp.draw(d2points, 1, cc.Color.YELLOW,this.node);
      //         }
      //         else {
      //             this.tx_2_dice_views.forEach((diceitem, index) => {
      //                 diceitem.node.opacity = 0;
      //             });
      //             this.d2linecmp.clear();
      //         }
      //     }
      // 
      //     showD3(isshow = true) {
      //         if (isshow) {
      //             this.tx_3_dice_views.forEach((diceitem, index) => {
      //                 let d3 = this._result[this._result.length - 1 - index].d3;
      //                 diceitem.node.opacity = 255;
      //                 diceitem.show(d3);
      //             });
      //             let d3points = this.tx_3_dice_views.map(x => x.node.position);
      //             this.d3linecmp.draw(d3points, 1, cc.Color.RED,this.node);
      //         }
      //         else {
      //             this.tx_3_dice_views.forEach((diceitem, index) => {
      //                 diceitem.node.opacity = 0;
      //             });
      //             this.d3linecmp.clear();
      //         }
      //     }
      // 
      //     public setHistory(result: TaiXiuResult[]) {
      //         this._result = result;
      //         if (this.tx_1_dice_views.length <= 0) this.tx_1_dice_views = this.tx_1_node.getComponentsInChildren(TaiXiuSessionHistoryDiceItemView);
      //         if (this.tx_2_dice_views.length <= 0) this.tx_2_dice_views = this.tx_2_node.getComponentsInChildren(TaiXiuSessionHistoryDiceItemView);
      //         if (this.tx_3_dice_views.length <= 0) this.tx_3_dice_views = this.tx_3_node.getComponentsInChildren(TaiXiuSessionHistoryDiceItemView);
      // 
      //         if (this.taiXiuSessionHistoryResultItemView.length <= 0) 
      //             this.taiXiuSessionHistoryResultItemView = this.content_result.getComponentsInChildren(TaiXiuSessionHistoryResultItemView);
      // 
      //         if (this.taiXiuSessionHistoryResultSumItemView.length <= 0) 
      //             this.taiXiuSessionHistoryResultSumItemView = this.content_sum.getComponentsInChildren(TaiXiuSessionHistoryResultSumItemView);
      // 
      //         let recent_result = result[result.length - 1];
      //         this.lb_recent_session.string = "Phiên gần nhất: #" + recent_result.sessionID.toString();
      //         let sum = recent_result.d1 + recent_result.d2 + recent_result.d3;
      //         this.lb_recent_result.string = recent_result.d1 + "-" + recent_result.d2 + "-" + recent_result.d3 + "(" + (sum > 10 ? "Tài" : "Xỉu") + ")";
      //  
      //         this.taiXiuSessionHistorySumItemViews.forEach((sumitem, index) => {
      //             let total = result[result.length - 1 - index].d1 + result[result.length - 1 - index].d2 + result[result.length - 1 - index].d3;
      //             sumitem.node.opacity = 255;
      //             sumitem.show(total);
      //         });
      // 
      //         // Draw page 2 lich su phien
      //         let sum_tai = 0;
      //         let sum_xiu = 0; 
      //         let grid = [];
      //         let search_index = result.length - 1;
      //         for(let column = 0 ; column < 20;column++){
      //             let arr = [];
      //             let is_tai_first = result[search_index].d1 + result[search_index].d2 + result[search_index].d3 > 10;
      //             let limit = search_index - 5;
      //             for(let i = search_index;i > limit ; i--){
      //                 let is_tai = result[i].d1 + result[i].d2 + result[i].d3 > 10;
      //                 if(is_tai == is_tai_first){
      //                     search_index = i;
      //                     arr.splice(0,0,result[i].d1 + result[i].d2 + result[i].d3);
      //                 }else{
      //                     search_index -= 1;
      //                     break;
      //                 }
      //             }
      //             if(arr.length > 0) grid.push(arr);
      //         }
      //         grid.forEach((arr : [],arr_index) => {
      //             let start_index = arr_index * 5;
      //             for(let i = 0 ;i < 5;i++){
      //                 let item_index = start_index + i;
      //                 if(i < arr.length){
      //                     this.taiXiuSessionHistoryResultSumItemView[item_index].node.opacity = 255;
      //                     let sum = arr[i];
      //                     if(sum > 10) sum_tai += 1;
      //                     else sum_xiu += 1;
      //                     this.taiXiuSessionHistoryResultSumItemView[item_index].show(sum);
      //                 }else{
      //                     this.taiXiuSessionHistoryResultSumItemView[item_index].node.opacity = 0;
      //                 }
      //             }
      //         });
      // 
      //         this.content_sum_total_tai.string = "Tài: " + sum_tai.toString();
      //         this.content_sum_total_xiu.string = "Xỉu: " + sum_xiu.toString();
      // 
      //         sum_tai = 0;
      //         sum_xiu = 0;
      //         this.taiXiuSessionHistoryResultItemView.forEach((resultitem, index) => {
      //             let total = result[result.length - 1 - index].d1 + result[result.length - 1 - index].d2 + result[result.length - 1 - index].d3;
      //             resultitem.node.opacity = 255;
      //             resultitem.show(total);
      //             if(total > 10) sum_tai += 1;
      //             else sum_xiu += 1;
      //         });
      // 
      //         this.content_result_sum_tai.string = "Tài: " + sum_tai.toString();
      //         this.content_result_sum_xiu.string = "Xỉu: " + sum_xiu.toString();
      //         // End draw page lich su phien
      // 
      //         if (this.tog_d1.isChecked) {
      //             this.showD1();
      //         } else {
      //             this.showD1(false);
      //         }
      // 
      //         if (this.tog_d2.isChecked) {
      //             this.showD2();
      //         } else {
      //             this.showD2(false);
      //         }
      // 
      // 
      //         if (this.tog_d3.isChecked) {
      //             this.showD3();
      //         } else {
      //             this.showD3(false);
      //         }
      // 
      //         let sumpoints = this.taiXiuSessionHistorySumItemViews.map(x => x.node.position);
      //         this.sumLineCmp.draw(sumpoints, 2, cc.Color.WHITE,this.node);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CCSpriteFrameLoader.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CCComponentLoader.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, String, _decorator, CCComponentLoader;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      String = module.String;
      _decorator = module._decorator;
    }, function (module) {
      CCComponentLoader = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "a90333ocoNNnK6xniFXmkhm", "CCSpriteFrameLoader", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let CCSpriteFrameLoader = exports('default', (_dec = ccclass('CCSpriteFrameLoader'), _dec2 = property(String), _dec(_class = (_class2 = (_temp = class CCSpriteFrameLoader extends CCComponentLoader {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "asset_path", _descriptor, this);

          _initializerDefineProperty(this, "insetTop", _descriptor2, this);

          _initializerDefineProperty(this, "insetBottom", _descriptor3, this);

          _initializerDefineProperty(this, "insetLeft", _descriptor4, this);

          _initializerDefineProperty(this, "insetRight", _descriptor5, this);

          _defineProperty(this, "sprite", null);
        }

        init() {//if(this.sprite == null) this.sprite = this.node.getComponent(cc.Sprite);
          //let self = this;
          //cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,this.asset_path), (sprite_frame : cc.SpriteFrame) => {
          //sprite_frame.insetTop = this.insetTop;
          //sprite_frame.insetBottom = this.insetBottom;
          //sprite_frame.insetLeft = this.insetLeft;
          //sprite_frame.insetRight = this.insetRight;
          //self.sprite.spriteFrame = sprite_frame;
          //},this.node);
        }

        getPaths() {//return [this.asset_path];
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "asset_path", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "insetTop", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "insetBottom", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "insetLeft", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "insetRight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import CCComponentLoader from "./CCComponentLoader";
      // import Downloader from "./Downloader";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class CCSpriteFrameLoader extends CCComponentLoader{
      //     @property(cc.String)
      //     public asset_path = "";
      // 
      //     @property
      //     protected insetTop : number = 0;
      // 
      //     @property
      //     protected insetBottom : number = 0;
      // 
      //     @property
      //     protected insetLeft : number = 0;
      // 
      //     @property
      //     protected insetRight : number = 0;
      // 
      //     private sprite : cc.Sprite = null;
      // 
      //     init() {   
      //         if(this.sprite == null) this.sprite = this.node.getComponent(cc.Sprite);
      //         let self = this;
      //         cc.systemEvent.on(Downloader.createKey(Downloader.DOWNLOADED_EVENT_KEY,this.asset_path), (sprite_frame : cc.SpriteFrame) => {
      //             sprite_frame.insetTop = this.insetTop;
      //             sprite_frame.insetBottom = this.insetBottom;
      //             sprite_frame.insetLeft = this.insetLeft;
      //             sprite_frame.insetRight = this.insetRight;
      //             self.sprite.spriteFrame = sprite_frame;
      //         },this.node);
      //     }
      // 
      //     getPaths() : string[]{
      //         return [this.asset_path];
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BauCuaFullScreenGameView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './JackpotItemView.ts', './MiniGameNetworkHandler.ts', './GameNetworkHandler.ts', './NotiView.ts', './GameUtils.ts', './GlobalVariables.ts', './BaseFullScreenGameView.ts', './ChipPanel.ts', './BauCuaBetEntry.ts', './BauCuaSettingPopup.ts', './ChipPooling.ts', './PlayerView.ts', './SoiCauPopup.ts', './UserChatPopup.ts', './UserInvitePopup.ts', './UserOnlinePopup.ts', './LobbyViewController.ts', './MiniGameNodeController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, sp, Label, Button, UITransform, Sprite, SpriteFrame, _decorator, Vec3, systemEvent, Tween, tween, GameConfigManager, JackpotItemView, MessageRequest, MessageResponse, GameNetworkHandler, NotiView, GameUtils, GlobalVariables, GLOBAL_MESSAGE, BaseFullScreenGameView, ChipPanel, BauCuaBetEntry, BauCuaSettingPopup, ChipPooling, PlayerView, SoiCauPopup, UserChatPopup, UserInvitePopup, UserOnlinePopup, LobbyViewController, MiniGameNodeController, GamePlayManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sp = module.sp;
      Label = module.Label;
      Button = module.Button;
      UITransform = module.UITransform;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      systemEvent = module.systemEvent;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      JackpotItemView = module.JackpotItemView;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MessageResponse = module.MessageResponse;
    }, function (module) {
      GameNetworkHandler = module.GameNetworkHandler;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GameUtils = module.default;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
      GLOBAL_MESSAGE = module.GLOBAL_MESSAGE;
    }, function (module) {
      BaseFullScreenGameView = module.BaseFullScreenGameView;
    }, function (module) {
      ChipPanel = module.ChipPanel;
    }, function (module) {
      BauCuaBetEntry = module.BauCuaBetEntry;
    }, function (module) {
      BauCuaSettingPopup = module.BauCuaSettingPopup;
    }, function (module) {
      ChipPooling = module.ChipPooling;
    }, function (module) {
      PlayerView = module.PlayerView;
    }, function (module) {
      SoiCauPopup = module.SoiCauPopup;
    }, function (module) {
      UserChatPopup = module.UserChatPopup;
    }, function (module) {
      UserInvitePopup = module.UserInvitePopup;
    }, function (module) {
      UserOnlinePopup = module.UserOnlinePopup;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      MiniGameNodeController = module.default;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      exports('BauCua_Message', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _class3, _temp;

      cclegacy._RF.push({}, "a9bfde1oi9HhKJNk8G8iANh", "BauCuaFullScreenGameView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BauCua_Message;

      (function (BauCua_Message) {
        BauCua_Message[BauCua_Message["SELF_BET"] = 1101] = "SELF_BET";
        BauCua_Message[BauCua_Message["REBET"] = 1102] = "REBET";
        BauCua_Message[BauCua_Message["OTHERS_BET"] = 1103] = "OTHERS_BET";
        BauCua_Message[BauCua_Message["START_GAME"] = 1100] = "START_GAME";
        BauCua_Message[BauCua_Message["FINISH_GAME"] = 1104] = "FINISH_GAME";
      })(BauCua_Message || (BauCua_Message = exports('BauCua_Message', {})));

      class PlayerInfo {
        constructor() {
          _defineProperty(this, "displayName", "");

          _defineProperty(this, "gold", 0);

          _defineProperty(this, "avatarURL", "");

          _defineProperty(this, "uid", "");

          _defineProperty(this, "isHost", false);
        }

      }

      exports('PlayerInfo', PlayerInfo);
      let BauCuaFullScreenGameView = exports('BauCuaFullScreenGameView', (_dec = ccclass('BauCuaFullScreenGameView'), _dec2 = property([BauCuaBetEntry]), _dec3 = property(sp.Skeleton), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(ChipPooling), _dec7 = property([PlayerView]), _dec8 = property(PlayerView), _dec9 = property(UserOnlinePopup), _dec10 = property(UserChatPopup), _dec11 = property(UserInvitePopup), _dec12 = property(ChipPanel), _dec13 = property(Button), _dec14 = property(Button), _dec15 = property(Button), _dec16 = property(Button), _dec17 = property(Button), _dec18 = property(UITransform), _dec19 = property(Sprite), _dec20 = property(Sprite), _dec21 = property(Sprite), _dec22 = property(Sprite), _dec23 = property(Sprite), _dec24 = property(Sprite), _dec25 = property(SoiCauPopup), _dec26 = property(BauCuaSettingPopup), _dec27 = property(JackpotItemView), _dec28 = property([SpriteFrame]), _dec29 = property([SpriteFrame]), _dec(_class = (_class2 = (_temp = _class3 = class BauCuaFullScreenGameView extends BaseFullScreenGameView {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "bauCuaBetEntries", _descriptor, this);

          _initializerDefineProperty(this, "shake_anim", _descriptor2, this);

          _initializerDefineProperty(this, "lbl_countdown", _descriptor3, this);

          _initializerDefineProperty(this, "lbl_userOnline", _descriptor4, this);

          _initializerDefineProperty(this, "chipPooling", _descriptor5, this);

          _initializerDefineProperty(this, "playerViews", _descriptor6, this);

          _initializerDefineProperty(this, "my_info", _descriptor7, this);

          _initializerDefineProperty(this, "userOnlinePopup", _descriptor8, this);

          _initializerDefineProperty(this, "userChatPopup", _descriptor9, this);

          _initializerDefineProperty(this, "userInvitePopup", _descriptor10, this);

          _initializerDefineProperty(this, "chipPanel", _descriptor11, this);

          _initializerDefineProperty(this, "btn_user", _descriptor12, this);

          _initializerDefineProperty(this, "btn_invite", _descriptor13, this);

          _initializerDefineProperty(this, "btn_chat", _descriptor14, this);

          _initializerDefineProperty(this, "btn_soicau", _descriptor15, this);

          _initializerDefineProperty(this, "btn_exit", _descriptor16, this);

          _initializerDefineProperty(this, "dice_result_node", _descriptor17, this);

          _initializerDefineProperty(this, "dice1", _descriptor18, this);

          _initializerDefineProperty(this, "dice2", _descriptor19, this);

          _initializerDefineProperty(this, "dice3", _descriptor20, this);

          _initializerDefineProperty(this, "last_dice1", _descriptor21, this);

          _initializerDefineProperty(this, "last_dice2", _descriptor22, this);

          _initializerDefineProperty(this, "last_dice3", _descriptor23, this);

          _initializerDefineProperty(this, "soiCauPopup", _descriptor24, this);

          _initializerDefineProperty(this, "bauCuaSettingPopup", _descriptor25, this);

          _initializerDefineProperty(this, "jackpotItemView", _descriptor26, this);

          _initializerDefineProperty(this, "dice_frames", _descriptor27, this);

          _initializerDefineProperty(this, "last_dice_frames", _descriptor28, this);

          _defineProperty(this, "_coinValues", []);

          _defineProperty(this, "_playerInfo", []);

          _defineProperty(this, "dice_result_origin_pos", Vec3.zero);

          _defineProperty(this, "_danhSachSoiCau", []);

          _defineProperty(this, "current_count_down", 0);
        }

        static getInstance() {
          return BauCuaFullScreenGameView.instance;
        }

        onLoad() {
          var _this$btn_user, _this$btn_invite, _this$btn_chat, _this$btn_soicau, _this$btn_exit;

          super.onLoad();
          this.dice_result_origin_pos = new Vec3(this.dice_result_node.node.position);
          BauCuaFullScreenGameView.instance = this;
          this.gameID = GlobalVariables.BAU_CUA_FULL;
          this.chipPooling.pool();
          (_this$btn_user = this.btn_user) === null || _this$btn_user === void 0 ? void 0 : _this$btn_user.node.on("click", () => {
            var _this$userOnlinePopup;

            (_this$userOnlinePopup = this.userOnlinePopup) === null || _this$userOnlinePopup === void 0 ? void 0 : _this$userOnlinePopup.show();
          });
          (_this$btn_invite = this.btn_invite) === null || _this$btn_invite === void 0 ? void 0 : _this$btn_invite.node.on("click", () => {
            var _this$userInvitePopup;

            (_this$userInvitePopup = this.userInvitePopup) === null || _this$userInvitePopup === void 0 ? void 0 : _this$userInvitePopup.fetchUserInvitations();
          });
          (_this$btn_chat = this.btn_chat) === null || _this$btn_chat === void 0 ? void 0 : _this$btn_chat.node.on("click", () => {
            var _this$userChatPopup;

            (_this$userChatPopup = this.userChatPopup) === null || _this$userChatPopup === void 0 ? void 0 : _this$userChatPopup.show();
          });
          (_this$btn_soicau = this.btn_soicau) === null || _this$btn_soicau === void 0 ? void 0 : _this$btn_soicau.node.on("click", () => {
            var _this$soiCauPopup;

            (_this$soiCauPopup = this.soiCauPopup) === null || _this$soiCauPopup === void 0 ? void 0 : _this$soiCauPopup.show();
          });
          (_this$btn_exit = this.btn_exit) === null || _this$btn_exit === void 0 ? void 0 : _this$btn_exit.node.on("click", () => {
            var _this$bauCuaSettingPo;

            (_this$bauCuaSettingPo = this.bauCuaSettingPopup) === null || _this$bauCuaSettingPo === void 0 ? void 0 : _this$bauCuaSettingPo.show();
          });
        }

        getChipPooling() {
          return this.chipPooling;
        }

        sendBet(eid, bet) {
          if (!BauCuaFullScreenGameView.IS_START) {
            NotiView.getInstance().showMessage("Ván chơi chưa bắt đầu!", null, GlobalVariables.BAU_CUA_FULL);
            return;
          }

          let dict = {};
          dict["cmd"] = BauCua_Message.SELF_BET;
          dict["eid"] = eid;
          dict["v"] = bet;
          let data = [MessageRequest.RoomPlugin_Type, "Simms", GamePlayManager.roomID, dict];
          GameNetworkHandler.send(data);
        }

        resetUI() {
          var _this$userChatPopup2, _this$bauCuaSettingPo2, _this$soiCauPopup2, _this$userOnlinePopup2, _this$userInvitePopup2;

          (_this$userChatPopup2 = this.userChatPopup) === null || _this$userChatPopup2 === void 0 ? void 0 : _this$userChatPopup2.close();
          (_this$bauCuaSettingPo2 = this.bauCuaSettingPopup) === null || _this$bauCuaSettingPo2 === void 0 ? void 0 : _this$bauCuaSettingPo2.close();
          (_this$soiCauPopup2 = this.soiCauPopup) === null || _this$soiCauPopup2 === void 0 ? void 0 : _this$soiCauPopup2.close();
          (_this$userOnlinePopup2 = this.userOnlinePopup) === null || _this$userOnlinePopup2 === void 0 ? void 0 : _this$userOnlinePopup2.close();
          (_this$userInvitePopup2 = this.userInvitePopup) === null || _this$userInvitePopup2 === void 0 ? void 0 : _this$userInvitePopup2.close();
        }

        handleRefreshMoney(money) {
          let player = this.getPlayerByUID(GameConfigManager.uid);

          if (player == null) {
            return;
          }

          let infos = this._playerInfo.filter(p => p.uid == GameConfigManager.uid);

          if (infos.length > 0) {
            infos[0].gold = money;
          }

          player.refresh();
        }

        handleBackGameFromInterupt(timeInterupted) {
          console.log("handleBackGameFromInterupt::baucua", timeInterupted);

          if (BauCuaFullScreenGameView.IS_END) {
            this.forceLeaveRoom();
          } else {
            this.continueCountDownBy(-timeInterupted);
          }
        }

        handleLeaveRoomResponse(message) {
          super.handleLeaveRoomResponse(message);
        }

        showChat(name, content) {
          var _this$bauCuaSettingPo3;

          if (((_this$bauCuaSettingPo3 = this.bauCuaSettingPopup) === null || _this$bauCuaSettingPo3 === void 0 ? void 0 : _this$bauCuaSettingPo3.isHideChat()) && name != GameConfigManager.uid) {
            return;
          }

          let player = this.getPlayerByUID(name);

          if (player == null) {
            return;
          }

          player.showBubbleChat(content);
        }

        updateJackpotLabel(balance) {
          this.jackpotItemView.updateAmount(balance);
        }

        noHu(ps) {
          let anim = this.jackpotItemView.node.getComponent(sp.Skeleton);

          if (anim != null) {
            let track = anim.setAnimation(0, "win", false);

            if (track) {
              anim.setCompleteListener(trackEntry => {
                let name = trackEntry.animation ? trackEntry.animation.name : '';

                if (name == "win") {
                  anim.setAnimation(0, "loop", true);
                }
              });
            }
          }
        }

        handleInGameMessage(message) {
          let dict = message[1];
          let cmd = dict["cmd"];

          if (cmd == GLOBAL_MESSAGE.INGAME_USER_CHAT) {
            // chat
            let name = dict["uid"];
            let content = dict["mgs"];
            this.showChat(name, content);
          } else if (cmd == GLOBAL_MESSAGE.INGAME_JACKPOT) {
            let gameID = dict["gid"]; // if (gameID == GameUIManager::getInstance()->currentGameID) {

            let balance = dict["ba"];
            this.updateJackpotLabel(balance);
            let ps = dict["wns"];
            this.noHu(ps); // }
          } else if (cmd == GLOBAL_MESSAGE.INGAME_GET_JACKPOTS) {
            let gameID = dict["gid"]; // if (gameID == GameUIManager::getInstance()->currentGameID) {

            let balance = dict["ba"];
            this.updateJackpotLabel(balance); // }
          } else if (cmd == 303) {
            let playerArr = dict["us"];
            this.userInvitePopup.showPlayersToBeInvited(playerArr);
          } else if (cmd == GLOBAL_MESSAGE.REFRESH_MONEY) {
            let as = dict["As"];
            let vip = as["vip"];
            let gold = as["gold"];
            let chip = as["chip"];
            let goldSafe = as["safe"];
            GameConfigManager.gold = gold;
            systemEvent.emit(LobbyViewController.REFRESH_MONEY, GameConfigManager.gold + BauCuaFullScreenGameView.KEEP_MONEY);
          } // else if (cmd == 303) {
          //     // MsgPackArray * playerArr = dict->getArray("us");
          //     // gameView->showPlayersToBeInvited(playerArr);
          // }
          else {
              return false;
            }

          return true;
        }

        handleMessage(message) {
          if (this.handleInGameMessage(message)) {
            return;
          }

          let messageType = message[0];
          let dict = message[1];
          let cmd = dict["cmd"];

          switch (messageType) {
            case MessageResponse.Extension_Response:
              {
                if (cmd == GLOBAL_MESSAGE.INGAME_JOIN_TABLE_INFOS) {
                  let b = dict["b"]; // muc cuoc

                  let gS = dict["gS"]; // game state

                  let rmT = dict["rmT"]; // remaining time

                  rmT = rmT / 1000;
                  let aid = dict["aid"];
                  let maxUser = dict["Mu"]; // gameView->_state = GameInterface::WAITING;

                  if (gS == 4 || gS == 5 || gS == 6) {
                    this.continue(rmT);
                  } else {
                    this.wait();
                  } // gameView->setGameConfig(b, gS, rmT, aid, maxUser, false);


                  let arrPlayer = dict["ps"];

                  for (let i = 0; i < arrPlayer.length; i++) {
                    let playerInfoDict = arrPlayer[i];
                    let C = false; // chu ban

                    let m = playerInfoDict["m"]; // money

                    let pS = 0; // player state

                    let sit = 0; // cho ngoi

                    let dn = playerInfoDict["dn"]; // display name

                    let uid = playerInfoDict["uid"]; // user id

                    let r = false; // ready

                    let playing = true;
                    let platformID = playerInfoDict["pid"]; // platform

                    let as = playerInfoDict["As"];
                    let avaURL = playerInfoDict["a"];
                    let customerID = 0;

                    if (playerInfoDict["id"]) {
                      customerID = playerInfoDict["id"];
                    }

                    if (dn == "BC_Banker") {
                      continue;
                    }

                    this.addPlayer(dn, uid, C, m, pS, 0, sit, r, platformID, playing, as, avaURL, customerID);
                  }

                  this.updateViewPostions();
                  let coinsValue = dict["coins"];
                  this.setValueForCoinBtns(coinsValue);
                  let tr = dict["htr"];
                  this.setBangSoiCau(tr);
                  return;
                } else if (cmd == GLOBAL_MESSAGE.INGAME_USER_LEAVE_AND_JOIN_TABLE) {
                  let t = dict["t"]; // t = 1: vao phong || t = 2: ra phong

                  if (t == 1) {
                    let playerInfoDict = dict["p"];
                    let C = false; // chu ban

                    let a = playerInfoDict["a"]; // avatar

                    let g = playerInfoDict["g"]; // gender

                    let m = playerInfoDict["m"]; // money

                    let sit = 0; // cho ngoi

                    let dn = playerInfoDict["dn"]; // display name

                    let uid = playerInfoDict["uid"]; // user id

                    let r = false; // ready

                    let platformID = playerInfoDict["pid"]; // platform

                    if (playerInfoDict["r"] != null && playerInfoDict["r"] != undefined) {
                      r = playerInfoDict["r"];
                    }

                    let as = playerInfoDict["As"];
                    let avaURL = playerInfoDict["a"];
                    let customerID = 0;

                    if (playerInfoDict["id"] != null && playerInfoDict["id"] != undefined) {
                      customerID = playerInfoDict["id"];
                    }

                    this.addPlayer(dn, uid, C, m, 0, 0, sit, r, platformID, true, as, avaURL, customerID);
                  }

                  if (t == 2) {
                    let playerInfoDict = dict["p"];
                    let uid = playerInfoDict["uid"]; // user id

                    this.removePlayer(uid);
                  }

                  this.updateViewPostions();
                  return;
                } else if (cmd == BauCua_Message.SELF_BET) {
                  // dat cuoc cua minh
                  let eid = dict["eid"];
                  let bet = dict["b"];
                  let money = dict["m"];
                  let teb = dict["teb"];
                  this.betResponse(GameConfigManager.displayName, money, bet, eid, teb);
                  BauCuaFullScreenGameView.IS_END = false;
                } else if (cmd == BauCua_Message.OTHERS_BET) {
                  // dat cuoc cua nguoi khac
                  let ets = dict["ets"];
                  let ps = dict["ps"];
                  this.otherBetResponse(ets, ps);
                } else if (cmd == BauCua_Message.START_GAME) {
                  // start game
                  let banker;

                  if (dict["B"] != null && dict["B"] != undefined) {
                    banker = dict["B"];
                  }

                  this.startGame(banker);
                } else if (cmd == BauCua_Message.FINISH_GAME) {
                  // finish game
                  let rtDict = dict["rt"];
                  let d1 = rtDict["d1"];
                  let d2 = rtDict["d2"];
                  let d3 = rtDict["d3"];
                  let rt = [];
                  rt.push(d1);
                  rt.push(d2);
                  rt.push(d3);
                  let arrPlayer = dict["ps"];
                  let entryWinners = dict["ew"];
                  this.finishThisGame(arrPlayer, entryWinners, rt);
                } else if (cmd == GLOBAL_MESSAGE.ERROR_MESSAGE) {
                  let errorMessage;

                  if (dict["mgs"] != null && dict["mgs"] != undefined) {
                    errorMessage = dict["mgs"];
                  }

                  if (errorMessage.length > 0) {
                    NotiView.getInstance().showMessage(errorMessage, this.root, GlobalVariables.BAU_CUA_FULL);
                    return;
                  }
                }
              }
          }
        }

        setBangSoiCau(tr) {
          for (let i = 0; i < tr.length; i++) {
            let rtDict = tr[i];
            let d1 = rtDict["d1"];
            let d2 = rtDict["d2"];
            let d3 = rtDict["d3"];
            let rt = [];
            rt.push(d1);
            rt.push(d2);
            rt.push(d3);

            this._danhSachSoiCau.push(rt);
          }

          this.updateBangSoiCau();
        }

        addPlayer(dn, uid, C, m, pS, rmC, sit, r, platform, playing, as, avatarURL, customerID) {
          let info = new PlayerInfo();
          info.displayName = dn;
          info.gold = m;
          info.avatarURL = avatarURL;
          info.uid = uid;

          this._playerInfo.push(info);

          this._playerInfo = this._playerInfo.sort((a, b) => a.gold < b.gold ? 1 : -1);
        }

        removePlayer(uid) {
          this._playerInfo = this._playerInfo.filter(p => p.uid != uid);
          this._playerInfo = this._playerInfo.sort((a, b) => a.gold < b.gold ? 1 : -1);
        }

        updateViewPostions() {
          var _this$userOnlinePopup3, _this$userOnlinePopup4, _this$userOnlinePopup5;

          (_this$userOnlinePopup3 = this.userOnlinePopup) === null || _this$userOnlinePopup3 === void 0 ? void 0 : _this$userOnlinePopup3.reset();
          let updatedInsightIndex = 0;

          this._playerInfo.forEach((p, i) => {
            if (p.displayName == GameConfigManager.displayName) {
              this.my_info.setUserInfo(p);
            } else if (updatedInsightIndex < this.playerViews.length) {
              this.playerViews[updatedInsightIndex].setUserInfo(p);
              updatedInsightIndex++;
            } else {
              this.userOnlinePopup.addPlayer(p);
            }
          });

          (_this$userOnlinePopup4 = this.userOnlinePopup) === null || _this$userOnlinePopup4 === void 0 ? void 0 : _this$userOnlinePopup4.refresh();
          this.lbl_userOnline.string = (_this$userOnlinePopup5 = this.userOnlinePopup) === null || _this$userOnlinePopup5 === void 0 ? void 0 : _this$userOnlinePopup5.getUserCount();
        }

        startGame(banker) {
          this.resetShakeDiskCoin();
          this.chipPooling.activeAll(false);
          Tween.stopAllByTarget(this.node);
          this.stopCountDown(true);
          this.bauCuaBetEntries.forEach(b => b.hideAll());
          let sequence = tween(this.node).sequence(tween().call(() => {
            this.playShakeAnim();
          }), tween().delay(0.3), tween().call(() => {// play shaking sound
          }), tween().delay(2.5), tween().call(() => {}), tween().delay(0.2), tween().call(() => {
            var _NotiView$getInstance;

            (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage("Xin mời đặt cược!", this.root, GlobalVariables.BAU_CUA_FULL);
            this.startCountDown(20);
          }));
          sequence.start();
          BauCuaFullScreenGameView.IS_END = true;
        }

        continue(rmt) {
          this.resetAllPlayerViewAction();
          this.chipPooling.activeAll(false);
          Tween.stopAllByTarget(this.node);
          this.stopCountDown();
          this.bauCuaBetEntries.forEach(b => b.hideAll());
          this.startCountDown(rmt);
        }

        wait() {
          this.resetAllPlayerViewAction();
          this.chipPooling.activeAll(false);
          Tween.stopAllByTarget(this.node);
          this.stopCountDown();
          this.bauCuaBetEntries.forEach(b => b.hideAll());
        }

        resetAllPlayerViewAction() {
          this._playerInfo = [];
          this.playerViews.forEach(p => {
            Tween.stopAllByTarget(p.node);
          });
          this.resetShakeDiskCoin();
        }

        resetShakeDiskCoin() {
          this.playerViews.forEach(p => {
            p.shakeDiskCoins = [];
          });
          this.my_info.shakeDiskCoins = [];
        }

        resetDicePanel(withFx = false) {
          Tween.stopAllByTarget(this.dice_result_node.node);

          if (withFx) {
            this.dice_result_node.node.active = true;
            let move = tween(this.dice_result_node.node).parallel(tween().to(0.3, {
              scale: new Vec3(0.4, 0.4, 0.4)
            }), tween().to(0.3, {
              position: this.dice_result_origin_pos
            }).call(() => {
              this.dice_result_node.node.active = false;
            }));
            move.start();
          } else {
            this.dice_result_node.node.active = false;
            this.dice_result_node.node.scale = new Vec3(0.4, 0.4, 0.4);
            this.dice_result_node.node.setPosition(this.dice_result_origin_pos);
          }
        }

        continueCountDownBy(offset) {
          this.current_count_down += offset;

          if (this.current_count_down < 0) {
            this.current_count_down = 0;
          }

          Tween.stopAllByTarget(this.lbl_countdown);
          this.startCountDown(this.current_count_down);
        }

        startCountDown(time) {
          this.current_count_down = time;
          this.resetDicePanel();
          BauCuaFullScreenGameView.IS_START = true;
          this.current_count_down = Math.round(this.current_count_down);
          this.lbl_countdown.node.parent.active = true;
          this.lbl_countdown.string = this.current_count_down;
          let sequence = tween(this.lbl_countdown).repeat(this.current_count_down, tween(this.lbl_countdown).sequence(tween().delay(1), tween().call(() => {
            this.current_count_down -= 1;
            this.lbl_countdown.string = this.current_count_down;
          })));
          sequence.start();
        }

        stopCountDown(withFx = false) {
          this.resetDicePanel(withFx);
          BauCuaFullScreenGameView.IS_START = false;
          Tween.stopAllByTarget(this.lbl_countdown);
          this.lbl_countdown.node.parent.active = false;
        }

        finishThisGame(finishArray, entryWinners, rt) {
          this.stopCountDown();
          this.showResult(rt);

          for (let i = 0; i < finishArray.length; i++) {
            let playerDict = finishArray[i];
            let name = playerDict["dn"];
            let player = this.getPlayer(name);

            if (player == null) {
              continue;
            }

            let money = playerDict["m"];
            player.money = money;
            let winning = playerDict["wm"];
            player.winning = winning;

            let infos = this._playerInfo.filter(p => p.displayName == name);

            if (infos.length > 0) {
              infos[0].gold = money;
            }
          }

          this.payChips(entryWinners, rt);
        }

        payChips(entryWinners, rt) {
          let isLoseEntry = index => {
            return rt.filter(x => x == index).length <= 0;
          };

          this.bauCuaBetEntries.forEach((b, i) => {
            b.payChipsForDealer(isLoseEntry(i));
          });

          for (let i = 0; i < entryWinners.length; i++) {
            let winnersDict = entryWinners[i];
            let eid = winnersDict["eid"];
            let winnersName = winnersDict["wns"];

            if (winnersName.length > 0) {
              for (let j = 0; j < winnersName.length; j++) {
                let name = winnersName[j];
                this.bauCuaBetEntries[eid].payChipsForPlayers(name);
              }
            }
          }
        }

        refreshUserOnlinePopup() {
          this.userOnlinePopup.refresh();
        }

        getPlayer(name) {
          if (name == GameConfigManager.displayName) {
            return this.my_info;
          }

          if (this.playerViews.length > 0) {
            let f = this.playerViews.filter(p => p.getName() == name);

            if (f.length > 0) {
              return f[0];
            }
          }

          return this.userOnlinePopup.getPlayer(name);
        }

        getPlayerByUID(uid) {
          var _this$userOnlinePopup6;

          if (uid == GameConfigManager.uid) {
            return this.my_info;
          }

          if (this.playerViews.length > 0) {
            let f = this.playerViews.filter(p => p.getUID() == uid);

            if (f.length > 0) {
              return f[0];
            }
          }

          return (_this$userOnlinePopup6 = this.userOnlinePopup) === null || _this$userOnlinePopup6 === void 0 ? void 0 : _this$userOnlinePopup6.getPlayerByUID(uid);
        }

        getVisiblePlayer(name) {
          if (name == GameConfigManager.displayName) {
            return this.my_info;
          }

          if (this.playerViews.length > 0) {
            let f = this.playerViews.filter(p => p.getName() == name);

            if (f.length > 0) {
              return f[0];
            }
          }

          return null;
        }

        getVisiblePlayerByID(uid) {
          if (uid == GameConfigManager.uid) {
            return this.my_info;
          }

          if (this.playerViews.length > 0) {
            let f = this.playerViews.filter(p => p.getUID() == uid);

            if (f.length > 0) {
              return f[0];
            }
          }

          return null;
        }

        setValueForCoinBtns(values) {
          this._coinValues = [];

          for (let i = 0; i < values.length; i++) {
            let moneyValue = values[i];

            this._coinValues.push(moneyValue);
          }

          this.chipPanel.initChipPanel(this._coinValues);
        }

        betResponse(name, money, bet, eid, teb = 0, withFx = true) {
          var _this$chipPooling;

          let player = this.getPlayer(name);

          if (!player) {
            return;
          }

          let coinPath = 0;

          if (teb > 0) {
            this.bauCuaBetEntries[eid].setTotalBet(teb);
          }

          if (player.isThisPlayer()) {
            this.bauCuaBetEntries[eid].setCurrentBet(bet);
          }

          for (let i = 0; i < this._coinValues.length; i++) {
            if (bet == this._coinValues[i]) {
              coinPath = i;
              break;
            }
          }

          let newCoin = this.chipPooling.getChip(coinPath);

          if (newCoin == null) {
            return;
          }

          (_this$chipPooling = this.chipPooling) === null || _this$chipPooling === void 0 ? void 0 : _this$chipPooling.onTop(newCoin);
          newCoin.setPosition(player.node.position);
          let desPos = this.getRandomPositionAtEntry(eid);

          if (withFx) {
            let move = tween(newCoin).to(0.7, {
              position: desPos
            }, {
              easing: 'expoOut'
            });
            move.start();
          } else {
            newCoin.setPosition(desPos);
          }

          if (player.isVisible()) {
            newCoin.name = player.getUID() + "%" + eid;
          } else {
            let f = this._playerInfo.filter(p => p.displayName == name);

            let uid = "";

            if (f.length > 0) {
              uid = f[0].uid;
            }

            newCoin.name = uid + "%" + eid;
          }

          this.bauCuaBetEntries[eid].addCoin(newCoin);
          player.shakeDiskCoins.push(newCoin);

          let infos = this._playerInfo.filter(p => p.displayName == name);

          if (infos.length > 0) {
            infos[0].gold = money;
          }

          this.userOnlinePopup.refresh();
          player.refresh();
        }

        getRandomPositionAtEntry(eid) {
          let posX = this.bauCuaBetEntries[eid].node.position.x;
          let posY = this.bauCuaBetEntries[eid].node.position.y;
          let randNum1;
          let randNum2;

          if (eid == 0 || eid == 2) {
            randNum1 = GameUtils.getRandomInt(-80, 80);
            randNum2 = GameUtils.getRandomInt(0, 35);
          } else if (eid == 1) {
            randNum1 = GameUtils.getRandomInt(-80, 80);
            randNum2 = GameUtils.getRandomInt(0, 35);
          } else {
            randNum1 = GameUtils.getRandomInt(-90, 90);
            randNum2 = GameUtils.getRandomInt(-10, 50);
          }

          posX += randNum1;
          posY += randNum2;
          return new Vec3(posX, posY, 0);
        }

        otherBetResponse(ets, ps) {
          for (let i = 0; i < ets.length; i++) {
            let entryDict = ets[i];
            let eid = entryDict["eid"];
            let teb = entryDict["v"];

            if (teb > 0) {
              this.bauCuaBetEntries[eid].setTotalBet(teb);
            }
          }

          for (let i = 0; i < ps.length; i++) {
            let playerDict = ps[i];
            let uid = playerDict["uid"];
            let dn = playerDict["dn"];
            let betsArr = playerDict["b"];

            for (let j = 0; j < betsArr.length; j++) {
              let betDict = betsArr[j];
              let eid = betDict["eid"];
              let betValue = betDict["v"];
              let money = playerDict["m"];

              if (dn != GameConfigManager.displayName) {
                this.betResponse(dn, money, betValue, eid);
              }
            }
          }
        }

        showResult(rt) {
          this.shake_anim.setAnimation(0, "open2", false);

          for (let i = 0; i < rt.length; i++) {
            this.bauCuaBetEntries[rt[i]].showGlow();
          }

          let dice1_ind = rt[0];

          if (dice1_ind < this.dice_frames.length) {
            this.dice1.spriteFrame = this.dice_frames[dice1_ind];
          }

          let dice2_ind = rt[1];

          if (dice2_ind < this.dice_frames.length) {
            this.dice2.spriteFrame = this.dice_frames[dice2_ind];
          }

          let dice3_ind = rt[2];

          if (dice3_ind < this.dice_frames.length) {
            this.dice3.spriteFrame = this.dice_frames[dice3_ind];
          }

          this.dice_result_node.node.active = true;
          Tween.stopAllByTarget(this.dice_result_node.node);
          let offset = new Vec3(-0.14 * GameConfigManager.getSizeWidth(), 30, 0);
          let move = tween(this.dice_result_node.node).parallel(tween().to(0.3, {
            scale: new Vec3(0.8, 0.8, 0.8)
          }), tween().by(1.2, {
            position: offset
          }, {
            easing: 'expoOut'
          }));
          move.start();

          this._danhSachSoiCau.push(rt);

          this.updateBangSoiCau();
        }

        updateBangSoiCau() {
          let rt = this._danhSachSoiCau[this._danhSachSoiCau.length - 1];
          let dice1_ind = rt[0];

          if (dice1_ind < this.last_dice_frames.length) {
            this.last_dice1.spriteFrame = this.last_dice_frames[dice1_ind];
          }

          let dice2_ind = rt[1];

          if (dice2_ind < this.last_dice_frames.length) {
            this.last_dice2.spriteFrame = this.last_dice_frames[dice2_ind];
          }

          let dice3_ind = rt[2];

          if (dice3_ind < this.last_dice_frames.length) {
            this.last_dice3.spriteFrame = this.last_dice_frames[dice3_ind];
          }

          this.soiCauPopup.updateBangSoiCau(this._danhSachSoiCau);
        }

        playShakeAnim() {
          var _this$shake_anim;

          let track = null;
          let currentAnimName = (_this$shake_anim = this.shake_anim) === null || _this$shake_anim === void 0 ? void 0 : _this$shake_anim.getCurrent(0).animation.name;

          if (currentAnimName == "idle") {
            var _this$shake_anim2;

            track = (_this$shake_anim2 = this.shake_anim) === null || _this$shake_anim2 === void 0 ? void 0 : _this$shake_anim2.setAnimation(0, "shake", false);
          } else {
            var _this$shake_anim3;

            track = (_this$shake_anim3 = this.shake_anim) === null || _this$shake_anim3 === void 0 ? void 0 : _this$shake_anim3.setAnimation(0, "close2", false);
          }

          if (track) {
            var _this$shake_anim4;

            (_this$shake_anim4 = this.shake_anim) === null || _this$shake_anim4 === void 0 ? void 0 : _this$shake_anim4.setCompleteListener(trackEntry => {
              let name = trackEntry.animation ? trackEntry.animation.name : '';

              if (name == "shake") {
                var _this$shake_anim5;

                (_this$shake_anim5 = this.shake_anim) === null || _this$shake_anim5 === void 0 ? void 0 : _this$shake_anim5.setAnimation(0, "idle2", true);
              } else if (name == "close2") {
                var _this$shake_anim6;

                track = (_this$shake_anim6 = this.shake_anim) === null || _this$shake_anim6 === void 0 ? void 0 : _this$shake_anim6.setAnimation(0, "shake", false);
              }
            });
          }
        }

        show(fadeTime = 0.4) {
          MiniGameNodeController.getInstance().adjustPosition(GlobalVariables.BAU_CUA_FULL);
          return super.show(fadeTime);
        }

      }, _defineProperty(_class3, "instance", null), _defineProperty(_class3, "IS_START", false), _defineProperty(_class3, "IS_END", true), _defineProperty(_class3, "KEEP_MONEY", 50000), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bauCuaBetEntries", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "shake_anim", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbl_countdown", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbl_userOnline", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "chipPooling", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "playerViews", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "my_info", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "userOnlinePopup", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "userChatPopup", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "userInvitePopup", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "chipPanel", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "btn_user", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "btn_invite", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "btn_chat", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "btn_soicau", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "btn_exit", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "dice_result_node", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "dice1", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "dice2", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "dice3", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "last_dice1", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "last_dice2", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "last_dice3", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "soiCauPopup", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "bauCuaSettingPopup", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "jackpotItemView", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "dice_frames", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "last_dice_frames", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TienLenSettingPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './NotiView.ts', './LoadingView.ts', './SettingPopup.ts', './LobbyViewController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Button, Toggle, _decorator, NotiView, LoadingView, SettingPopup, LobbyViewController, GamePlayManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Toggle = module.Toggle;
      _decorator = module._decorator;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      SettingPopup = module.SettingPopup;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3, _temp;

      cclegacy._RF.push({}, "aada59+C+ZFrr59BsMUwJZW", "TienLenSettingPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TienLenSettingPopup = exports('TienLenSettingPopup', (_dec = ccclass('TienLenSettingPopup'), _dec2 = property(Button), _dec3 = property(Toggle), _dec(_class = (_class2 = (_temp = _class3 = class TienLenSettingPopup extends SettingPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "btn_exit", _descriptor, this);

          _initializerDefineProperty(this, "toggle_autoready", _descriptor2, this);

          _defineProperty(this, "isWillExit", false);
        }

        isAutoReady() {
          var _this$toggle_autoread;

          return (_this$toggle_autoread = this.toggle_autoready) === null || _this$toggle_autoread === void 0 ? void 0 : _this$toggle_autoread.isChecked;
        }

        onLoad() {
          var _this$btn_exit, _this$toggle_autoread2;

          super.onLoad();
          (_this$btn_exit = this.btn_exit) === null || _this$btn_exit === void 0 ? void 0 : _this$btn_exit.node.on("click", () => this.exitRoom());
          (_this$toggle_autoread2 = this.toggle_autoready) === null || _this$toggle_autoread2 === void 0 ? void 0 : _this$toggle_autoread2.node.on("toggle", () => {
            localStorage.setItem(TienLenSettingPopup.SAVE_TLMN_AUTO_READY_KEY, this.isAutoReady() ? "true" : "false");
          });
          let savedauto = localStorage.getItem(TienLenSettingPopup.SAVE_TLMN_AUTO_READY_KEY);

          if (savedauto == null || savedauto == undefined) {
            this.toggle_autoready.isChecked = false;
          } else {
            this.toggle_autoready.isChecked = savedauto == "true" ? true : false;
          }
        }

        exitRoom() {
          var _LobbyViewController$;

          let ended = (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.isEnded();

          if (!ended) {
            var _NotiView$getInstance, _LobbyViewController$2;

            let fxText = "Bạn sẽ rời phòng khi kết thúc ván.";
            (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage(fxText, null, (_LobbyViewController$2 = LobbyViewController.getInstance()) === null || _LobbyViewController$2 === void 0 ? void 0 : _LobbyViewController$2.getCurrentViewGameID());
            this.isWillExit = true;
            return;
          }

          GamePlayManager.leaveRoom();
          LoadingView.getInstance().show();
        }

        reset() {
          this.isWillExit = false;
        }

      }, _defineProperty(_class3, "SAVE_TLMN_AUTO_READY_KEY", "SAVE_TLMN_AUTO_READY_KEY"), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_exit", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toggle_autoready", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GamePlatformManager.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ab5ccQq8UxGdbQiEkEzj7vz", "GamePlatformManager", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GamePlatformManager = exports('GamePlatformManager', (_dec = ccclass('GamePlatformManager'), _dec(_class = class GamePlatformManager {
        static getPlatformID() {
          return 1; // #if(CC_TARGET_PLATFORM == CC_PLATFORM_IOS || CC_TARGET_PLATFORM == CC_PLATFORM_MAC)
          //         return 1;
          // #endif
          // #if(CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)
          //         return 2;
          // #endif
          // #if(CC_TARGET_PLATFORM == CC_PLATFORM_WINRT || CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)
          //         return 3;
          // #endif
        }

        static getDeviceID() {
          return "lex-s-macbookair"; // #if(CC_TARGET_PLATFORM == CC_PLATFORM_IOS || CC_TARGET_PLATFORM == CC_PLATFORM_MAC)
          //         return 1;
          // #endif
          // #if(CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)
          //         return 2;
          // #endif
          // #if(CC_TARGET_PLATFORM == CC_PLATFORM_WINRT || CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)
          //         return 3;
          // #endif
        }

        static getOSVersion() {
          return "9.3.2"; // #if(CC_TARGET_PLATFORM == CC_PLATFORM_IOS || CC_TARGET_PLATFORM == CC_PLATFORM_MAC)
          //         return 1;
          // #endif
          // #if(CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)
          //         return 2;
          // #endif
          // #if(CC_TARGET_PLATFORM == CC_PLATFORM_WINRT || CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)
          //         return 3;
          // #endif
        }

      }) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniPoker_SlotMachineCmp.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './MiniPoker_SlotMachineColumn.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, tween, MiniPokerSlotMachineColumn_SlotMachineColumn, SlotMachineState;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      tween = module.tween;
    }, function (module) {
      MiniPokerSlotMachineColumn_SlotMachineColumn = module.default;
      SlotMachineState = module.SlotMachineState;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3, _temp;

      cclegacy._RF.push({}, "afc78U3lz1HaqL6RHiIQAq8", "MiniPoker_SlotMachineCmp", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MiniPokerSlotMachineCmp_SlotMachineCmp = exports('default', (_dec = ccclass('MiniPokerSlotMachineCmp'), _dec2 = property([MiniPokerSlotMachineColumn_SlotMachineColumn]), _dec(_class = (_class2 = (_temp = _class3 = class MiniPokerSlotMachineCmp_SlotMachineCmp extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "colums", _descriptor, this);

          _defineProperty(this, "onMachineStopped", () => {});
        }

        init() {
          this.colums.forEach(x => x.init());

          this.colums[this.colums.length - 1].onStopped = () => this.onMachineStopped();
        }

        spin() {
          this.colums.forEach(x => x.spin());
        }

        stop(cardsArr) {
          let time = [0.0, 0.6, 1.2, 2.0, 3.0];
          this.colums.forEach((column, index) => {
            let col = column;
            let card = cardsArr[index];
            let sequence = tween(col.node).sequence(tween().delay(time[index]), tween().call(() => {
              col.stop(card);
            }));
            sequence.start();
          });
        }

        stopImmediately(cardsArr) {
          this.colums.forEach((column, index) => {
            column.stop(cardsArr[index]);
          });
        }

        isStopped() {
          return this.colums.filter(x => x.getstate() == SlotMachineState.STOPPED).length >= this.colums.length;
        }

        isSpinning() {
          return this.colums.filter(x => x.getstate() == SlotMachineState.SPINNING).length >= this.colums.length;
        }

      }, _defineProperty(_class3, "SPIN_SPEED", 1000), _defineProperty(_class3, "TIME_TO_SHOW_RESULT", 0.05), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "colums", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { GameCard } from "../../../Utils/MauBinh_CardLib";
      // import MiniPoker_SlotMachineColumn, { SlotMachineState } from "./MiniPoker_SlotMachineColumn";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class MiniPoker_SlotMachineCmp extends cc.Component {
      //     @property([MiniPoker_SlotMachineColumn])
      //     private colums : MiniPoker_SlotMachineColumn[] = [];
      // 
      //     public static SPIN_SPEED = 1000;
      // 
      //     public static TIME_TO_SHOW_RESULT = 0.05;
      // 
      //     public onMachineStopped = () => {};
      // 
      //     public init() {
      //         this.colums.forEach(x => x.init());
      // 
      //         this.colums[this.colums.length - 1].onStopped = () => this.onMachineStopped();
      //     }
      // 
      //     public spin() {
      //         this.colums.forEach(x => x.spin());
      //     }
      // 
      //     public stop(cardsArr : GameCard[]){
      //         let time = [0.0,0.6,1.2,2.0,3.0];
      //         
      //         this.colums.forEach((column,index) => {
      //             let col = column;
      //             let card = cardsArr[index];
      //             let sequence = cc.sequence(cc.delayTime(time[index]),cc.callFunc(() => {
      //                 col.stop(card);
      //             }));
      //             col.node.runAction(sequence);
      //         });
      //     }
      // 
      //     public stopImmediately(cardsArr : GameCard[]){
      //         this.colums.forEach((column,index) => {
      //             column.stop(cardsArr[index]);
      //         });
      //     }
      // 
      //     public isStopped() {
      //         return this.colums.filter(x => x.getstate() == SlotMachineState.STOPPED).length >= this.colums.length;
      //     }
      // 
      //     public isSpinning() {
      //         return this.colums.filter(x => x.getstate() == SlotMachineState.SPINNING).length >= this.colums.length;
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KimCuongMessageHandler.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './MiniGameNetworkHandler.ts', './GlobalVariables.ts', './LobbyViewController.ts', './MiniPokerMessageHandler.ts', './KimCuongGameView.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, _decorator, systemEvent, MessageRequest, MiniGameNetworkHandler, GlobalVariables, LobbyViewController, MiniPoker_Message, KimCuongGameView;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      systemEvent = module.systemEvent;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MiniGameNetworkHandler = module.MiniGameNetworkHandler;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      MiniPoker_Message = module.MiniPoker_Message;
    }, function (module) {
      KimCuongGameView = module.default;
    }],
    execute: function () {
      exports('KimCuong_Message', void 0);

      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "afe40N13+tDCL+dCNYIiVYd", "KimCuongMessageHandler", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let KimCuong_Message;

      (function (KimCuong_Message) {
        KimCuong_Message[KimCuong_Message["SPIN_RESULT"] = 1302] = "SPIN_RESULT";
        KimCuong_Message[KimCuong_Message["UPDATE_JACKPOT"] = 1304] = "UPDATE_JACKPOT";
        KimCuong_Message[KimCuong_Message["SUBSCRIBE_JACKPOT"] = 1300] = "SUBSCRIBE_JACKPOT";
        KimCuong_Message[KimCuong_Message["UNSUBSCRIBE_JACKPOT"] = 1301] = "UNSUBSCRIBE_JACKPOT";
        KimCuong_Message[KimCuong_Message["AUTO_SPIN"] = 1303] = "AUTO_SPIN";
        KimCuong_Message[KimCuong_Message["CANCEL_AUTO_SPIN"] = 1305] = "CANCEL_AUTO_SPIN";
        KimCuong_Message[KimCuong_Message["SPIN_FREE"] = 1308] = "SPIN_FREE";
      })(KimCuong_Message || (KimCuong_Message = exports('KimCuong_Message', {})));

      let KimCuongMessageHandler = exports('default', (_dec = ccclass('KimCuongMessageHandler'), _dec(_class = (_temp = _class2 = class KimCuongMessageHandler {
        static subscribe(subscribe = true) {
          let cmd = MiniPoker_Message.SUBSCRIBE_JACKPOT;

          if (!subscribe) {
            cmd = MiniPoker_Message.UNSUBSCRIBE_JACKPOT;
          }

          let dict = {};
          dict["cmd"] = cmd;
          dict["gid"] = GlobalVariables.TRUNGPS;
          let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
          MiniGameNetworkHandler.send(mes);
        }

        static handleMessage(message) {
          let miniGameView = KimCuongGameView.getInstance();

          if (!miniGameView) {
            return;
          }

          let dict = message[1];
          let cmd = dict["cmd"];

          if (cmd == KimCuong_Message.SPIN_RESULT) {
            // dat minipoker
            if (dict["mgs"] != null && dict["mgs"] != undefined) {
              let mes = dict["mgs"];
              KimCuongMessageHandler.onResultError && KimCuongMessageHandler.onResultError(mes);
              return;
            }

            let rewards = dict["wls"];
            let aid = dict["aid"];
            let moneyExchange = dict["mX"];
            let symbols = dict["sbs"];
            miniGameView.receiveData(aid, moneyExchange, rewards, symbols);
          } else if (cmd == KimCuong_Message.UPDATE_JACKPOT) {
            // cap nhat hu
            let jars = dict["Js"];
            miniGameView.updateJackpot(jars);
            let amounts = [];
            amounts.push(jars[0]["J"]);
            amounts.push(jars[1]["J"]);
            amounts.push(jars[jars.length > 3 ? 3 : 2]["J"]);
            systemEvent.emit(LobbyViewController.UPDATE_JACKPOT_EVENT_KEY.replace("%gameID", GlobalVariables.TRUNGPS.toString()), amounts);
          } else if (cmd == KimCuong_Message.SUBSCRIBE_JACKPOT) {
            // theo doi hu
            let jars = dict["Js"];
            let autoSpin = dict["as"];
            let autoSpinBetting = 0;
            let autoSpinAid = 1;

            if (dict["asb"] != null && dict["abs"] != undefined) {
              autoSpinBetting = dict["asb"];
              autoSpinAid = dict["asaid"];
            }

            miniGameView.updateJackpot(jars, true);
            let amounts = [];
            amounts.push(jars[0]["J"]);
            amounts.push(jars[1]["J"]);
            amounts.push(jars[jars.length > 3 ? 3 : 2]["J"]);
            systemEvent.emit(LobbyViewController.UPDATE_JACKPOT_EVENT_KEY.replace("%gameID", GlobalVariables.TRUNGPS.toString()), amounts);
          }
        }

      }, _defineProperty(_class2, "onResultError", mes => {}), _temp)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import KimCuongGameView from "../../Games/KimCuong/KimCuongGameView";
      // import MiniPokerGameView from "../../Games/MiniPoker/MiniPokerGameView";
      // import NotiView from "../../Games/TaiXiu/NotiView";
      // import { GlobalVariables } from "../../Utils/GlobalVariables";
      // import { MessageRequest, MiniGameNetworkHandler } from "../MiniGameNetworkHandler";
      // import { MiniPoker_Message } from "./MiniPokerMessageHandler";
      // export enum KimCuong_Message {
      //     SPIN_RESULT = 1302,
      //     UPDATE_JACKPOT = 1304,
      //     SUBSCRIBE_JACKPOT = 1300,
      //     UNSUBSCRIBE_JACKPOT = 1301,
      // 
      //     AUTO_SPIN = 1303,
      //     CANCEL_AUTO_SPIN = 1305,
      //     SPIN_FREE = 1308
      // };
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class KimCuongMessageHandler {
      //     public static onResultError = (mes) => {};
      // 
      //     public static subscribe(subscribe = true) {
      //         let cmd = MiniPoker_Message.SUBSCRIBE_JACKPOT;
      //         if (!subscribe) {
      //             cmd = MiniPoker_Message.UNSUBSCRIBE_JACKPOT;
      //         }
      // 
      //         let dict = {};
      //         dict["cmd"] = cmd;
      //         dict["gid"] = GlobalVariables.TRUNGPS;
      // 
      //         let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
      //         MiniGameNetworkHandler.send(mes);
      //     }
      // 
      //     public static handleMessage(message) {
      //         let miniGameView = KimCuongGameView.getInstance();
      // 
      //         if (!miniGameView) {
      //             return;
      //         }
      // 
      //         let dict = message[1];
      //         let cmd = dict["cmd"];
      // 
      //         if (cmd == KimCuong_Message.SPIN_RESULT) { // dat minipoker
      //             if (dict["mgs"] != null && dict["mgs"] != undefined) {
      //                 let mes = dict["mgs"];
      //                 KimCuongMessageHandler.onResultError && KimCuongMessageHandler.onResultError(mes);
      //                 return;
      //             }
      // 
      //             let rewards = dict["wls"];
      //             let aid = dict["aid"];
      //             let moneyExchange = dict["mX"];
      //             let symbols = dict["sbs"];
      // 
      //             miniGameView.receiveData(aid, moneyExchange, rewards, symbols);
      //         }
      //         else if (cmd == KimCuong_Message.UPDATE_JACKPOT) { // cap nhat hu
      //             let jars = dict["Js"];
      // 
      //             miniGameView.updateJackpot(jars);
      //         }
      //         else if (cmd == KimCuong_Message.SUBSCRIBE_JACKPOT) { // theo doi hu
      //             let jars = dict["Js"];
      //             let autoSpin = dict["as"];
      //             let autoSpinBetting = 0;
      //             let autoSpinAid = 1;
      //             if (dict["asb"] != null && dict["abs"] != undefined) {
      //                 autoSpinBetting = dict["asb"];
      //                 autoSpinAid = dict["asaid"];
      //             }
      // 
      //             miniGameView.updateJackpot(jars,true);
      //         }
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameConfigManager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, _decorator, view;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "b0b67h/uDZPxoh4+i427otM", "GameConfigManager", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let GameConfigManager = exports('GameConfigManager', (_dec = ccclass('GameConfigManager'), _dec(_class = (_temp = _class2 = class GameConfigManager {
        static getSizeWidth() {
          return view.getCanvasSize().width / view.getScaleX();
        }

        static getSizeHeight() {
          return view.getCanvasSize().height / view.getScaleY();
        }

        static changePassURL() {
          return GameConfigManager.IDdomainURL + GameConfigManager.suffix + "changePass&newPassword=%newPassword%&oldPassword=%oldPassword%";
        }

        static getAvatarsURL() {
          return GameConfigManager.IDdomainURL + GameConfigManager.suffix + "getAvatars";
        }

        static changeAvatarURL() {
          return GameConfigManager.IDdomainURL + GameConfigManager.suffix + "updateAvatar&id=%id%";
        }

        static getUserTransactionURL() {
          return GameConfigManager.SAdomainURL + GameConfigManager.suffix + "fetch-user-transaction2&limit=%limit%&skip=%skip%&assetName=%assetName%";
        }

      }, _defineProperty(_class2, "DIS_URL", "https://cfg.xeui.io/distributor?command=regdis&bundle=%bundle%&appName=%appName%"), _defineProperty(_class2, "CONFIG_URL", "https://cfg.xeui.io/acs?command=get-bid&distId=%distId%&versionId=%versionId%&platformId=%platformId%&appId=%appId%"), _defineProperty(_class2, "IDdomainURL", ""), _defineProperty(_class2, "SAdomainURL", ""), _defineProperty(_class2, "MainWSURL", ""), _defineProperty(_class2, "MiniWSURL", ""), _defineProperty(_class2, "liveChatURL", ""), _defineProperty(_class2, "helpURL", ""), _defineProperty(_class2, "hotlineNumber", ""), _defineProperty(_class2, "hashSecretKey", "domaytimduocday"), _defineProperty(_class2, "brand", "789.club"), _defineProperty(_class2, "bundleID", "com.gamebai.sunclub"), _defineProperty(_class2, "appName", "789club"), _defineProperty(_class2, "gameConfigVersion", 20), _defineProperty(_class2, "disID", ""), _defineProperty(_class2, "appID", ""), _defineProperty(_class2, "signature", ""), _defineProperty(_class2, "loginInfo", ""), _defineProperty(_class2, "username", ""), _defineProperty(_class2, "password", ""), _defineProperty(_class2, "serverAccessToken", ""), _defineProperty(_class2, "serverRefreshToken", ""), _defineProperty(_class2, "displayName", ""), _defineProperty(_class2, "uid", ""), _defineProperty(_class2, "gold", 0), _defineProperty(_class2, "avaURL", ""), _defineProperty(_class2, "customerID", ""), _defineProperty(_class2, "LOGGED_USER_NAME", "LOGGED_USER_NAME"), _defineProperty(_class2, "LOGGED_PASSWORD", "LOGGED_PASSWORD"), _defineProperty(_class2, "IS_LAST_LOGIN_SUCCEED", "IS_LAST_LOGIN_SUCCEED"), _defineProperty(_class2, "IS_REJECT_ALL", false), _defineProperty(_class2, "suffix", "?command="), _temp)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DockPanel.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, Vec3, GameConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }],
    execute: function () {
      exports('DOCK_TYPE', void 0);

      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "b2460n2v2BJMJxBBj5vD3pt", "DockPanel", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let DOCK_TYPE;

      (function (DOCK_TYPE) {
        DOCK_TYPE[DOCK_TYPE["TOP"] = 0] = "TOP";
        DOCK_TYPE[DOCK_TYPE["BOTTOM"] = 1] = "BOTTOM";
      })(DOCK_TYPE || (DOCK_TYPE = exports('DOCK_TYPE', {})));

      let DockPanel = exports('DockPanel', (_dec = ccclass('DockPanel'), _dec2 = property(Number), _dec(_class = (_class2 = (_temp = class DockPanel extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "dock_type", _descriptor, this);
        }

        onLoad() {
          let pos = new Vec3(this.node.position);

          switch (this.dock_type) {
            case DOCK_TYPE.TOP:
              {
                pos.y = GameConfigManager.getSizeHeight() / 2;
                break;
              }

            case DOCK_TYPE.BOTTOM:
              {
                pos.y = -GameConfigManager.getSizeHeight() / 2;
                break;
              }
          }

          this.node.setPosition(pos);
        }

      }, _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "dock_type", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return DOCK_TYPE.TOP;
        }
      }), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FloatStringCmp.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, UITransform, _decorator, Component, Vec3, tween, Label;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      UITransform = module.UITransform;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      tween = module.tween;
      Label = module.Label;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "b3fc18yycxLB5GxRocrzwYg", "FloatStringCmp", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let FloatStringCmp = exports('FloatStringCmp', (_dec = ccclass('FloatStringCmp'), _dec2 = property(Node), _dec3 = property(UITransform), _dec4 = property(Node), _dec(_class = (_class2 = (_temp = class FloatStringCmp extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "content", _descriptor, this);

          _initializerDefineProperty(this, "clip_transform", _descriptor2, this);

          _initializerDefineProperty(this, "background", _descriptor3, this);

          _defineProperty(this, "messageToShow", [[]]);

          _defineProperty(this, "showTween", null);
        }

        showMessage(message) {
          var _this$clip_transform;

          this.background.active = true;
          this.clip_transform.node.active = true;
          this.messageToShow.push(message);
          if (this.showTween != null) return;
          let startPos = new Vec3(this.content.position);
          let endPos = new Vec3(startPos);
          startPos.x = ((_this$clip_transform = this.clip_transform) === null || _this$clip_transform === void 0 ? void 0 : _this$clip_transform.contentSize.width) / 2;
          let index = 0;
          this.showTween = tween(this.content).repeatForever(tween(this.content).sequence(tween().call(() => {
            if (index >= this.messageToShow.length) {
              this.hide();
            } else {
              let mess = this.messageToShow[index];
              let lbl_messesages = this.content.getComponentsInChildren(Label);
              mess.forEach((m, i) => {
                if (i < lbl_messesages.length) {
                  lbl_messesages[i].string = m.trim();
                }
              });
              index++;
            }
          }), tween().delay(0.1), tween().call(() => {
            var _this$clip_transform2, _this$content$getComp, _this$content;

            endPos.x = -((_this$clip_transform2 = this.clip_transform) === null || _this$clip_transform2 === void 0 ? void 0 : _this$clip_transform2.contentSize.width) / 2 - ((_this$content$getComp = this.content.getComponent(UITransform)) === null || _this$content$getComp === void 0 ? void 0 : _this$content$getComp.contentSize.width);
            (_this$content = this.content) === null || _this$content === void 0 ? void 0 : _this$content.setPosition(startPos);
          }), tween().to(this.calculateTime(), {
            position: endPos
          }), tween().delay(0.5)));
          this.showTween.start();
        }

        hide() {
          this.showTween.stop();
          this.showTween = null;
          this.background.active = false;
          this.clip_transform.node.active = false;
          this.messageToShow = [];
        }

        calculateTime() {
          var _this$clip_transform3;

          let width = (_this$clip_transform3 = this.clip_transform) === null || _this$clip_transform3 === void 0 ? void 0 : _this$clip_transform3.contentSize.width;
          let velocity = 160;
          return (this.content.getComponent(UITransform).contentSize.width + width) / velocity;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "clip_transform", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "background", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KimCuongBetRankItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, Color, StringUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      Color = module.Color;
    }, function (module) {
      StringUtils = module.StringUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "b8e2eyQO4dMOZg+w3O0jIbr", "KimCuongBetRankItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let KimCuongBetRankItemView = exports('default', (_dec = ccclass('KimCuongBetRankItemView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec(_class = (_class2 = (_temp = class KimCuongBetRankItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txt_time", _descriptor, this);

          _initializerDefineProperty(this, "txt_username", _descriptor2, this);

          _initializerDefineProperty(this, "txt_bet", _descriptor3, this);

          _initializerDefineProperty(this, "txt_win_amount", _descriptor4, this);

          _initializerDefineProperty(this, "txt_type", _descriptor5, this);
        }

        show(time, username, bet, winamount, type) {
          this.txt_time.string = time.toString();
          this.txt_username.string = username.toString();
          this.txt_bet.string = StringUtils.formatNumber(bet);
          this.txt_win_amount.color = Color.YELLOW;
          this.txt_win_amount.string = StringUtils.formatNumber(winamount);
          this.txt_type.string = type.toString();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txt_time", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txt_username", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txt_bet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txt_win_amount", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "txt_type", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class)); //  * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
      //  */
      // // // Learn TypeScript:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // // Learn Attribute:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // // Learn life-cycle callbacks:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // // 
      // // import { StringUtils } from "../../Utils/StringUtils";
      // // 
      // // const {ccclass, property} = cc._decorator;
      // // 
      // // @ccclass
      // // export default class KimCuongBetRankItemView extends cc.Component {
      // //     @property(cc.Label)
      // //     private txt_time : cc.Label = null;
      // // 
      // //     @property(cc.Label)
      // //     private txt_username: cc.Label = null;
      // // 
      // //     @property(cc.Label)
      // //     private txt_bet : cc.Label = null;
      // // 
      // //     @property(cc.Label)
      // //     private txt_win_amount : cc.Label = null;
      // // 
      // //     @property(cc.Label)
      // //     private txt_type : cc.Label = null;
      // // 
      // //     public show(time,username,bet,winamount,type){
      // //         this.txt_time.string = time.toString();
      // //         this.txt_username.string = username.toString();
      // //         this.txt_bet.string = StringUtils.formatNumber(bet);
      // //         this.txt_win_amount.string = StringUtils.formatNumber(winamount);
      // //         this.txt_type.string = type.toString();
      // //         
      // //     }
      // // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UserInvitePopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './NotiView.ts', './LoadingView.ts', './SettingPopup.ts', './InvitationPlayerView.ts', './LobbyViewController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, Button, _decorator, instantiate, NotiView, LoadingView, SettingPopup, InvitationPlayerView, LobbyViewController, GamePlayManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Button = module.Button;
      _decorator = module._decorator;
      instantiate = module.instantiate;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      SettingPopup = module.SettingPopup;
    }, function (module) {
      InvitationPlayerView = module.InvitationPlayerView;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "b93c5AiuTpH7p5K4EcVAzBV", "UserInvitePopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let UserInvitePopup = exports('UserInvitePopup', (_dec = ccclass('UserInvitePopup'), _dec2 = property(Node), _dec3 = property(Button), _dec(_class = (_class2 = (_temp = class UserInvitePopup extends SettingPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "template", _descriptor, this);

          _defineProperty(this, "pooled_player_views", []);

          _initializerDefineProperty(this, "btn_invite", _descriptor2, this);
        }

        onLoad() {
          var _this$btn_invite;

          super.onLoad();
          (_this$btn_invite = this.btn_invite) === null || _this$btn_invite === void 0 ? void 0 : _this$btn_invite.node.on('click', () => {
            let names = this.pooled_player_views.filter(pv => pv.isSelected()).map(pv => pv.getName());

            if (names.length > 0) {
              GamePlayManager.sendInvitationsTo(names);
            }

            this.close();
          });
        }

        fetchUserInvitations() {
          LoadingView.getInstance().show();
          GamePlayManager.getUserInLobby();
        }

        getPooledView() {
          let views = this.pooled_player_views.filter(pv => !pv.node.active);

          if (views.length > 0) {
            return views[0];
          }

          let view = instantiate(this.template);
          view.parent = this.template.parent;
          let viewCmp = view.getComponent(InvitationPlayerView);
          this.pooled_player_views.push(viewCmp);
          return viewCmp;
        }

        showPlayersToBeInvited(players) {
          var _LoadingView$getInsta;

          if (players.length == 0) {
            var _LobbyViewController$, _LobbyViewController$2, _LobbyViewController$3;

            NotiView.getInstance().showMessage("Không có người ở sảnh chờ!", (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : (_LobbyViewController$2 = _LobbyViewController$.getView()) === null || _LobbyViewController$2 === void 0 ? void 0 : _LobbyViewController$2.node, (_LobbyViewController$3 = LobbyViewController.getInstance()) === null || _LobbyViewController$3 === void 0 ? void 0 : _LobbyViewController$3.getGameID());
            return;
          }

          players.forEach((p, i) => {
            let view = this.getPooledView();
            view.node.active = true;
            view === null || view === void 0 ? void 0 : view.show(p["uid"], p["dn"], p["m"]);
          });
          (_LoadingView$getInsta = LoadingView.getInstance()) === null || _LoadingView$getInsta === void 0 ? void 0 : _LoadingView$getInsta.hide();
          this.show();
        }

        close() {
          super.close();
          this.pooled_player_views.forEach((p, i) => {
            p.node.active = false;
          });
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "template", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_invite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameUtils.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bc747wBd6VFlYlC0VM3Uhk3", "GameUtils", undefined);

      const {
        ccclass,
        property
      } = _decorator; // import MobileDetect = require("mobile-detect");

      let GameUtils = exports('default', (_dec = ccclass('GameUtils'), _dec(_class = class GameUtils {
        static getRandomInt(min, max) {
          min = Math.ceil(min);
          max = Math.floor(max);
          return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
        }

        static isTablet() {
          return false; //if (cc.sys.isNative) {
          //let dpi = jsb.device.getDPI();
          //let viewSize = cc.view.getFrameSize();
          //let xInches = viewSize.width / dpi;
          //let yInches = viewSize.height / dpi;
          //let diagonalInches = Math.sqrt(Math.pow(xInches, 2) + Math.pow(yInches, 2));
          //diagonalInches = Math.round(diagonalInches * 100) / 100;
          //return (diagonalInches >= 7);
          //} else {
          //let device_type = navigator.userAgent;
          //let md = new MobileDetect(device_type);
          //let os = md.os();
          //let model = "";
          //if (os == "iOS") {
          //os = md.os() + md.version("iPhone");
          //model = md.mobile();
          //} else if (os == "AndroidOS") {
          //os = md.os() + md.version("Android");
          //}
          //return !!md.tablet();
          //}
        }

      }) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import MobileDetect = require("mobile-detect");
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class GameUtils {
      //   public static getRandomInt(min, max) {
      //     min = Math.ceil(min);
      //     max = Math.floor(max);
      //     return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
      //   }
      // 
      //   public static isTablet() {
      //     if (cc.sys.isNative) {
      //       let dpi = jsb.device.getDPI();
      //       let viewSize = cc.view.getFrameSize();
      //       let xInches = viewSize.width / dpi;
      //       let yInches = viewSize.height / dpi;
      //       let diagonalInches = Math.sqrt(Math.pow(xInches, 2) + Math.pow(yInches, 2));
      //       diagonalInches = Math.round(diagonalInches * 100) / 100;
      //       return (diagonalInches >= 7);
      //     } else {
      //       let device_type = navigator.userAgent;
      //       let md = new MobileDetect(device_type);
      //       let os = md.os();
      //       let model = "";
      //       if (os == "iOS") {
      //         os = md.os() + md.version("iPhone");
      //         model = md.mobile();
      //       } else if (os == "AndroidOS") {
      //         os = md.os() + md.version("Android");
      //       }
      // 
      //       return !!md.tablet();
      //     }
      //   }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LineSpriteComponent.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "be4c4rrLphD4bJFNbuMUsMA", "LineSpriteComponent", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LineSpriteComponent = exports('default', (_dec = ccclass('LineSpriteComponent'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = (_temp = class LineSpriteComponent extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "sample", _descriptor, this);

          _initializerDefineProperty(this, "line_root", _descriptor2, this);

          _initializerDefineProperty(this, "thumb_root", _descriptor3, this);

          _defineProperty(this, "root_parent", null);
        }

        draw(points, width, color, root_parent = null, isClear = true) {//this.root_parent = root_parent;
          //if(isClear) this.clear();
          //points.forEach((point, index) => {
          //if (index < points.length - 1) {
          //let startPos = point;
          //let nextPos = points[index + 1];
          //let dotStart = cc.instantiate(this.sample);
          //dotStart.position = startPos;
          //dotStart.parent = this.thumb_root;
          //let dotNext = cc.instantiate(this.sample);
          //dotNext.position = nextPos;
          //dotNext.parent = this.thumb_root;
          //let line = cc.instantiate(this.sample);
          //line.position = new cc.Vec2(startPos.x + ((nextPos.x - startPos.x) / 2),startPos.y + ((nextPos.y - startPos.y) / 2));
          //line.parent = this.line_root;
          //let direction = new cc.Vec2(nextPos.x - startPos.x,nextPos.y - startPos.y);
          //let angle = direction.normalize().angle(new cc.Vec2(1,0)) * (180 / Math.PI);
          //line.rotation = angle * (nextPos.y > startPos.y ? -1 : 1);
          //line.setContentSize(direction.mag(),width);
          //dotStart.active = true;
          //dotNext.active = true;
          //line.active = true;
          //}
          //});
        }

        clear() {//this.line_root.getComponentsInChildren(cc.Sprite).forEach(x => x.node.destroy());
          //this.thumb_root.getComponentsInChildren(cc.Sprite).forEach(x => x.node.destroy());
        }

        update(dt) {//if(this.root_parent) {
          //this.node.opacity = this.root_parent.opacity < 255 ? 0 : this.root_parent.opacity;
          //}
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sample", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "line_root", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "thumb_root", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class LineSpriteComponent extends cc.Component {
      //     @property(cc.Node)
      //     private sample: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private line_root: cc.Node = null;
      // 
      //     @property(cc.Node)
      //     private thumb_root: cc.Node = null;
      // 
      //     private root_parent : cc.Node = null;
      // 
      //     draw (points : cc.Vec2[],width,color,root_parent = null,isClear = true) {
      //         this.root_parent = root_parent;
      //         if(isClear) this.clear();
      // 
      //         points.forEach((point, index) => {
      //             if (index < points.length - 1) {
      //                 let startPos = point;
      //                 let nextPos = points[index + 1];
      //                 let dotStart = cc.instantiate(this.sample);
      //                 dotStart.position = startPos;
      //                 dotStart.parent = this.thumb_root;
      // 
      //                 let dotNext = cc.instantiate(this.sample);
      //                 dotNext.position = nextPos;
      //                 dotNext.parent = this.thumb_root;
      // 
      //                 let line = cc.instantiate(this.sample);
      //                 line.position = new cc.Vec2(startPos.x + ((nextPos.x - startPos.x) / 2),startPos.y + ((nextPos.y - startPos.y) / 2));
      //                 line.parent = this.line_root;
      // 
      //                 let direction = new cc.Vec2(nextPos.x - startPos.x,nextPos.y - startPos.y);
      //                 let angle = direction.normalize().angle(new cc.Vec2(1,0)) * (180 / Math.PI);
      //                 line.rotation = angle * (nextPos.y > startPos.y ? -1 : 1);
      //                 line.setContentSize(direction.mag(),width);
      // 
      //                 dotStart.active = true;
      //                 dotNext.active = true;
      //                 line.active = true;
      //             }
      //         });
      //     }
      // 
      //     clear(){
      //         this.line_root.getComponentsInChildren(cc.Sprite).forEach(x => x.node.destroy());
      //         this.thumb_root.getComponentsInChildren(cc.Sprite).forEach(x => x.node.destroy());
      //     }
      // 
      //     update(dt){
      //         if(this.root_parent) {
      //             this.node.opacity = this.root_parent.opacity < 255 ? 0 : this.root_parent.opacity;
      //         }
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Component, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c1acelIaGZM/4fBJCV0jz1R", "test", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let Test = exports('Test', (_dec = ccclass('Test'), _dec(_class = class Test extends Component {
        onLoad() {
          console.log("load from asset bundle");
        }

      }) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniPokerMessageHandler.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './MiniGameNetworkHandler.ts', './GlobalVariables.ts', './LobbyViewController.ts', './MiniPokerGameView.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, _decorator, systemEvent, MessageRequest, MiniGameNetworkHandler, GlobalVariables, LobbyViewController, MiniPokerGameView;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      systemEvent = module.systemEvent;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MiniGameNetworkHandler = module.MiniGameNetworkHandler;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      MiniPokerGameView = module.default;
    }],
    execute: function () {
      exports('MiniPoker_Message', void 0);

      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "c2407D428pC6KFaPumY7Xxk", "MiniPokerMessageHandler", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MiniPoker_Message;

      (function (MiniPoker_Message) {
        MiniPoker_Message[MiniPoker_Message["SPIN_RESULT"] = 1302] = "SPIN_RESULT";
        MiniPoker_Message[MiniPoker_Message["UPDATE_JACKPOT"] = 1304] = "UPDATE_JACKPOT";
        MiniPoker_Message[MiniPoker_Message["SUBSCRIBE_JACKPOT"] = 1300] = "SUBSCRIBE_JACKPOT";
        MiniPoker_Message[MiniPoker_Message["UNSUBSCRIBE_JACKPOT"] = 1301] = "UNSUBSCRIBE_JACKPOT";
        MiniPoker_Message[MiniPoker_Message["AUTO_SPIN"] = 1303] = "AUTO_SPIN";
        MiniPoker_Message[MiniPoker_Message["CANCEL_AUTO_SPIN"] = 1305] = "CANCEL_AUTO_SPIN";
        MiniPoker_Message[MiniPoker_Message["SPIN_FREE"] = 1308] = "SPIN_FREE";
      })(MiniPoker_Message || (MiniPoker_Message = exports('MiniPoker_Message', {})));

      let MiniPokerMessageHandler = exports('default', (_dec = ccclass('MiniPokerMessageHandler'), _dec(_class = (_temp = _class2 = class MiniPokerMessageHandler {
        static subscribe(subscribe = true) {
          let cmd = MiniPoker_Message.SUBSCRIBE_JACKPOT;

          if (!subscribe) {
            cmd = MiniPoker_Message.UNSUBSCRIBE_JACKPOT;
          }

          let dict = {};
          dict["cmd"] = cmd;
          dict["gid"] = GlobalVariables.MINIPOKER;
          let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
          MiniGameNetworkHandler.send(mes);
        }

        static handleMessage(message) {
          let miniGameView = MiniPokerGameView.getInstance();

          if (!miniGameView) {
            return;
          }

          let dict = message[1];
          let cmd = dict["cmd"];

          if (cmd == MiniPoker_Message.SPIN_RESULT) {
            // dat minipoker
            if (dict["mgs"] != null && dict["mgs"] != undefined) {
              let mes = dict["mgs"];
              MiniPokerMessageHandler.onResultError && MiniPokerMessageHandler.onResultError(mes);
              return;
            }

            let cardsArr = dict["sbs"];
            let aid = dict["aid"];
            let moneyExchange = dict["mX"];
            let wonJackpot = dict["iJ"];
            miniGameView.receiveData(aid, moneyExchange, cardsArr, wonJackpot);
          } else if (cmd == MiniPoker_Message.UPDATE_JACKPOT) {
            // cap nhat hu
            let jars = dict["Js"];
            miniGameView.updateJackpot(jars);
            let amounts = [];
            amounts.push(jars[0]["J"]);
            amounts.push(jars[1]["J"]);
            amounts.push(jars[jars.length > 3 ? 3 : 2]["J"]);
            systemEvent.emit(LobbyViewController.UPDATE_JACKPOT_EVENT_KEY.replace("%gameID", GlobalVariables.MINIPOKER.toString()), amounts);
          } else if (cmd == MiniPoker_Message.SUBSCRIBE_JACKPOT) {
            // theo doi hu
            let jars = dict["Js"];
            let autoSpin = dict["as"];
            let autoSpinBetting = 0;
            let autoSpinAid = 1;

            if (dict["asb"] != null && dict["abs"] != undefined) {
              autoSpinBetting = dict["asb"];
              autoSpinAid = dict["asaid"];
            }

            miniGameView.updateJackpot(jars, true);
            let amounts = [];
            amounts.push(jars[0]["J"]);
            amounts.push(jars[1]["J"]);
            amounts.push(jars[jars.length > 3 ? 3 : 2]["J"]);
            systemEvent.emit(LobbyViewController.UPDATE_JACKPOT_EVENT_KEY.replace("%gameID", GlobalVariables.MINIPOKER.toString()), amounts);
          }
        }

      }, _defineProperty(_class2, "onResultError", mes => {}), _temp)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import MiniPokerGameView from "../../Games/MiniPoker/MiniPokerGameView";
      // import NotiView from "../../Games/TaiXiu/NotiView";
      // import { GlobalVariables } from "../../Utils/GlobalVariables";
      // import { MessageRequest, MiniGameNetworkHandler } from "../MiniGameNetworkHandler";
      // export enum MiniPoker_Message {
      //     SPIN_RESULT = 1302,
      //     UPDATE_JACKPOT = 1304,
      //     SUBSCRIBE_JACKPOT = 1300,
      //     UNSUBSCRIBE_JACKPOT = 1301,
      // 
      //     AUTO_SPIN = 1303,
      //     CANCEL_AUTO_SPIN = 1305,
      //     SPIN_FREE = 1308
      // };
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class MiniPokerMessageHandler {
      //     public static onResultError = (mes) => {};
      // 
      //     public static subscribe(subscribe = true) {
      //         let cmd = MiniPoker_Message.SUBSCRIBE_JACKPOT;
      //         if (!subscribe) {
      //             cmd = MiniPoker_Message.UNSUBSCRIBE_JACKPOT;
      //         }
      // 
      //         let dict = {};
      //         dict["cmd"] = cmd;
      //         dict["gid"] = GlobalVariables.MINIPOKER;
      // 
      //         let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "slotMachinePlugin", dict];
      //         MiniGameNetworkHandler.send(mes);
      //     }
      // 
      //     public static handleMessage(message) {
      //         let miniGameView = MiniPokerGameView.getInstance();
      // 
      //         if (!miniGameView) {
      //             return;
      //         }
      // 
      //         let dict = message[1];
      //         let cmd = dict["cmd"];
      // 
      //         if (cmd == MiniPoker_Message.SPIN_RESULT) { // dat minipoker
      //             if (dict["mgs"] != null && dict["mgs"] != undefined) {
      //                 let mes = dict["mgs"];
      //                 MiniPokerMessageHandler.onResultError && MiniPokerMessageHandler.onResultError(mes);
      //                 return;
      //             }
      // 
      //             let cardsArr = dict["sbs"];
      //             let aid = dict["aid"];
      //             let moneyExchange = dict["mX"];
      //             let wonJackpot = dict["iJ"];
      // 
      //             miniGameView.receiveData(aid, moneyExchange, cardsArr, wonJackpot);
      //         }
      //         else if (cmd == MiniPoker_Message.UPDATE_JACKPOT) { // cap nhat hu
      //             let jars = dict["Js"];
      // 
      //             miniGameView.updateJackpot(jars);
      //         }
      //         else if (cmd == MiniPoker_Message.SUBSCRIBE_JACKPOT) { // theo doi hu
      //             let jars = dict["Js"];
      //             let autoSpin = dict["as"];
      //             let autoSpinBetting = 0;
      //             let autoSpinAid = 1;
      //             if (dict["asb"] != null && dict["abs"] != undefined) {
      //                 autoSpinBetting = dict["asb"];
      //                 autoSpinAid = dict["asaid"];
      //             }
      // 
      //             miniGameView.updateJackpot(jars,true);
      //         }
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UserOnlinePopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './SettingPopup.ts', './PlayerView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Button, Label, _decorator, SettingPopup, PlayerView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      _decorator = module._decorator;
    }, function (module) {
      SettingPopup = module.SettingPopup;
    }, function (module) {
      PlayerView = module.PlayerView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "c2a16zJokdKrrmRhNCm0lwm", "UserOnlinePopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let UserOnlinePopup = exports('UserOnlinePopup', (_dec = ccclass('UserOnlinePopup'), _dec2 = property(PlayerView), _dec3 = property([PlayerView]), _dec4 = property(Button), _dec5 = property(Button), _dec6 = property(Label), _dec(_class = (_class2 = (_temp = class UserOnlinePopup extends SettingPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "hiddenPlayerView", _descriptor, this);

          _initializerDefineProperty(this, "player_views", _descriptor2, this);

          _initializerDefineProperty(this, "btn_prev", _descriptor3, this);

          _initializerDefineProperty(this, "btn_next", _descriptor4, this);

          _initializerDefineProperty(this, "lbl_current_page", _descriptor5, this);

          _defineProperty(this, "userOnlines", []);

          _defineProperty(this, "current_page", 0);
        }

        getUserCount() {
          return this.userOnlines.length;
        }

        onLoad() {
          var _this$btn_prev, _this$btn_next;

          super.onLoad();
          (_this$btn_prev = this.btn_prev) === null || _this$btn_prev === void 0 ? void 0 : _this$btn_prev.node.on("click", () => {
            if (this.current_page > 0) {
              this.current_page--;
            }

            this.refresh();
          });
          (_this$btn_next = this.btn_next) === null || _this$btn_next === void 0 ? void 0 : _this$btn_next.node.on("click", () => {
            let maxPage = Math.floor(this.userOnlines.length / 6);

            if (this.current_page < maxPage) {
              this.current_page++;
            }

            this.refresh();
          });
        }

        refresh() {
          this.lbl_current_page.string = this.current_page + 1;
          let start = this.current_page * 6;
          this.player_views.forEach((p, i) => {
            let index = start + i;

            if (index >= this.userOnlines.length) {
              p.node.active = false;
            } else {
              p.node.active = true;
              let info = this.userOnlines[index];
              p.setUserInfo(info);
            }
          });
        }

        reset() {
          this.userOnlines = [];
        }

        addPlayer(info) {
          this.userOnlines.push(info);
        }

        getPlayer(name) {
          let info = this.userOnlines.filter(u => u.displayName == name);

          if (info.length > 0) {
            return this.hiddenPlayerView;
          }

          return null;
        }

        getPlayerByUID(uid) {
          let info = this.userOnlines.filter(u => u.uid == uid);

          if (info.length > 0) {
            return this.hiddenPlayerView;
          }

          return null;
        }

        getPlayerInfoByID(uid) {
          let infos = this.userOnlines.filter(u => u.uid == uid);

          if (infos.length > 0) {
            return infos[0];
          }

          return null;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "hiddenPlayerView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "player_views", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_prev", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_next", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbl_current_page", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuSessionHistoryResultSumItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, SpriteFrame, Sprite, Label, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "c566aBzFPxKsqRPhKyhDMXT", "TaiXiuSessionHistoryResultSumItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TaiXiuSessionHistoryResultSumItemView = exports('default', (_dec = ccclass('TaiXiuSessionHistoryResultSumItemView'), _dec2 = property([SpriteFrame]), _dec3 = property(Sprite), _dec4 = property(Label), _dec(_class = (_class2 = (_temp = class TaiXiuSessionHistoryResultSumItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "sprFrame_ico_result", _descriptor, this);

          _initializerDefineProperty(this, "spr_result", _descriptor2, this);

          _initializerDefineProperty(this, "lbl_sum_result", _descriptor3, this);
        }

        show(sum) {//this.lbl_sum_result.string = sum;
          //if(sum > 10) {
          //this.spr_result.spriteFrame = this.sprFrame_ico_result[0];
          //this.lbl_sum_result.node.color = cc.Color.WHITE;
          //}
          //else {
          //this.spr_result.spriteFrame = this.sprFrame_ico_result[1];
          //this.lbl_sum_result.node.color = cc.Color.BLACK;
          //}
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_ico_result", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spr_result", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbl_sum_result", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { StringUtils } from "../../Utils/StringUtils";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuSessionHistoryResultSumItemView extends cc.Component {
      //     @property([cc.SpriteFrame])
      //     private sprFrame_ico_result : cc.SpriteFrame[] = [];
      // 
      //     @property(cc.Sprite)
      //     private spr_result : cc.Sprite = null;
      // 
      //     @property(cc.Label)
      //     private lbl_sum_result : cc.Label = null;
      // 
      //     public show(sum){
      //         this.lbl_sum_result.string = sum;
      //         if(sum > 10) {
      //             this.spr_result.spriteFrame = this.sprFrame_ico_result[0];
      //             this.lbl_sum_result.node.color = cc.Color.WHITE;
      //         }
      //         else {
      //             this.spr_result.spriteFrame = this.sprFrame_ico_result[1];
      //             this.lbl_sum_result.node.color = cc.Color.BLACK;
      //         }
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuBetRankItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Sprite, SpriteFrame, _decorator, Component, StringUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      StringUtils = module.StringUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "c6456o1l+dFhJ9f8N1kpnWK", "TaiXiuBetRankItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TaiXiuBetRankItemView = exports('default', (_dec = ccclass('TaiXiuBetRankItemView'), _dec2 = property(Label), _dec3 = property(Sprite), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property([SpriteFrame]), _dec(_class = (_class2 = (_temp = class TaiXiuBetRankItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txt_rank", _descriptor, this);

          _initializerDefineProperty(this, "spr_rank", _descriptor2, this);

          _initializerDefineProperty(this, "txt_username", _descriptor3, this);

          _initializerDefineProperty(this, "txt_win_amount", _descriptor4, this);

          _initializerDefineProperty(this, "sprFrame_rank", _descriptor5, this);
        }

        show(rank, username, winamount) {
          if (rank > 3) {
            this.txt_rank.enabled = true;
            this.spr_rank.enabled = false;
            this.txt_rank.string = rank.toString();
          } else {
            this.txt_rank.enabled = false;
            this.spr_rank.enabled = true;
            this.spr_rank.spriteFrame = this.sprFrame_rank[rank - 1];
          }

          this.txt_username.string = username.toString();
          this.txt_win_amount.string = StringUtils.formatNumber(winamount);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txt_rank", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spr_rank", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txt_username", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txt_win_amount", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_rank", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { StringUtils } from "../../Utils/StringUtils";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuBetRankItemView extends cc.Component {
      //     @property(cc.Label)
      //     private txt_rank : cc.Label = null;
      // 
      //     @property(cc.Sprite)
      //     private spr_rank : cc.Sprite = null;
      // 
      //     @property(cc.Label)
      //     private txt_username: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_win_amount : cc.Label = null;
      // 
      //     @property([cc.SpriteFrame])
      //     private sprFrame_rank : cc.SpriteFrame[] = [];
      // 
      //     public show(rank,username,winamount){
      //         if(rank > 3){
      //             this.txt_rank.enabled = true;
      //             this.spr_rank.enabled = false;
      //             this.txt_rank.string = rank.toString();
      //         }else{
      //             this.txt_rank.enabled = false;
      //             this.spr_rank.enabled = true;
      //             this.spr_rank.spriteFrame = this.sprFrame_rank[rank - 1];
      //         }
      // 
      //         this.txt_username.string = username.toString();
      //         this.txt_win_amount.string = StringUtils.formatNumber(winamount);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseFullScreenGameView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './LoadingView.ts', './LobbyViewController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, _decorator, Component, systemEvent, UIOpacity, tween, LoadingView, LobbyViewController, GamePlayManager, NETWORK_STATE;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      systemEvent = module.systemEvent;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
      NETWORK_STATE = module.NETWORK_STATE;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "c7706S/y9xOL61iBcEJBIwq", "BaseFullScreenGameView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let BaseFullScreenGameView = exports('BaseFullScreenGameView', (_dec = ccclass('BaseFullScreenGameView'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = class BaseFullScreenGameView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "black_screen", _descriptor, this);

          _initializerDefineProperty(this, "root", _descriptor2, this);

          _defineProperty(this, "gameID", -2);

          _defineProperty(this, "previousGameView", null);

          _defineProperty(this, "refreshMoneyCb", []);
        }

        onLoad() {
          systemEvent.on(LobbyViewController.REFRESH_MONEY, money => {
            this.handleRefreshMoney(money);
          });
        }

        getGameID() {
          return this.gameID;
        }

        getChipPooling() {
          return null;
        }

        getVisiblePlayerByID(uid) {}

        getPlayerByUID(uid) {}

        getPreviousGameView(prevView) {
          return this.previousGameView;
        }

        setPreviousGameView(prevView) {
          this.previousGameView = prevView;
        }

        sendBet(eid, bet) {}

        leaveRoom() {
          var _LoadingView$getInsta, _LobbyViewController$;

          (_LoadingView$getInsta = LoadingView.getInstance()) === null || _LoadingView$getInsta === void 0 ? void 0 : _LoadingView$getInsta.hide();
          (_LobbyViewController$ = LobbyViewController.getInstance()) === null || _LobbyViewController$ === void 0 ? void 0 : _LobbyViewController$.backFromGame(this.gameID);
          this.resetUI();
        }

        resetUI() {}

        initUI() {}

        handleRefreshMoney(money) {}

        handleBackGameFromInterupt(timeInterupted) {}

        handleMessage(message) {}

        handleLeaveRoomResponse(message) {
          this.leaveRoom();
        }

        forceLeaveRoom() {
          if (GamePlayManager.STATE == NETWORK_STATE.UNLOGGED_IN) {
            this.leaveRoom();
            return;
          }

          LoadingView.getInstance().show();
          GamePlayManager.leaveRoom();
        }

        show(fadeTime = 0.4) {
          var _this$black_screen;

          this.initUI();
          let fadeUI = (_this$black_screen = this.black_screen) === null || _this$black_screen === void 0 ? void 0 : _this$black_screen.getComponent(UIOpacity);
          let show = tween(fadeUI).sequence(tween().call(() => {
            fadeUI.opacity = 255;
            fadeUI.node.active = true;
            this.root.active = true;
          }), tween().to(fadeTime, {
            opacity: 1
          }), tween().call(() => {
            fadeUI.node.active = false;
          }));
          return show;
        }

        hide(fadeTime = 0.4) {
          var _this$black_screen2;

          let fadeUI = (_this$black_screen2 = this.black_screen) === null || _this$black_screen2 === void 0 ? void 0 : _this$black_screen2.getComponent(UIOpacity);
          let hide = tween(fadeUI).sequence(tween().call(() => {
            fadeUI.opacity = 1;
            fadeUI.node.active = true;
          }), tween().to(fadeTime, {
            opacity: 255
          }), tween().call(() => {
            this.root.active = false;
            fadeUI.node.active = false;
          }));
          return hide;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "black_screen", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChipPanel.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './ChipItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, Button, _decorator, Component, Tween, tween, Vec3, ChipItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
      Tween = module.Tween;
      tween = module.tween;
      Vec3 = module.Vec3;
    }, function (module) {
      ChipItem = module.ChipItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "c7bfe+/sN1Mo7P8Hg1rfeDT", "ChipPanel", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ChipPanel = exports('ChipPanel', (_dec = ccclass('ChipPanel'), _dec2 = property([ChipItem]), _dec3 = property(Node), _dec4 = property(Button), _dec5 = property(Button), _dec(_class = (_class2 = (_temp = class ChipPanel extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "chip_items", _descriptor, this);

          _initializerDefineProperty(this, "content", _descriptor2, this);

          _initializerDefineProperty(this, "btn_prev", _descriptor3, this);

          _initializerDefineProperty(this, "btn_next", _descriptor4, this);

          _defineProperty(this, "maxIndex", 3);

          _defineProperty(this, "minIndex", 0);

          _defineProperty(this, "currentIndex", 2);

          _defineProperty(this, "values", []);

          _defineProperty(this, "isMoving", false);
        }

        onLoad() {
          let offsetX = Math.abs(this.chip_items[1].node.position.x - this.chip_items[0].node.position.x);
          this.btn_prev.node.on("click", () => {
            if (this.values.length < 0 || this.isMoving) return;

            if (this.currentIndex > 0) {
              this.currentIndex--;

              if (this.currentIndex < this.minIndex) {
                this.moveContent(offsetX);
                this.minIndex--;
                this.maxIndex--;
              }
            }

            this.selectedChip();
          });
          this.btn_next.node.on("click", () => {
            if (this.values.length < 0 || this.isMoving) return;

            if (this.currentIndex < this.values.length - 1) {
              this.currentIndex++;

              if (this.currentIndex > this.maxIndex) {
                this.moveContent(-offsetX);
                this.minIndex++;
                this.maxIndex++;
              }
            }

            this.selectedChip();
          });
        }

        selectedChip() {
          if (this.currentIndex >= this.chip_items.length) return;
          this.chip_items.forEach((c, i) => {
            if (this.currentIndex == i) {
              c.selected();
            } else {
              c.selected(false);
            }
          });
        }

        moveContent(offsetX) {
          this.isMoving = true;
          Tween.stopAllByTarget(this.content);
          let move = tween(this.content).by(0.1, {
            position: new Vec3(offsetX, 0, 0)
          }).call(() => {
            this.isMoving = false;
          });
          move.start();
        }

        getSelectedBetValue() {
          if (this.values.length <= 0 || this.currentIndex >= this.values.length) return 0;
          return this.values[this.currentIndex];
        }

        initChipPanel(values) {
          this.values = values;
          this.chip_items.forEach((c, i) => {
            let index = i;

            if (i < values.length) {
              c.show(values[i], () => {
                this.currentIndex = index;
                this.selectedChip();
              });
            } else {
              c.hide();
            }
          });
          this.selectedChip();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "chip_items", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_prev", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_next", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoiCauPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './SettingPopup.ts', './SoiCauItemPopup.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Label, Node, _decorator, instantiate, SettingPopup, SoiCauItemPopup;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Node = module.Node;
      _decorator = module._decorator;
      instantiate = module.instantiate;
    }, function (module) {
      SettingPopup = module.SettingPopup;
    }, function (module) {
      SoiCauItemPopup = module.SoiCauItemPopup;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "cae83g6t1NN05IYMQJ6fqY0", "SoiCauPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SoiCauPopup = exports('SoiCauPopup', (_dec = ccclass('SoiCauPopup'), _dec2 = property([Label]), _dec3 = property(Node), _dec4 = property(Number), _dec(_class = (_class2 = (_temp = class SoiCauPopup extends SettingPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lbl_stats", _descriptor, this);

          _initializerDefineProperty(this, "item_template", _descriptor2, this);

          _initializerDefineProperty(this, "max_item", _descriptor3, this);

          _defineProperty(this, "pooled_items", []);
        }

        updateBangSoiCau(danhSachSoiCau) {
          let stats = this.getStat(danhSachSoiCau);
          this.lbl_stats.forEach((label, index) => {
            if (index < stats.length) {
              label.node.active = true;
              label.string = stats[index];
            } else {
              label.node.active = false;
            }
          });

          if (this.pooled_items.length <= 0) {
            for (let i = 0; i < this.max_item; i++) {
              let ob = instantiate(this.item_template);
              ob.parent = this.item_template.parent;
              this.pooled_items.push(ob.getComponent(SoiCauItemPopup));
            }
          }

          let minInd = danhSachSoiCau.length - this.max_item;

          if (minInd < 0) {
            minInd = 0;
          }

          let currentResultInd = danhSachSoiCau.length - 1;
          this.pooled_items.forEach((item, index) => {
            if (currentResultInd >= minInd) {
              let result = danhSachSoiCau[currentResultInd];
              item.show(result[0], result[1], result[2]);
              currentResultInd--;
            } else {
              item.hide();
            }
          });
        }

        getStat(danhSachSoiCau) {
          let marker = [0, 0, 0, 0, 0, 0];
          danhSachSoiCau.forEach(r => {
            r.forEach(dice => {
              if (dice < marker.length) {
                marker[dice] = marker[dice] + 1;
              }
            });
          });
          return marker;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbl_stats", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "item_template", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "max_item", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 30;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KimCuong_SlotMachineItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameUtils.ts', './KimCuongGameView.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Sprite, sp, _decorator, Component, GameUtils, KimCuongGameView;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      sp = module.sp;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      GameUtils = module.default;
    }, function (module) {
      KimCuongGameView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "cbc2c+n2hhCqZATw58Or8+9", "KimCuong_SlotMachineItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class KimCuongItem {
        constructor() {
          _defineProperty(this, "code", 0);
        }

        decodeItem(code) {
          this.code = code;
        }

        getResourceNormalName(useExtentsion = false) {
          return "tps_symbol_" + this.code.toString() + (useExtentsion ? ".png" : "");
        }

        getResourceBlurName(useExtentsion = false) {
          return "tps_symbol_blur_" + this.code.toString() + (useExtentsion ? ".png" : "");
        }

      }

      exports('KimCuongItem', KimCuongItem);
      let KimCuongSlotMachineItemView_SlotMachineItemView = exports('default', (_dec = ccclass('KimCuongSlotMachineItemView'), _dec2 = property(Sprite), _dec3 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = class KimCuongSlotMachineItemView_SlotMachineItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spr_item", _descriptor, this);

          _initializerDefineProperty(this, "anim_item", _descriptor2, this);

          _defineProperty(this, "item", null);
        }

        init() {
          this.item = new KimCuongItem();
          this.item.decodeItem(GameUtils.getRandomInt(0, 6));
          this.bright();
        }

        setItem(item) {
          if (item == undefined) return;
          this.item = item;
        }

        blur() {
          this.spr_item.enabled = true;
          this.anim_item.enabled = false;
          let name = this.item.getResourceBlurName();
          this.spr_item.spriteFrame = KimCuongGameView.getInstance().loaded_item_blur.filter(x => x.name.indexOf(name) >= 0)[0];
        }

        bright() {
          this.spr_item.enabled = true;

          if (this.anim_item != null) {
            this.anim_item.enabled = false;
          }

          let name = this.item.getResourceNormalName();
          this.spr_item.spriteFrame = KimCuongGameView.getInstance().loaded_item_normal.filter(x => x.name.indexOf(name) >= 0)[0];
        }

        playFx() {
          var _KimCuongGameView$get;

          if (this.anim_item == null) return;
          this.spr_item.enabled = false;
          this.anim_item.enabled = true;
          this.anim_item.skeletonData = (_KimCuongGameView$get = KimCuongGameView.getInstance()) === null || _KimCuongGameView$get === void 0 ? void 0 : _KimCuongGameView$get.loaded_anim_item[this.item.code];
          let track = this.anim_item.setAnimation(0, "symbolFx", false);

          if (track != null) {
            var _this$anim_item;

            (_this$anim_item = this.anim_item) === null || _this$anim_item === void 0 ? void 0 : _this$anim_item.setCompleteListener(trackEntry => {
              let name = trackEntry.animation ? trackEntry.animation.name : '';

              if (name == "symbolFx") {
                var _this$anim_item2;

                (_this$anim_item2 = this.anim_item) === null || _this$anim_item2 === void 0 ? void 0 : _this$anim_item2.setAnimation(0, "idle", true);
              }
            });
          }
        }

        setSpriteFrame(spr) {
          this.spr_item.spriteFrame = spr;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spr_item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "anim_item", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class)); //  * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
      //  */
      // // // Learn TypeScript:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // // Learn Attribute:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // // Learn life-cycle callbacks:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // // 
      // // import GameUtils from "../../../Utils/GameUtils";
      // // import { GlobalVariables } from "../../../Utils/GlobalVariables";
      // // import { GameCard } from "../../../Utils/MauBinh_CardLib";
      // // import KimCuongGameView from "../KimCuongGameView";
      // // 
      // // export class KimCuongItem {
      // //     public code : number = 0;
      // // 
      // //     public decodeItem(code) {
      // //         this.code = code;
      // //     }
      // // 
      // //     public getResourceNormalName(useExtentsion = false) {
      // //         return "tps_symbol_" + this.code.toString() + (useExtentsion ? ".png" : "");
      // //     }
      // // 
      // //     public getResourceBlurName(useExtentsion = false) {
      // //         return "tps_symbol_blur_" + this.code.toString() + (useExtentsion ? ".png" : "");
      // //     }
      // // }
      // // 
      // // const { ccclass, property } = cc._decorator;
      // // 
      // // @ccclass
      // // export default class KimCuong_SlotMachineItemView extends cc.Component {
      // //     @property(cc.Sprite)
      // //     private spr_item: cc.Sprite = null;
      // // 
      // //     private item : KimCuongItem = null;
      // // 
      // //     init() {
      // //         this.item = new KimCuongItem();
      // //         this.item.decodeItem(GameUtils.getRandomInt(0,6));
      // //         this.bright();
      // //     }
      // // 
      // //     setItem(item : KimCuongItem) {
      // //         if(item == undefined) return;
      // //         
      // //         this.item = item;
      // //     }
      // // 
      // //     blur() {
      // //         let name = this.item.getResourceBlurName();
      // //         this.spr_item.spriteFrame = KimCuongGameView.getInstance().loaded_item_blur.filter(x => x.name.indexOf(name) >= 0)[0];
      // //     }
      // // 
      // //     bright() {
      // //         let name = this.item.getResourceNormalName();
      // //         this.spr_item.spriteFrame = KimCuongGameView.getInstance().loaded_item_normal.filter(x => x.name.indexOf(name) >= 0)[0];
      // //     }
      // // 
      // //     setSpriteFrame(spr) {
      // //         this.spr_item.spriteFrame = spr;
      // //     }
      // // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KimCuongBetHistoryDetail.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './LineCmp.ts', './KimCuong_SlotMachineItemView.ts', './KimCuong_SlotMachineCmp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Label, Button, _decorator, Component, Tween, tween, UITransform, Vec2, Color, LineCmp, KimCuongSlotMachineItemView_SlotMachineItemView, KimCuongItem, KimCuongSlotMachineCmp_SlotMachineCmp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Button = module.Button;
      _decorator = module._decorator;
      Component = module.Component;
      Tween = module.Tween;
      tween = module.tween;
      UITransform = module.UITransform;
      Vec2 = module.Vec2;
      Color = module.Color;
    }, function (module) {
      LineCmp = module.default;
    }, function (module) {
      KimCuongSlotMachineItemView_SlotMachineItemView = module.default;
      KimCuongItem = module.KimCuongItem;
    }, function (module) {
      KimCuongSlotMachineCmp_SlotMachineCmp = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "d0636BaeVtPpYg3Q5q2Y0YC", "KimCuongBetHistoryDetail", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let KimCuongBetHistoryDetail = exports('default', (_dec = ccclass('KimCuongBetHistoryDetail'), _dec2 = property(Label), _dec3 = property(Button), _dec4 = property(LineCmp), _dec5 = property([KimCuongSlotMachineItemView_SlotMachineItemView]), _dec(_class = (_class2 = (_temp = class KimCuongBetHistoryDetail extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lbl_phien", _descriptor, this);

          _initializerDefineProperty(this, "btn_prev", _descriptor2, this);

          _initializerDefineProperty(this, "lineCmp", _descriptor3, this);

          _initializerDefineProperty(this, "kimCuong_SlotMachineItemViews", _descriptor4, this);

          _defineProperty(this, "onBack", null);
        }

        onLoad() {
          this.btn_prev.node.on("click", () => this.onBack && this.onBack());
        }

        show(phien, symbols, payoutLines) {
          this.lbl_phien.string = "#" + phien.toString();
          symbols.map(symbol => {
            let s = new KimCuongItem();
            s.decodeItem(symbol);
            return s;
          }).forEach((symbol, index) => {
            this.kimCuong_SlotMachineItemViews[index].setItem(symbol);
            this.kimCuong_SlotMachineItemViews[index].bright();
          });
          this.node.active = true;
          this.showEachLines(payoutLines, 1.0);
        }

        showEachLines(lineIDs, timePerOneLines = 0) {
          this.lineCmp.clear();
          Tween.stopAllByTarget(this.lineCmp.node);
          let delayTime = 0;
          lineIDs.forEach(lineid => {
            let seq = tween(this.lineCmp.node).sequence(tween().delay(delayTime), tween().call(() => {
              this.drawLine(lineid, true);
            }));
            seq.start();
            delayTime += timePerOneLines;
          });
        }

        drawLine(lineID, isClear) {
          let line = KimCuongSlotMachineCmp_SlotMachineCmp.LINE[lineID];
          let positions = line.map((row, column) => {
            let item = this.kimCuong_SlotMachineItemViews[column + row * 3];
            let wPos = item.node.parent.getComponent(UITransform).convertToWorldSpaceAR(item.node.position);
            return wPos;
          });
          this.lineCmp.draw(positions.map(pos => new Vec2(pos.x, pos.y)), 5, new Color("#FF993B"), this.node.parent.parent, isClear);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbl_phien", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_prev", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lineCmp", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "kimCuong_SlotMachineItemViews", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class)); //  * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
      //  */
      // // // Learn TypeScript:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // // Learn Attribute:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // // Learn life-cycle callbacks:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // // 
      // // import LineCmp from "../TaiXiu/LineCmp";
      // // import KimCuongGameView from "./KimCuongGameView";
      // // import KimCuong_SlotMachineCmp from "./SlotMachineCmp/KimCuong_SlotMachineCmp";
      // // import KimCuong_SlotMachineItemView, { KimCuongItem } from "./SlotMachineCmp/KimCuong_SlotMachineItemView";
      // // 
      // // const {ccclass, property} = cc._decorator;
      // // 
      // // @ccclass
      // // export default class KimCuongBetHistoryDetail extends cc.Component {
      // //     @property(cc.Label)
      // //     private lbl_phien: cc.Label = null;
      // // 
      // //     @property(cc.Button)
      // //     private btn_prev : cc.Button = null;
      // // 
      // //     @property(LineCmp)
      // //     private lineCmp : LineCmp = null;
      // // 
      // //     @property([KimCuong_SlotMachineItemView])
      // //     private kimCuong_SlotMachineItemViews : KimCuong_SlotMachineItemView[] = [];
      // // 
      // //     public onBack = null;
      // // 
      // //     onLoad() {
      // //         this.btn_prev.node.on("click", () => this.onBack && this.onBack());
      // //     }
      // // 
      // //     show(phien,symbols : number[],payoutLines : number[]) {
      // //         this.lbl_phien.string = "#" + phien.toString();
      // // 
      // //         symbols.map(symbol => {
      // //             let s = new KimCuongItem();
      // //             s.decodeItem(symbol);
      // //             return s;
      // //         }).forEach((symbol,index) => {
      // //             this.kimCuong_SlotMachineItemViews[index].setItem(symbol);
      // //             this.kimCuong_SlotMachineItemViews[index].bright();
      // //         });
      // // 
      // //         this.node.active = true;
      // // 
      // //         this.showEachLines(payoutLines,1.0);
      // //     }
      // // 
      // //     private showEachLines(lineIDs : number[],timePerOneLines = 0) {
      // //         this.lineCmp.clear();
      // //         this.lineCmp.node.stopAllActions();
      // // 
      // //         let delayTime = 0;
      // //         lineIDs.forEach(lineid => {
      // //             this.lineCmp.node.runAction(cc.sequence(cc.delayTime(delayTime),cc.callFunc(() => {
      // //                 this.drawLine(lineid,true);
      // //             })));
      // // 
      // //             delayTime += timePerOneLines;
      // //         });
      // //     }
      // // 
      // //     private drawLine(lineID,isClear) {
      // //         let line = KimCuong_SlotMachineCmp.LINE[lineID];
      // //         let positions = line.map((row,column) => {
      // //             let item = this.kimCuong_SlotMachineItemViews[column + (row * 3)];
      // //             let wPos = item.node.parent.convertToWorldSpaceAR(item.node.position);
      // //             return this.lineCmp.node.parent.convertToNodeSpaceAR(wPos);
      // //         });
      // //         
      // //         this.lineCmp.draw(positions.map(pos => new cc.Vec2(pos.x,pos.y)),5,cc.Color.ORANGE.fromHEX("#FF993B"),
      // //         this.node.parent.parent,isClear);
      // //     }
      // // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TableItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts', './MiniGameNetworkHandler.ts', './GameNetworkHandler.ts', './GlobalVariables.ts', './LoadingView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Button, Label, Sprite, SpriteFrame, _decorator, Component, EventHandler, StringUtils, MessageRequest, GameNetworkHandler, GLOBAL_MESSAGE, GlobalVariables, LoadingView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      Component = module.Component;
      EventHandler = module.EventHandler;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      MessageRequest = module.MessageRequest;
    }, function (module) {
      GameNetworkHandler = module.GameNetworkHandler;
    }, function (module) {
      GLOBAL_MESSAGE = module.GLOBAL_MESSAGE;
      GlobalVariables = module.GlobalVariables;
    }, function (module) {
      LoadingView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "d1c07bzGzxPEri9QsXoa5hG", "TableItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TableItemView = exports('TableItemView', (_dec = ccclass('TableItemView'), _dec2 = property(Button), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Sprite), _dec6 = property([SpriteFrame]), _dec(_class = (_class2 = (_temp = class TableItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "button", _descriptor, this);

          _initializerDefineProperty(this, "lbl_bet", _descriptor2, this);

          _initializerDefineProperty(this, "lbl_user", _descriptor3, this);

          _initializerDefineProperty(this, "spr_table", _descriptor4, this);

          _initializerDefineProperty(this, "sprFrame_table", _descriptor5, this);

          _defineProperty(this, "bet", 0);

          _defineProperty(this, "gameID", -1);
        }

        show(bet, userCount, gameID) {
          if (this.button.clickEvents.length == 0) {
            let clickEventHandler = new EventHandler();
            clickEventHandler.target = this.node; // This node is the node to which your event handler code component belongs

            clickEventHandler.component = "TableItemView"; // This is the code file name

            clickEventHandler.handler = "onJoinRoom";
            this.button.clickEvents.push(clickEventHandler);
          }

          this.bet = bet;
          this.gameID = gameID;
          this.lbl_bet.string = StringUtils.formatMoneyNumber(bet);
          this.lbl_user.string = userCount;
          let tableType = 4;

          if (bet <= 1000) {
            tableType = 1;
          } else if (bet <= 10000) {
            tableType = 2;
          } else if (bet <= 100000) {
            tableType = 3;
          }

          this.spr_table.spriteFrame = this.sprFrame_table[tableType];
          this.node.active = true;
        }

        hide() {
          this.node.active = false;
        }

        onJoinRoom() {
          LoadingView.getInstance().show();
          let dict = {};
          dict["cmd"] = GLOBAL_MESSAGE.QUICK_PLAY_WITH_BET;
          dict["gid"] = this.gameID;
          dict["aid"] = 1;
          dict["b"] = this.bet;

          if (this.gameID == GlobalVariables.SAM || this.gameID == GlobalVariables.TIENLEN) {
            dict["Mu"] = 2;
          }

          let mes = [MessageRequest.ZonePlugin_Type, "Simms", "channelPlugin", dict];
          GameNetworkHandler.send(mes);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbl_bet", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbl_user", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spr_table", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_table", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoiCauItemPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Sprite, SpriteFrame, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "d34cdLk+tFPPKYCxVvX0E7q", "SoiCauItemPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SoiCauItemPopup = exports('SoiCauItemPopup', (_dec = ccclass('SoiCauItemPopup'), _dec2 = property(Sprite), _dec3 = property(Sprite), _dec4 = property(Sprite), _dec5 = property([SpriteFrame]), _dec(_class = (_class2 = (_temp = class SoiCauItemPopup extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "spr_d1", _descriptor, this);

          _initializerDefineProperty(this, "spr_d2", _descriptor2, this);

          _initializerDefineProperty(this, "spr_d3", _descriptor3, this);

          _initializerDefineProperty(this, "spriteFrame_dice", _descriptor4, this);
        }

        show(d1, d2, d3) {
          if (d1 < this.spriteFrame_dice.length) {
            this.spr_d1.spriteFrame = this.spriteFrame_dice[d1];
          }

          if (d2 < this.spriteFrame_dice.length) {
            this.spr_d2.spriteFrame = this.spriteFrame_dice[d2];
          }

          if (d3 < this.spriteFrame_dice.length) {
            this.spr_d3.spriteFrame = this.spriteFrame_dice[d3];
          }

          this.node.active = true;
        }

        hide() {
          this.node.active = false;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spr_d1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spr_d2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spr_d3", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spriteFrame_dice", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MD5Algorithm.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, _decorator;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "d363fT/iMNNeIKjLU0tOYyH", "MD5Algorithm", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let MD5Algorithm = exports('MD5Algorithm', (_dec = ccclass('MD5Algorithm'), _dec(_class = (_temp = class MD5Algorithm {
        constructor() {
          _defineProperty(this, "hex_chr", '0123456789abcdef'.split(''));
        }

        md5cycle(x, k) {
          var a = x[0],
              b = x[1],
              c = x[2],
              d = x[3];
          a = this.ff(a, b, c, d, k[0], 7, -680876936);
          d = this.ff(d, a, b, c, k[1], 12, -389564586);
          c = this.ff(c, d, a, b, k[2], 17, 606105819);
          b = this.ff(b, c, d, a, k[3], 22, -1044525330);
          a = this.ff(a, b, c, d, k[4], 7, -176418897);
          d = this.ff(d, a, b, c, k[5], 12, 1200080426);
          c = this.ff(c, d, a, b, k[6], 17, -1473231341);
          b = this.ff(b, c, d, a, k[7], 22, -45705983);
          a = this.ff(a, b, c, d, k[8], 7, 1770035416);
          d = this.ff(d, a, b, c, k[9], 12, -1958414417);
          c = this.ff(c, d, a, b, k[10], 17, -42063);
          b = this.ff(b, c, d, a, k[11], 22, -1990404162);
          a = this.ff(a, b, c, d, k[12], 7, 1804603682);
          d = this.ff(d, a, b, c, k[13], 12, -40341101);
          c = this.ff(c, d, a, b, k[14], 17, -1502002290);
          b = this.ff(b, c, d, a, k[15], 22, 1236535329);
          a = this.gg(a, b, c, d, k[1], 5, -165796510);
          d = this.gg(d, a, b, c, k[6], 9, -1069501632);
          c = this.gg(c, d, a, b, k[11], 14, 643717713);
          b = this.gg(b, c, d, a, k[0], 20, -373897302);
          a = this.gg(a, b, c, d, k[5], 5, -701558691);
          d = this.gg(d, a, b, c, k[10], 9, 38016083);
          c = this.gg(c, d, a, b, k[15], 14, -660478335);
          b = this.gg(b, c, d, a, k[4], 20, -405537848);
          a = this.gg(a, b, c, d, k[9], 5, 568446438);
          d = this.gg(d, a, b, c, k[14], 9, -1019803690);
          c = this.gg(c, d, a, b, k[3], 14, -187363961);
          b = this.gg(b, c, d, a, k[8], 20, 1163531501);
          a = this.gg(a, b, c, d, k[13], 5, -1444681467);
          d = this.gg(d, a, b, c, k[2], 9, -51403784);
          c = this.gg(c, d, a, b, k[7], 14, 1735328473);
          b = this.gg(b, c, d, a, k[12], 20, -1926607734);
          a = this.hh(a, b, c, d, k[5], 4, -378558);
          d = this.hh(d, a, b, c, k[8], 11, -2022574463);
          c = this.hh(c, d, a, b, k[11], 16, 1839030562);
          b = this.hh(b, c, d, a, k[14], 23, -35309556);
          a = this.hh(a, b, c, d, k[1], 4, -1530992060);
          d = this.hh(d, a, b, c, k[4], 11, 1272893353);
          c = this.hh(c, d, a, b, k[7], 16, -155497632);
          b = this.hh(b, c, d, a, k[10], 23, -1094730640);
          a = this.hh(a, b, c, d, k[13], 4, 681279174);
          d = this.hh(d, a, b, c, k[0], 11, -358537222);
          c = this.hh(c, d, a, b, k[3], 16, -722521979);
          b = this.hh(b, c, d, a, k[6], 23, 76029189);
          a = this.hh(a, b, c, d, k[9], 4, -640364487);
          d = this.hh(d, a, b, c, k[12], 11, -421815835);
          c = this.hh(c, d, a, b, k[15], 16, 530742520);
          b = this.hh(b, c, d, a, k[2], 23, -995338651);
          a = this.ii(a, b, c, d, k[0], 6, -198630844);
          d = this.ii(d, a, b, c, k[7], 10, 1126891415);
          c = this.ii(c, d, a, b, k[14], 15, -1416354905);
          b = this.ii(b, c, d, a, k[5], 21, -57434055);
          a = this.ii(a, b, c, d, k[12], 6, 1700485571);
          d = this.ii(d, a, b, c, k[3], 10, -1894986606);
          c = this.ii(c, d, a, b, k[10], 15, -1051523);
          b = this.ii(b, c, d, a, k[1], 21, -2054922799);
          a = this.ii(a, b, c, d, k[8], 6, 1873313359);
          d = this.ii(d, a, b, c, k[15], 10, -30611744);
          c = this.ii(c, d, a, b, k[6], 15, -1560198380);
          b = this.ii(b, c, d, a, k[13], 21, 1309151649);
          a = this.ii(a, b, c, d, k[4], 6, -145523070);
          d = this.ii(d, a, b, c, k[11], 10, -1120210379);
          c = this.ii(c, d, a, b, k[2], 15, 718787259);
          b = this.ii(b, c, d, a, k[9], 21, -343485551);
          x[0] = this.add32(a, x[0]);
          x[1] = this.add32(b, x[1]);
          x[2] = this.add32(c, x[2]);
          x[3] = this.add32(d, x[3]);
        }

        cmn(q, a, b, x, s, t) {
          a = this.add32(this.add32(a, q), this.add32(x, t));
          return this.add32(a << s | a >>> 32 - s, b);
        }

        ff(a, b, c, d, x, s, t) {
          return this.cmn(b & c | ~b & d, a, b, x, s, t);
        }

        gg(a, b, c, d, x, s, t) {
          return this.cmn(b & d | c & ~d, a, b, x, s, t);
        }

        hh(a, b, c, d, x, s, t) {
          return this.cmn(b ^ c ^ d, a, b, x, s, t);
        }

        ii(a, b, c, d, x, s, t) {
          return this.cmn(c ^ (b | ~d), a, b, x, s, t);
        }

        md51(s) {
          var n = s.length,
              state = [1732584193, -271733879, -1732584194, 271733878],
              i;

          for (i = 64; i <= s.length; i += 64) {
            this.md5cycle(state, this.md5blk(s.substring(i - 64, i)));
          }

          s = s.substring(i - 64);
          var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

          for (i = 0; i < s.length; i++) tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);

          tail[i >> 2] |= 0x80 << (i % 4 << 3);

          if (i > 55) {
            this.md5cycle(state, tail);

            for (i = 0; i < 16; i++) tail[i] = 0;
          }

          tail[14] = n * 8;
          this.md5cycle(state, tail);
          return state;
        }
        /* there needs to be support for Unicode here,
         * unless we pretend that we can redefine the MD-5
         * algorithm for multi-byte characters (perhaps
         * by adding every four 16-bit characters and
         * shortening the sum to 32 bits). Otherwise
         * I suggest performing MD-5 as if every character
         * was two bytes--e.g., 0040 0025 = @%--but then
         * how will an ordinary MD-5 sum be matched?
         * There is no way to standardize text to something
         * like UTF-8 before transformation; speed cost is
         * utterly prohibitive. The JavaScript standard
         * itself needs to look at this: it should start
         * providing access to strings as preformed UTF-8
         * 8-bit unsigned value arrays.
         */


        md5blk(s) {
          /* I figured global was faster.   */
          var md5blks = [],
              i;
          /* Andy King said do it this way. */

          for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
          }

          return md5blks;
        }

        rhex(n) {
          var s = '',
              j = 0;

          for (; j < 4; j++) s += this.hex_chr[n >> j * 8 + 4 & 0x0F] + this.hex_chr[n >> j * 8 & 0x0F];

          return s;
        }

        hex(x) {
          for (var i = 0; i < x.length; i++) x[i] = this.rhex(x[i]);

          return x.join('');
        }

        md5(s) {
          return this.hex(this.md51(s));
        }
        /* this function is much faster,
        so if possible we use it. Some IEs
        are the only ones I know of that
        need the idiotic second function,
        generated by an if clause.  */


        add32(a, b) {
          return a + b & 0xFFFFFFFF;
        }

        encrypt(s) {
          return this.md5(s);
        }

      }, _temp)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuSessionAnalyticsItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, StringUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      StringUtils = module.StringUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "d4bd3mUtA5Cx6eq5BdI3ADX", "TaiXiuSessionAnalyticsItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TaiXiuSessionAnalyticsItemView = exports('default', (_dec = ccclass('TaiXiuSessionAnalyticsItemView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec(_class = (_class2 = (_temp = class TaiXiuSessionAnalyticsItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txt_phien_username", _descriptor, this);

          _initializerDefineProperty(this, "txt_phien_time", _descriptor2, this);

          _initializerDefineProperty(this, "txt_phien_datcuoc", _descriptor3, this);

          _initializerDefineProperty(this, "txt_phien_tienthang", _descriptor4, this);
        }

        show(time, username, datcuoc, tienthang) {
          this.txt_phien_username.string = username;
          this.txt_phien_time.string = time;
          this.txt_phien_datcuoc.string = StringUtils.formatMoneyNumber(datcuoc);
          this.txt_phien_tienthang.string = StringUtils.formatMoneyNumber(tienthang);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_username", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_time", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_datcuoc", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_tienthang", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { StringUtils } from "../../Utils/StringUtils";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuSessionAnalyticsItemView extends cc.Component {
      //     @property(cc.Label)
      //     private txt_phien_username : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_time : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_datcuoc : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_tienthang : cc.Label = null;
      // 
      //     public show(time,username,datcuoc,tienthang){
      //         this.txt_phien_username.string = username;
      //         this.txt_phien_time.string = time;
      //         this.txt_phien_datcuoc.string = StringUtils.formatMoneyNumber(datcuoc);
      //         this.txt_phien_tienthang.string = StringUtils.formatMoneyNumber(tienthang);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SamFullScreenGameView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './StringUtils.ts', './MiniGameNetworkHandler.ts', './GameNetworkHandler.ts', './NotiView.ts', './GameUtils.ts', './GlobalVariables.ts', './BaseFullScreenGameView.ts', './UserChatPopup.ts', './UserInvitePopup.ts', './BauCuaFullScreenGameView.ts', './PopupController.ts', './MauBinh_CardLib.ts', './Sam_CardLib.ts', './CardItem.ts', './CardPooling.ts', './GameBaiPlayerView.ts', './TienLenSettingPopup.ts', './LobbyViewController.ts', './MiniGameNodeController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Button, Label, Sprite, SpriteFrame, _decorator, systemEvent, Tween, tween, Vec3, UIOpacity, GameConfigManager, StringUtils, MessageRequest, MessageResponse, GameNetworkHandler, NotiView, GameUtils, GlobalVariables, GLOBAL_MESSAGE, BaseFullScreenGameView, UserChatPopup, UserInvitePopup, PlayerInfo, PopupController, GameCard, Sam_CardLib, CardItem, CardPooling, GameBaiPlayerView, TienLenSettingPopup, LobbyViewController, MiniGameNodeController, GameState, GamePlayManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      systemEvent = module.systemEvent;
      Tween = module.Tween;
      tween = module.tween;
      Vec3 = module.Vec3;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MessageResponse = module.MessageResponse;
    }, function (module) {
      GameNetworkHandler = module.GameNetworkHandler;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GameUtils = module.default;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
      GLOBAL_MESSAGE = module.GLOBAL_MESSAGE;
    }, function (module) {
      BaseFullScreenGameView = module.BaseFullScreenGameView;
    }, function (module) {
      UserChatPopup = module.UserChatPopup;
    }, function (module) {
      UserInvitePopup = module.UserInvitePopup;
    }, function (module) {
      PlayerInfo = module.PlayerInfo;
    }, function (module) {
      PopupController = module.PopupController;
    }, function (module) {
      GameCard = module.GameCard;
    }, function (module) {
      Sam_CardLib = module.default;
    }, function (module) {
      CardItem = module.CardItem;
    }, function (module) {
      CardPooling = module.CardPooling;
    }, function (module) {
      GameBaiPlayerView = module.GameBaiPlayerView;
    }, function (module) {
      TienLenSettingPopup = module.TienLenSettingPopup;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      MiniGameNodeController = module.default;
    }, function (module) {
      GameState = module.GameState;
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      exports('Sam_Message', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _class3, _temp;

      cclegacy._RF.push({}, "d60379yALpNM7SJezLkjzhY", "SamFullScreenGameView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let Sam_Message;

      (function (Sam_Message) {
        Sam_Message[Sam_Message["DEAL_CARDS"] = 700] = "DEAL_CARDS";
        Sam_Message[Sam_Message["DANH_BAI"] = 703] = "DANH_BAI";
        Sam_Message[Sam_Message["FINISH_GAME"] = 701] = "FINISH_GAME";
        Sam_Message[Sam_Message["HUY_BAO_SAM"] = 702] = "HUY_BAO_SAM";
        Sam_Message[Sam_Message["PASS"] = 706] = "PASS";
        Sam_Message[Sam_Message["BAO_SAM"] = 704] = "BAO_SAM";
        Sam_Message[Sam_Message["SEND_DANH_BAI"] = 705] = "SEND_DANH_BAI";
      })(Sam_Message || (Sam_Message = exports('Sam_Message', {})));

      let SamFullScreenGameView = exports('SamFullScreenGameView', (_dec = ccclass('SamFullScreenGameView'), _dec2 = property(GameBaiPlayerView), _dec3 = property(GameBaiPlayerView), _dec4 = property(UserChatPopup), _dec5 = property(UserInvitePopup), _dec6 = property(Button), _dec7 = property(Button), _dec8 = property(Button), _dec9 = property(Button), _dec10 = property(Button), _dec11 = property(Button), _dec12 = property(Button), _dec13 = property(Button), _dec14 = property(Label), _dec15 = property(Sprite), _dec16 = property([SpriteFrame]), _dec17 = property(Sprite), _dec18 = property([SpriteFrame]), _dec19 = property(Label), _dec20 = property(TienLenSettingPopup), _dec21 = property(CardPooling), _dec(_class = (_class2 = (_temp = _class3 = class SamFullScreenGameView extends BaseFullScreenGameView {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "my_info", _descriptor, this);

          _initializerDefineProperty(this, "opponent_info", _descriptor2, this);

          _initializerDefineProperty(this, "userChatPopup", _descriptor3, this);

          _initializerDefineProperty(this, "userInvitePopup", _descriptor4, this);

          _initializerDefineProperty(this, "btn_chat", _descriptor5, this);

          _initializerDefineProperty(this, "btn_exit", _descriptor6, this);

          _initializerDefineProperty(this, "btn_ready", _descriptor7, this);

          _initializerDefineProperty(this, "btn_begin", _descriptor8, this);

          _initializerDefineProperty(this, "btn_boluot", _descriptor9, this);

          _initializerDefineProperty(this, "btn_danhbai", _descriptor10, this);

          _initializerDefineProperty(this, "btn_sam", _descriptor11, this);

          _initializerDefineProperty(this, "btn_khongsam", _descriptor12, this);

          _initializerDefineProperty(this, "lbl_countdown", _descriptor13, this);

          _initializerDefineProperty(this, "spr_table", _descriptor14, this);

          _initializerDefineProperty(this, "sprFrame_tables", _descriptor15, this);

          _initializerDefineProperty(this, "spr_finishFx", _descriptor16, this);

          _initializerDefineProperty(this, "sprFrame_finishFx", _descriptor17, this);

          _initializerDefineProperty(this, "lbl_info", _descriptor18, this);

          _initializerDefineProperty(this, "tienLenSettingPopup", _descriptor19, this);

          _initializerDefineProperty(this, "cardPooling", _descriptor20, this);

          _defineProperty(this, "_playerInfo", []);

          _defineProperty(this, "_timeToFinish", 0);

          _defineProperty(this, "_thoiGianBaoSam", 0);

          _defineProperty(this, "_state", GameState.WAITING);

          _defineProperty(this, "pendingMessage", []);

          _defineProperty(this, "_isNewTurnRound", true);

          _defineProperty(this, "remainingTime", 0);

          _defineProperty(this, "_lastTurnCards", []);

          _defineProperty(this, "_cardInTable", []);

          _defineProperty(this, "_listRecommendCard", []);
        }

        static getInstance() {
          return SamFullScreenGameView.instance;
        }

        getState() {
          return this._state;
        }

        testCard() {
          /*Card_3T-9
          Card_4R-14
          Card_4C-15
          Card_5B-16*/
          let a = [0, 4, 8, 12];
          let b = [10, 14, 17, 33, 36, 37, 45, 46, 51, 7];
          let cardA = a.map(x => {
            let c = new GameCard();
            c.decodeCard(x, GlobalVariables.SAM);
            return c;
          });
          console.log("--------LAST-------");
          cardA.forEach(r => {
            console.log(r.getResourceName() + "-" + r.serverCode);
          });
          console.log("--------MY-------");
          let cardB = b.map(x => {
            let c = new GameCard();
            c.decodeCard(x, GlobalVariables.SAM);
            return c;
          });
          cardB.forEach(r => {
            console.log(r.getResourceName() + "-" + r.serverCode);
          });
          let recommendCards = Sam_CardLib.getRecommendCards(cardA, cardB);
          console.log("--------RECOMMEND-------");

          if (recommendCards.length > 0) {
            recommendCards = [];

            for (let i = 0; i < cardB.length; i++) {
              let pArrayCard = cardB === null || cardB === void 0 ? void 0 : cardB.slice(i, cardB.length);
              let rceCard = Sam_CardLib.getRecommendCards(cardA, pArrayCard);
              rceCard.forEach(r => {
                if (recommendCards.filter(c => r.serverCode == c.serverCode).length <= 0) {
                  recommendCards.push(r);
                }
              });
            }

            recommendCards.forEach(r => {
              console.log(r.getResourceName() + "-" + r.serverCode);
            });
          }
        }

        testCombination() {
          /*Card_3T-9
          Card_4R-14
          Card_4C-15
          Card_5B-16*/
          let a = [43, 47];
          let b = [9, 14, 16, 20, 28, 32, 43, 47, 51, 3];
          let cardA = a.map(x => {
            let c = new GameCard();
            c.decodeCard(x, GlobalVariables.SAM);
            return c;
          });
          console.log("--------SELECTED-------");
          cardA.forEach(r => {
            console.log(r.getResourceName() + "-" + r.serverCode);
          });
          console.log("--------ALL-------");
          let cardB = b.map(x => {
            let c = new GameCard();
            c.decodeCard(x, GlobalVariables.SAM);
            return c;
          });
          cardB.forEach(r => {
            console.log(r.getResourceName() + "-" + r.serverCode);
          });
          console.log("--------RECOMMEND-------");
          let recommendCards = Sam_CardLib.getRecommendCards2(cardA, cardB);

          if (recommendCards.length > 0) {
            recommendCards.forEach(r => {
              console.log(r.getResourceName() + "-" + r.serverCode);
            });
          }

          console.log("======end re");
        }

        onLoad() {
          var _this$btn_chat, _this$btn_exit, _this$btn_begin, _this$btn_ready, _this$btn_boluot, _this$btn_danhbai, _this$btn_sam, _this$btn_khongsam;

          this.testCombination();
          super.onLoad();
          SamFullScreenGameView.instance = this;
          this.gameID = GlobalVariables.SAM;
          (_this$btn_chat = this.btn_chat) === null || _this$btn_chat === void 0 ? void 0 : _this$btn_chat.node.on("click", () => {
            var _this$userChatPopup;

            (_this$userChatPopup = this.userChatPopup) === null || _this$userChatPopup === void 0 ? void 0 : _this$userChatPopup.show();
          });
          (_this$btn_exit = this.btn_exit) === null || _this$btn_exit === void 0 ? void 0 : _this$btn_exit.node.on("click", () => {
            var _this$tienLenSettingP;

            (_this$tienLenSettingP = this.tienLenSettingPopup) === null || _this$tienLenSettingP === void 0 ? void 0 : _this$tienLenSettingP.show();
          });
          (_this$btn_begin = this.btn_begin) === null || _this$btn_begin === void 0 ? void 0 : _this$btn_begin.node.on("click", () => {
            this.btn_begin.node.active = false;
            this.sendReady();
          });
          (_this$btn_ready = this.btn_ready) === null || _this$btn_ready === void 0 ? void 0 : _this$btn_ready.node.on("click", () => {
            this.btn_ready.node.active = false;
            this.sendReady();
          });
          (_this$btn_boluot = this.btn_boluot) === null || _this$btn_boluot === void 0 ? void 0 : _this$btn_boluot.node.on("click", () => {
            this.onBoLuot();
          });
          (_this$btn_danhbai = this.btn_danhbai) === null || _this$btn_danhbai === void 0 ? void 0 : _this$btn_danhbai.node.on("click", () => {
            this.onDanhBai();
          });
          (_this$btn_sam = this.btn_sam) === null || _this$btn_sam === void 0 ? void 0 : _this$btn_sam.node.on("click", () => {
            this.onBaoSam();
          });
          (_this$btn_khongsam = this.btn_khongsam) === null || _this$btn_khongsam === void 0 ? void 0 : _this$btn_khongsam.node.on("click", () => {
            this.onBaoKhongSam();
          });
          systemEvent.on(CardItem.CARD_SELECTED, () => {
            if (this.my_info.getSelectedCards().length > 0) {
              this.onAutoSelectCards();
            }
          });
        }

        onAutoSelectCards() {
          if (this._lastTurnCards.length > 0) {
            for (let i = 0; i < this._listRecommendCard.length; i++) {
              let recommendCards = this._listRecommendCard[i];

              if (recommendCards.length > 1) {
                let selectedCards = this.my_info.getSelectedCards().map(c => c.getCard());
                let isOK = recommendCards.filter(rc => selectedCards.findIndex(sc => rc.serverCode == sc.serverCode) >= 0).length >= 1;

                if (isOK) {
                  let lastCard = this._lastTurnCards.map(x => x.getCard());

                  if (Sam_CardLib.isStraight(lastCard) || Sam_CardLib.isStraight_Sam(lastCard)) {
                    var _this$my_info;

                    let count = 0;
                    let cardItems = (_this$my_info = this.my_info) === null || _this$my_info === void 0 ? void 0 : _this$my_info.getPlayerCard().filter(pc => recommendCards.findIndex(rc => pc.getCode() == rc.serverCode) >= 0);
                    cardItems === null || cardItems === void 0 ? void 0 : cardItems.forEach(cardItem => {
                      if (count < lastCard.length) {
                        cardItem.selected();
                      }

                      count++;
                    });
                  } else {
                    var _this$my_info2;

                    let cardItems = (_this$my_info2 = this.my_info) === null || _this$my_info2 === void 0 ? void 0 : _this$my_info2.getPlayerCard().filter(pc => recommendCards.findIndex(rc => pc.getCode() == rc.serverCode) >= 0);
                    cardItems === null || cardItems === void 0 ? void 0 : cardItems.forEach(cardItem => {
                      cardItem.selected();
                    });
                  }

                  break;
                }
              }
            }
          } else if (this.my_info.getSelectedCards().length > 1) {
            let selectedCards = this.my_info.getSelectedCards().map(c => c.getCard());
            let myCards = this.my_info.getPlayerCard().map(c => c.getCard());
            let recommendCards = Sam_CardLib.getRecommendCards2(selectedCards, myCards);

            if (recommendCards.length > 0) {
              var _this$my_info3;

              let cardItems = (_this$my_info3 = this.my_info) === null || _this$my_info3 === void 0 ? void 0 : _this$my_info3.getPlayerCard().filter(pc => recommendCards.findIndex(rc => pc.getCode() == rc.serverCode) >= 0);
              cardItems === null || cardItems === void 0 ? void 0 : cardItems.forEach(cardItem => {
                cardItem.selected();
              });
            }
          }
        }

        onBaoSam() {
          this.btn_sam.node.active = false;
          this.btn_khongsam.node.active = false;
          this.sendBaoSam();
        }

        onBaoKhongSam() {
          this.btn_sam.node.active = false;
          this.btn_khongsam.node.active = false;
          this.sendBaoSam(false);
        }

        onBoLuot() {
          this.btn_boluot.node.active = false;
          this.btn_danhbai.node.active = false;
          this.sendPass();
        }

        onDanhBai() {
          var _this$my_info4;

          let _choosingCards = (_this$my_info4 = this.my_info) === null || _this$my_info4 === void 0 ? void 0 : _this$my_info4.getSelectedCards().map(c => c.getCard());

          let _lastTurnCards = this._lastTurnCards.map(c => c.getCard());

          console.log("=============== SELECTED CARD =======================");
          _choosingCards === null || _choosingCards === void 0 ? void 0 : _choosingCards.forEach(c => {
            console.log(c.getResourceName() + "-" + c.serverCode);
          });
          console.log("=============== LAST TURN CARD =======================");
          _lastTurnCards === null || _lastTurnCards === void 0 ? void 0 : _lastTurnCards.forEach(c => {
            console.log(c.getResourceName() + "-" + c.serverCode);
          });

          if ((_choosingCards === null || _choosingCards === void 0 ? void 0 : _choosingCards.length) == 0) {
            NotiView.getInstance().showMessage("Bạn chưa chọn bài để đánh!", this.root, GlobalVariables.SAM);
            return;
          }

          if ((_choosingCards === null || _choosingCards === void 0 ? void 0 : _choosingCards.length) >= 2) {
            Sam_CardLib.sortVector(_choosingCards, false);

            if (Sam_CardLib.isPairs(_choosingCards) || Sam_CardLib.isThreeOfAKind(_choosingCards) || Sam_CardLib.isFourOfAKind(_choosingCards) || Sam_CardLib.isStraight(_choosingCards) || Sam_CardLib.isStraight_Sam(_choosingCards) || Sam_CardLib.getFourOfAKindPair(_choosingCards).length > 0) {
              if (this._lastTurnCards.length > 0) {
                if (Sam_CardLib.getRecommendCards(_lastTurnCards, _choosingCards).length != (_choosingCards === null || _choosingCards === void 0 ? void 0 : _choosingCards.length)) {
                  NotiView.getInstance().showMessage("Bài đánh không hợp lệ!", this.root, GlobalVariables.SAM);
                  return;
                }
              }
            } else {
              NotiView.getInstance().showMessage("Bài đánh không hợp lệ!", this.root, GlobalVariables.SAM);
              return;
            }
          } else if (this._lastTurnCards.length > 0 && (_choosingCards === null || _choosingCards === void 0 ? void 0 : _choosingCards.length) != _lastTurnCards.length) {
            NotiView.getInstance().showMessage("Bài đánh không hợp lệ!", this.root, GlobalVariables.SAM);
            return;
          }

          this.btn_boluot.node.active = false;
          this.btn_danhbai.node.active = false;
          this.sendDanhBai();
        }

        showInvite() {
          var _this$userInvitePopup;

          (_this$userInvitePopup = this.userInvitePopup) === null || _this$userInvitePopup === void 0 ? void 0 : _this$userInvitePopup.fetchUserInvitations();
        }

        sendPass() {
          let dict = {};
          dict["cmd"] = Sam_Message.PASS;
          let data = [MessageRequest.RoomPlugin_Type, "Simms", GamePlayManager.roomID, dict];
          GameNetworkHandler.send(data);
        }

        sendBaoSam(isSam = true) {
          let dict = {};
          dict["cmd"] = Sam_Message.BAO_SAM;
          dict["ib"] = isSam;
          let data = [MessageRequest.RoomPlugin_Type, "Simms", GamePlayManager.roomID, dict];
          GameNetworkHandler.send(data);
        }

        sendDanhBai() {
          let cardsArr = this.my_info.getSelectedCards().map(card => card.getCode());
          let dict = {};
          dict["cmd"] = Sam_Message.SEND_DANH_BAI;
          dict["cs"] = cardsArr;
          let data = [MessageRequest.RoomPlugin_Type, "Simms", GamePlayManager.roomID, dict];
          GameNetworkHandler.send(data);
        }

        resetUI() {
          var _this$userChatPopup2, _this$tienLenSettingP2, _this$userInvitePopup2;

          (_this$userChatPopup2 = this.userChatPopup) === null || _this$userChatPopup2 === void 0 ? void 0 : _this$userChatPopup2.close();
          (_this$tienLenSettingP2 = this.tienLenSettingPopup) === null || _this$tienLenSettingP2 === void 0 ? void 0 : _this$tienLenSettingP2.close();
          (_this$userInvitePopup2 = this.userInvitePopup) === null || _this$userInvitePopup2 === void 0 ? void 0 : _this$userInvitePopup2.close();
        }

        initUI() {
          this.btn_ready.node.active = false;
          this.btn_begin.node.active = false;
          this.btn_danhbai.node.active = false;
          this.btn_boluot.node.active = false;
          this.btn_sam.node.active = false;
          this.btn_khongsam.node.active = false;
          this.lbl_countdown.node.parent.active = false;
          this.my_info.setUserInfo(null);
          this.opponent_info.setUserInfo(null);
          this.my_info.resetUI();
          this.opponent_info.resetUI();
          this._isNewTurnRound = true;
          this.cardPooling.reset();
        }

        handleRefreshMoney(money) {
          let player = this.getPlayerByUID(GameConfigManager.uid);

          if (player == null) {
            return;
          }

          let infos = this._playerInfo.filter(p => p.uid == GameConfigManager.uid);

          if (infos.length > 0) {
            infos[0].gold = money;
          }

          player.refresh();
        }

        handleBackGameFromInterupt(timeInterupted) {
          console.log("handleBackGameFromInterupt::tlmn", timeInterupted);

          if (this._state == GameState.WAITING) {
            this.forceLeaveRoom();
          } else {
            this.leaveRoom();
            GamePlayManager.refreshInBackground();
          }
        }

        handleLeaveRoomResponse(message) {
          if (message != null) {
            let leaveRoomCode = message[1];

            if (!leaveRoomCode) {
              return;
            }

            let reasonCode = message[2];
            let mesDialog = "";

            if (reasonCode == 2) {
              mesDialog = message[5];
            }

            if (mesDialog != "") {
              var _PopupController$getI;

              (_PopupController$getI = PopupController.getInstance()) === null || _PopupController$getI === void 0 ? void 0 : _PopupController$getI.showCommonPopup(mesDialog, () => {
                var _PopupController$getI2;

                (_PopupController$getI2 = PopupController.getInstance()) === null || _PopupController$getI2 === void 0 ? void 0 : _PopupController$getI2.hideCommonPopup();
              });
            }
          }

          super.handleLeaveRoomResponse(message);
        }

        showChat(name, content) {
          let player = this.getPlayerByUID(name);

          if (player == null) {
            return;
          }

          if (content.indexOf("e_") >= 0) {
            content = content.replace("e_", "emo_");
          }

          player.showBubbleChat(content);
        }

        getPlayerByUID(uid) {
          if (uid == GameConfigManager.uid) {
            return this.my_info;
          } else if (this.opponent_info.getUID() == uid) {
            return this.opponent_info;
          }

          return null;
        }

        handleInGameMessage(message) {
          let dict = message[1];
          let cmd = dict["cmd"];

          if (cmd == GLOBAL_MESSAGE.INGAME_USER_CHAT) {
            // chat
            let name = dict["uid"];
            let content = dict["mgs"];
            this.showChat(name, content);
          } else if (cmd == GLOBAL_MESSAGE.INGAME_USER_READY) {
            // nguoi choi san sang
            let uid = dict["uid"];
            this.setReadyForPlayer(uid);
          } else if (cmd == GLOBAL_MESSAGE.INGAME_CHANGE_HOST) {
            // thay doi chu phong
            let uid = dict["uid"];
            this.setHostPlayer(uid);
          } else if (cmd == 303) {
            let playerArr = dict["us"];
            this.userInvitePopup.showPlayersToBeInvited(playerArr);
          } else if (cmd == GLOBAL_MESSAGE.REFRESH_MONEY) {
            let as = dict["As"];
            let vip = as["vip"];
            let gold = as["gold"];
            let chip = as["chip"];
            let goldSafe = as["safe"];
            GameConfigManager.gold = gold;
            systemEvent.emit(LobbyViewController.REFRESH_MONEY, GameConfigManager.gold);
          } else if (cmd == GLOBAL_MESSAGE.USER_INFO) {
            let userDict = dict["As"]; // int64_t chip = userDict -> getUInt64("chip");

            let gold = userDict["gold"]; // int vip = (int)userDict -> getUInt64("vip");

            let customerID = dict["id"];
            let displayName = dict["dn"];
            let userID = dict["uid"];
            let avatarURL = dict["a"];
            GameConfigManager.gold = gold;
            GameConfigManager.customerID = customerID;
            GameConfigManager.uid = userID;
            console.log("my uid:", GameConfigManager.uid);
            GameConfigManager.displayName = displayName;
            GameConfigManager.avaURL = avatarURL;

            if (dict["lr"] != null && dict["lr"] != undefined) {
              let lr = dict["lr"];
              let roomID = lr["rid"];
              let gameID = lr["gid"];
              let serverID = lr["sid"];
              let roomPassword = "";

              if (lr["pwd"] != null && lr["pwd"] != undefined) {
                roomPassword = lr["pwd"];
              }

              LobbyViewController.getInstance().switchGameScreen(gameID);
              GamePlayManager.joinRoom(roomID, serverID, roomPassword);
            }
          } // else if (cmd == 303) {
          //     // MsgPackArray * playerArr = dict->getArray("us");
          //     // gameView->showPlayersToBeInvited(playerArr);
          // }
          else {
              return false;
            }

          return true;
        }

        setHostPlayer(uid) {
          var _this$btn_ready2, _this$my_info5, _this$opponent_info;

          this._playerInfo.forEach(p => {
            p.isHost = p.uid == uid;
            let player = this.getPlayerByUID(p.uid);

            if (player != null) {
              player.setUserInfo(p);
            }
          });

          if ((_this$btn_ready2 = this.btn_ready) === null || _this$btn_ready2 === void 0 ? void 0 : _this$btn_ready2.node.active) {
            this.btn_ready.node.active = false;
          }

          (_this$my_info5 = this.my_info) === null || _this$my_info5 === void 0 ? void 0 : _this$my_info5.ready(false);
          (_this$opponent_info = this.opponent_info) === null || _this$opponent_info === void 0 ? void 0 : _this$opponent_info.ready(false);
        }

        setReadyForPlayer(uid) {
          let player = this.getPlayerByUID(uid);

          if (player != null) {
            player.ready();
          }

          if (this.getIsHost() && !this.isMe(uid)) {
            this.btn_begin.node.active = true;
          }
        }

        isMe(uid) {
          return uid == GameConfigManager.uid;
        }

        update(dt) {
          if (this.root.active) {
            if (this.pendingMessage.length > 0) {
              this.pendingMessage.forEach(m => {
                this.handleMessage(m);
              });
              this.pendingMessage = [];
            }
          }
        }

        handleMessage(message) {
          if (!this.root.active) {
            this.pendingMessage.push(message);
            return;
          }

          if (this.handleInGameMessage(message)) {
            return;
          }

          let messageType = message[0];
          let dict = message[1];
          let cmd = dict["cmd"];

          switch (messageType) {
            case MessageResponse.Extension_Response:
              {
                if (cmd == GLOBAL_MESSAGE.INGAME_JOIN_TABLE_INFOS) {
                  let b = dict["b"]; // muc cuoc

                  let gS = dict["gS"]; // game state

                  let rmT = dict["rmT"]; // remaining time

                  rmT = rmT / 1000;
                  let aid = dict["aid"];
                  let maxUser = dict["Mu"];
                  let hasPassword = false;

                  if (dict["hpwd"] != null && dict["hpwd"] != undefined) {
                    hasPassword = dict["hpwd"];
                  }

                  this._state = GameState.WAITING;

                  if (gS == 3 || gS == 4) {
                    this._state = GameState.VIEWING;
                  }

                  this.setGameConfig(b, gS, rmT, aid, maxUser, hasPassword);
                  let timeToFinish = dict["tfeg"];
                  timeToFinish /= 1000;
                  this._timeToFinish = timeToFinish;
                  let timeBaoSam = dict["tfbs"];
                  timeBaoSam /= 1000;
                  this._thoiGianBaoSam = timeBaoSam;
                  let arrPlayer = dict["ps"];

                  for (let i = 0; i < arrPlayer.length; i++) {
                    let playerInfoDict = arrPlayer[i];
                    let C = playerInfoDict["C"]; // chu ban

                    let m = playerInfoDict["m"]; // money

                    let pS = playerInfoDict["pS"]; // player state

                    let rmC = playerInfoDict["rmC"]; // so bai con lai

                    let sit = playerInfoDict["sit"]; // cho ngoi

                    let dn = playerInfoDict["dn"]; // display name

                    let uid = playerInfoDict["uid"]; // user id

                    let r = playerInfoDict["r"]; // ready

                    let playing = playerInfoDict["pi"];
                    let platformID = playerInfoDict["pid"]; // platform

                    let as = playerInfoDict["As"];
                    let avaURL = playerInfoDict["a"];
                    let customerID = 0;

                    if (playerInfoDict["id"] != null && playerInfoDict["id"] != undefined) {
                      customerID = playerInfoDict["id"];
                    }

                    this.addPlayer(dn, uid, C, m, pS, rmC, sit, r, platformID, playing, as, avaURL, customerID);
                  }

                  this.prepareNewGame();

                  if (this._state == GameState.VIEWING) {
                    // demLaGame->hideCards();
                    // demLaGame->setCurrentStateForPlayers();
                    if (dict["re"] == true) {
                      // reconnect
                      let cardArray = [];

                      for (let i = 0; i < arrPlayer.length; i++) {
                        let playerInfoDict = arrPlayer[i];
                        let uid = playerInfoDict["uid"]; // user id

                        if (this.isMe(uid)) {
                          cardArray = playerInfoDict["cs"];
                          break;
                        }
                      }

                      let lastTurnCards = dict["ldc"];
                      this.reconnectLastGame(cardArray, lastTurnCards, rmT);

                      if (gS == 3) {
                        this.setBaoSamState(arrPlayer);
                      } else if (gS == 4) {
                        for (let i = 0; i < arrPlayer.length; i++) {
                          let playerInfoDict = arrPlayer[i];

                          if (playerInfoDict["ib"] != null && playerInfoDict["ib"] != undefined && playerInfoDict["ib"]) {
                            let uid = playerInfoDict["uid"]; // user id

                            this.baoSamResponse(uid, true, false);
                            break;
                          }
                        }
                      } // gameView->updateViewingPlayerPositions();

                    } else {
                      // gameView->showViewTableMessage();
                      if (gS == 3) {
                        this.setBaoSamState(arrPlayer);
                      } else if (gS == 4) {
                        for (let i = 0; i < arrPlayer.length; i++) {
                          let playerInfoDict = arrPlayer[i];

                          if (playerInfoDict["ib"] != null && playerInfoDict["ib"] != undefined && playerInfoDict["ib"]) {
                            let uid = playerInfoDict["uid"]; // user id

                            this.baoSamResponse(uid, true, false);
                            break;
                          }
                        }
                      }
                    } // gameView->updateReadyStatus();

                  }

                  return;
                } else if (cmd == GLOBAL_MESSAGE.INGAME_USER_LEAVE_AND_JOIN_TABLE) {
                  let t = dict["t"]; // t = 1: vao phong || t = 2: ra phong

                  if (t == 1) {
                    let playerInfoDict = dict["p"];
                    let C = playerInfoDict["C"]; // chu ban

                    let a = playerInfoDict["a"]; // avatar

                    let g = playerInfoDict["g"]; // gender

                    let m = playerInfoDict["m"]; // money

                    let sit = playerInfoDict["sit"];
                    let dn = playerInfoDict["dn"]; // display name

                    let uid = playerInfoDict["uid"]; // user id

                    let r = false; // ready

                    let platformID = playerInfoDict["pid"]; // platform

                    if (playerInfoDict["r"] != null && playerInfoDict["r"] != undefined) {
                      r = playerInfoDict["r"];
                    }

                    let as = playerInfoDict["As"];
                    let avaURL = playerInfoDict["a"];
                    let customerID = 0;

                    if (playerInfoDict["id"] != null && playerInfoDict["id"] != undefined) {
                      customerID = playerInfoDict["id"];
                    }

                    this.addPlayer(dn, uid, C, m, 0, 0, sit, r, platformID, true, as, avaURL, customerID);
                  } else if (t == 2) {
                    let playerInfoDict = dict["p"];
                    let uid = playerInfoDict["uid"]; // user id

                    this.removePlayer(uid);
                  }

                  return;
                }

                if (cmd == Sam_Message.DEAL_CARDS) {
                  // chia bai
                  let cardsArr = dict["cs"];
                  let listPlaying = dict["lpi"];
                  let listUpdateMoney = null;

                  if (dict["ps"] != null && dict["ps"] != undefined) {
                    listUpdateMoney = dict["ps"];
                  }

                  this.startGame(cardsArr, listPlaying, listUpdateMoney);
                } else if (cmd == Sam_Message.DANH_BAI) {
                  let dictFromPlayer = dict["fP"];
                  let dictToPlayer = dict["tP"];

                  if (!(dict["fP"] != null && dict["fP"] != undefined)) {
                    dictToPlayer = dict["tP"];
                    let name = dictToPlayer["uid"];

                    if (dictToPlayer["ib"] != null && dictToPlayer["ib"] != undefined) {
                      this.baoSamResponse(name, true);
                    }

                    this.stopAllSamCountDown();
                    this.nextTurn(name);
                    this._isNewTurnRound = true;
                    this.btn_boluot.node.active = false;
                    return;
                  }

                  let state = dictFromPlayer["pS"];

                  if (state == 1) {
                    let arrCards = dictFromPlayer["dCs"];
                    let fromPlayer = dictFromPlayer["uid"];
                    let toPlayer = dictToPlayer["uid"];
                    let mX = 0;
                    let lM = 0;

                    if (dictFromPlayer["mX"] != null && dictFromPlayer["mX"] != undefined) {
                      mX = dictFromPlayer["mX"];
                      lM = dictFromPlayer["lm"];
                    }

                    this.danhBai(fromPlayer, arrCards, toPlayer, mX, lM);

                    if (dictFromPlayer["rfu"] != null && dictFromPlayer["rfu"] != undefined) {
                      let dictRefundPlayer = dict["rfu"];
                      let refundPlayer = dictRefundPlayer["uid"];
                      let moneyRefund = dictRefundPlayer["m"];
                      let mXRefund = dictRefundPlayer["mX"];
                      this.refundMoney(refundPlayer, moneyRefund, mXRefund);
                    }
                  } else if (state == 2) {
                    let fromPlayer = dictFromPlayer["uid"];
                    let toPlayer = dictToPlayer["uid"];
                    this.addBoLuotPlayer(fromPlayer);
                    this.nextTurn(toPlayer);
                  }
                } else if (cmd == Sam_Message.FINISH_GAME) {
                  let finishArr = [];

                  if (dict["fP"] != null && dict["fP"] != null) {
                    let dictFromPlayer = dict["fP"];
                    let arrCards = dictFromPlayer["dCs"];
                    let fromPlayer = dictFromPlayer["uid"];
                    let mX = 0;
                    let lM = 0;

                    if (dict["sm"] != null && dict["sm"] != null) {
                      mX = dictFromPlayer["mX"];
                      lM = dictFromPlayer["lm"];
                    }

                    this.danhBai(fromPlayer, arrCards, "", mX, lM);
                    finishArr.push(dictFromPlayer);
                  }

                  let arrPlayer = dict["ps"];

                  for (let i = 0; i < arrPlayer.length; i++) {
                    let playerDict = arrPlayer[i];
                    finishArr.push(playerDict);
                  }

                  this.finishThisGame(finishArr);
                } else if (cmd == Sam_Message.HUY_BAO_SAM) {
                  // huy bao sam
                  let name = dict["uid"];
                  this.baoSamResponse(name, false);
                } else if (cmd == GLOBAL_MESSAGE.ERROR_MESSAGE) {
                  let errorMessage;

                  if (dict["mgs"] != null && dict["mgs"] != undefined) {
                    errorMessage = dict["mgs"];
                  }

                  if (errorMessage.length > 0) {
                    NotiView.getInstance().showMessage(errorMessage, this.root, GlobalVariables.SAM);
                    return;
                  }
                }
              }
          }
        }

        bao1Response(uid) {
          if (!this.isMe(uid)) {
            let view = this.getPlayerByUID(uid);

            if (view == null) {
              return;
            }

            view.showBubbleChat("Báo 1", 1);
          }
        }

        setBaoSamState(arrPlayer) {
          for (let i = 0; i < arrPlayer.length; i++) {
            let playerInfoDict = arrPlayer[i];
            let uid = playerInfoDict["uid"]; // user id

            let daBao = playerInfoDict["icbs"];

            if (daBao) {
              this.baoSamResponse(uid, false);
            } else {
              let player = this.getPlayerByUID(uid);

              if (player == null) {
                continue;
              }

              if (this.isMe(uid)) {
                this.btn_sam.node.active = true;
                this.btn_khongsam.node.active = true;
                Tween.stopAllByTarget(this.lbl_countdown.node);
                this.lbl_countdown.node.parent.active = true;
                let countdown = Math.round(this.remainingTime);
                this.lbl_countdown.string = countdown.toString();
                let sequence = tween(this.lbl_countdown.node).repeat(countdown, tween(this.lbl_countdown.node).sequence(tween().delay(1), tween().call(() => {
                  countdown -= 1;
                  this.lbl_countdown.string = countdown.toString();
                })));
                sequence.start();
              }
            }
          }
        }

        baoSamResponse(name, sam, stopCountDown = true) {
          let view = this.getPlayerByUID(name);

          if (view == null) {
            return;
          }

          if (stopCountDown) {
            view.stopCountDown();
          }

          let baoSamStr = "";

          if (!sam) {
            baoSamStr = "Huỷ Sâm";
          } else {
            baoSamStr = "Báo Sâm";
          }

          view.showBubbleChat(baoSamStr, 1);

          if (this.isMe(name) || sam) {
            this.btn_sam.node.active = false;
            this.btn_khongsam.node.active = false;
          }
        }

        reconnectLastGame(cardArray, lastTurnCards, remainingTime) {
          var _this$my_info6, _this$my_info7, _this$opponent_info2, _this$opponent_info3, _this$my_info8, _this$my_info9;

          this._state = GameState.PLAYING;

          for (let i = 0; i < this.opponent_info.getRemainingCard(); i++) {
            var _this$cardPooling;

            let opponent_card = (_this$cardPooling = this.cardPooling) === null || _this$cardPooling === void 0 ? void 0 : _this$cardPooling.getPooledCard();
            opponent_card.setAsOnTop();
            this.opponent_info.addCard(opponent_card);
            Tween.stopAllByTarget(opponent_card.node);
            opponent_card.node.setPosition(this.opponent_info.getCardPos().position);
            opponent_card.node.setScale(this.opponent_info.getCardPos().scale);
            opponent_card.node.active = true;
          }

          for (let i = 0; i < cardArray.length; i++) {
            var _this$cardPooling2;

            let code = cardArray[i];
            let my_card = (_this$cardPooling2 = this.cardPooling) === null || _this$cardPooling2 === void 0 ? void 0 : _this$cardPooling2.getPooledCard();

            if (my_card != null) {
              my_card.setAsOnTop();
              let card = new GameCard();
              card.decodeCard(code, GlobalVariables.SAM);
              my_card.setCard(card);
              this.my_info.addCard(my_card, true);
              Tween.stopAllByTarget(my_card.node);
              my_card.show();
              let target = new Vec3(this.my_info.getCardPos().position);
              target.x += i * 80;
              my_card.node.setPosition(target);
              my_card.node.setScale(this.my_info.getCardPos().scale);
              my_card.lockPosition(target);
            }
          }

          this._lastTurnCards = [];

          if (lastTurnCards.length > 0) {
            console.log("=========== RECONNECT ============");
            lastTurnCards.forEach(x => {
              let card = new GameCard();
              card.decodeCard(x, GlobalVariables.SAM);
              console.log("last turn card:" + card.getResourceName());
            });
            let randNum1 = GameUtils.getRandomInt(0, 100) - 75;
            let randNum2 = GameUtils.getRandomInt(0, 100) - 50;
            let posX = this.cardPooling.node.position.x + randNum1;
            let posY = this.cardPooling.node.position.y + randNum2;

            if (lastTurnCards.length >= 8) {
              posX -= 140;
            } else if (lastTurnCards.length >= 5) {
              posX -= 70;
            }

            for (let i = 0; i < lastTurnCards.length; i++) {
              var _this$cardPooling3;

              let code = lastTurnCards[i];
              let card = (_this$cardPooling3 = this.cardPooling) === null || _this$cardPooling3 === void 0 ? void 0 : _this$cardPooling3.getPooledCard();

              if (card != null && card != undefined) {
                let data = new GameCard();
                data.decodeCard(code, GlobalVariables.SAM);
                card.setCard(data);
                Tween.stopAllByTarget(card.node);
                card.setAsOnTop();
                card.node.setPosition(new Vec3(posX, posY, 0));
                card.node.setScale(new Vec3(0.55, 0.55, 0.55));
                card.show();
                posX += 40;

                this._lastTurnCards.push(card);
              }
            }

            this.checkCard();
          }

          if (remainingTime > 20) {
            remainingTime = 20;
          }

          if (((_this$my_info6 = this.my_info) === null || _this$my_info6 === void 0 ? void 0 : _this$my_info6.getCurrentState()) == 3) {
            this.my_info.startCountDown(remainingTime);
            this.btn_danhbai.node.active = this.my_info.getCountPosibleToSelect() > 0;
            this.btn_boluot.node.active = lastTurnCards.length > 0;
          } else if (((_this$my_info7 = this.my_info) === null || _this$my_info7 === void 0 ? void 0 : _this$my_info7.getCurrentState()) == 2) {
            this.addBoLuotPlayer(this.my_info.getUID());
          }

          if (((_this$opponent_info2 = this.opponent_info) === null || _this$opponent_info2 === void 0 ? void 0 : _this$opponent_info2.getCurrentState()) == 3) {
            this.opponent_info.startCountDown(remainingTime);
            this.btn_danhbai.node.active = false;
            this.btn_boluot.node.active = false;
          } else if (((_this$opponent_info3 = this.opponent_info) === null || _this$opponent_info3 === void 0 ? void 0 : _this$opponent_info3.getCurrentState()) == 2) {
            this.addBoLuotPlayer(this.opponent_info.getUID());
          }

          Tween.stopAllByTarget(this.my_info.node);
          (_this$my_info8 = this.my_info) === null || _this$my_info8 === void 0 ? void 0 : _this$my_info8.node.setPosition(new Vec3(-675, -240, 0));
          (_this$my_info9 = this.my_info) === null || _this$my_info9 === void 0 ? void 0 : _this$my_info9.node.setScale(new Vec3(0.8, 0.8, 0.8));
        }

        finishThisGame(finishArr) {
          for (let i = 0; i < finishArr.length; i++) {
            let playerDict = finishArr[i];
            let uid = playerDict["uid"];
            let player = this.getPlayerByUID(uid);

            if (player != null) {
              player.stopCountDown();
              player.hideBubbleChat();
              let winnings = playerDict["mX"];

              if (playerDict["sm"] != null && playerDict["sm"] != undefined) {
                winnings = playerDict["sm"];
              }

              let loseType = 0;

              if (playerDict["lt"] != null && playerDict["lt"] != undefined) {
                loseType = playerDict["lt"];
              }

              let rankOfHand = 0;

              if (playerDict["wcr"] != null && playerDict["wcr"] != undefined) {
                rankOfHand = playerDict["wcr"];
              }

              let ag = playerDict["m"];
              player.setMoney(ag);
              player.winning = Math.abs(winnings);

              if (winnings > 0) {
                player.showWinFx(0, this._timeToFinish * 0.5);
              } else {
                player.showLoseFx(0, this._timeToFinish * 0.5);
              }

              this.runActionFinishForPlayer(player, winnings, rankOfHand, false, loseType);
            }

            if (!this.isMe(uid)) {
              if (playerDict["cs"] != null && playerDict["cs"] != undefined) {
                let arrCards = playerDict["cs"];
                let pos = new Vec3(this.opponent_info.node.position);
                pos.y = 133;
                pos.x -= 25 * arrCards.length / 2;

                for (let i = 0; i < arrCards.length; i++) {
                  var _this$opponent_info4;

                  let code = arrCards[i];
                  let card = (_this$opponent_info4 = this.opponent_info) === null || _this$opponent_info4 === void 0 ? void 0 : _this$opponent_info4.popCard();

                  if (card != null && card != undefined) {
                    let data = new GameCard();
                    data.decodeCard(code, GlobalVariables.SAM);
                    card.setCard(data);
                    card.show();
                    Tween.stopAllByTarget(card.node);
                    let seq = tween(card.node).sequence(tween().call(() => {
                      card.setAsOnTop();
                    }), tween().to(0.3, {
                      position: new Vec3(pos)
                    }));
                    seq.start();
                    pos.x += 35;
                  }
                }
              }
            }
          }

          let finishAct = tween(this.node).sequence(tween().call(() => {
            this.btn_danhbai.node.active = false;
            this.btn_boluot.node.active = false;
          }), tween().delay(this._timeToFinish), tween().call(() => {
            var _this$tienLenSettingP3;

            this._state = GameState.WAITING;

            if ((_this$tienLenSettingP3 = this.tienLenSettingPopup) === null || _this$tienLenSettingP3 === void 0 ? void 0 : _this$tienLenSettingP3.isWillExit) {
              this.tienLenSettingPopup.exitRoom();
            } else {
              this.prepareNewGame();
            }
          }));
          finishAct.start();
        }

        runActionFinishForPlayer(player, winnings, rank, thangTrang, loseType) {
          let fxText = "";

          if (winnings > 0) {
            if (loseType == 5) {
              fxText = "Ăn Sâm";
            } else if (loseType == 6) {
              fxText = "Chặn Sâm";
            }
          } else {
            if (thangTrang && winnings == 0) {
              fxText = "Hòa";
            }

            if (loseType == 3) {
              fxText = "Đền";
            } else if (loseType == 1) {
              fxText = "Bị Bắt Sâm";
            } else if (loseType == 4) {
              fxText = "Thối 2";
            } else if (loseType == 2) {
              fxText = "Cóng";
            }
          }

          if (rank == 1) {
            // dong hoa
            fxText = "Đồng Hoa";
          } else if (rank == 2) {
            // tu quy 2
            fxText = "Tứ Quý 2";
          } else if (rank == 3) {
            // 3 xam
            fxText = "3 Xám";
          } else if (rank == 4) {
            // 5 doi
            fxText = "5 Đôi";
          } else if (rank == 5) {
            // sanh rong
            fxText = "Sảnh Rồng";
          } else if (rank == 6) {
            // sanh rong dong hoa
            fxText = "Sảnh Rồng\nĐồng Hoa";
          }

          if (fxText.length > 0) {
            player.showResultText(fxText, this._timeToFinish);
          }
        }

        addBoLuotPlayer(fromPlayer) {
          this._isNewTurnRound = true;
          let player = this.getPlayerByUID(fromPlayer);

          if (player != null) {
            player.showBubbleChat("Bỏ", 1);
          }

          this._lastTurnCards.forEach(card => {
            card.setGray();
          });

          this.clearCardInTable();
        }

        checkFx() {
          Tween.stopAllByTarget(this.spr_finishFx.node);
          Tween.stopAllByTarget(this.spr_finishFx.node.getComponent(UIOpacity));
          let fxPath = -1;

          let checkFxCards = this._lastTurnCards.map(x => x.getCard());

          Sam_CardLib.sortVector(checkFxCards, false);

          if (Sam_CardLib.isFourOfAKind(checkFxCards)) {
            fxPath = 0;
          }

          if (fxPath != -1) {
            this.spr_finishFx.spriteFrame = this.sprFrame_finishFx[fxPath];
            this.spr_finishFx.node.setScale(new Vec3(0.2, 0.2, 0.2));
            let opa = this.spr_finishFx.node.getComponent(UIOpacity);
            opa.opacity = 255;
            let seq = tween(this.spr_finishFx.node).sequence(tween().to(0.15, {
              scale: Vec3.ONE
            }), tween().to(0.15, {
              scale: new Vec3(1.5, 1.5, 1.5)
            }), tween().to(0.15, {
              scale: Vec3.ONE
            }), tween().to(0.15, {
              scale: new Vec3(1.2, 1.2, 1.2)
            }), tween().to(0.15, {
              scale: Vec3.ONE
            }), tween().delay(0.5), tween().call(() => {
              let fadeOut = tween(opa).to(0.2, {
                opacity: 1
              });
              fadeOut.start();
            }));
            seq.start();
          }
        }

        danhBai(fromPlayer, arrCards, toPlayer, mX, lM) {
          this._isNewTurnRound = false;

          if (mX > 0) {
            if (this.isMe(fromPlayer)) {
              this.opponent_info.winning = Math.abs(mX);
              this.opponent_info.showLoseFx(0, 3);
              this.my_info.winning = Math.abs(mX);
              this.my_info.showWinFx(0, 3);
            } else {
              this.opponent_info.winning = Math.abs(mX);
              this.opponent_info.showWinFx(0, 3);
              this.my_info.winning = Math.abs(mX);
              this.my_info.showLoseFx(0, 3);
            }
          }

          this._lastTurnCards.forEach(card => {
            card.setGray();
          });

          let randNum1 = GameUtils.getRandomInt(0, 100) - 75;
          let randNum2 = GameUtils.getRandomInt(-50, 25);
          let posX = this.cardPooling.node.position.x + randNum1;
          let posY = this.cardPooling.node.position.y + randNum2;
          this._lastTurnCards = [];

          if (this.isMe(fromPlayer)) {
            for (let i = 0; i < arrCards.length; i++) {
              var _this$my_info10, _this$my_info11;

              let code = arrCards[i];
              let card = (_this$my_info10 = this.my_info) === null || _this$my_info10 === void 0 ? void 0 : _this$my_info10.getCardItemWithCode(code);

              if (card != null && card != undefined) {
                this._lastTurnCards.push(card);
              }

              (_this$my_info11 = this.my_info) === null || _this$my_info11 === void 0 ? void 0 : _this$my_info11.removeCardItemWithCode(code);
            }

            this.my_info.rearrangeCard();

            if (this._lastTurnCards.length >= 8) {
              posX -= 140;
            } else if (this._lastTurnCards.length >= 5) {
              posX -= 70;
            }

            this._lastTurnCards.forEach(card => {
              Tween.stopAllByTarget(card.node);
              let seq = tween(card.node).sequence(tween().call(() => {
                card.setAsOnTop();
              }), tween().to(0.2, {
                position: new Vec3(posX, posY, 0),
                scale: new Vec3(0.55, 0.55, 0.55)
              }));
              seq.start();
              posX += 40;
            });
          } else {
            var _this$opponent_info6;

            for (let i = 0; i < arrCards.length; i++) {
              var _this$opponent_info5;

              let code = arrCards[i];
              let card = (_this$opponent_info5 = this.opponent_info) === null || _this$opponent_info5 === void 0 ? void 0 : _this$opponent_info5.popCard();

              if (card != null && card != undefined) {
                let data = new GameCard();
                data.decodeCard(code, GlobalVariables.SAM);
                card.setCard(data);
                card.show();

                this._lastTurnCards.push(card);
              }
            }

            if (this._lastTurnCards.length >= 8) {
              posX -= 140;
            } else if (this._lastTurnCards.length >= 5) {
              posX -= 70;
            }

            this._lastTurnCards.forEach(card => {
              Tween.stopAllByTarget(card.node);
              let seq = tween(card.node).sequence(tween().call(() => {
                card.setAsOnTop();
              }), tween().to(0.2, {
                position: new Vec3(posX, posY, 0),
                scale: new Vec3(0.55, 0.55, 0.55)
              }));
              seq.start();
              posX += 40;
            });

            if (((_this$opponent_info6 = this.opponent_info) === null || _this$opponent_info6 === void 0 ? void 0 : _this$opponent_info6.getPlayerCard().length) == 1) {
              this.bao1Response(this.opponent_info.getUID());
            }
          }

          this.checkFx();
          this.nextTurn(toPlayer);
        }

        refundMoney(refundPlayer, moneyRefund, mXRefund) {}

        startGame(cardsArr, listPlaying, listUpdateMoney) {
          var _this$my_info13, _this$opponent_info9;

          let count = 0;
          cardsArr.forEach((x, i) => {
            var _this$cardPooling4, _this$cardPooling5;

            let opponent_card = (_this$cardPooling4 = this.cardPooling) === null || _this$cardPooling4 === void 0 ? void 0 : _this$cardPooling4.getPooledCard();

            if (opponent_card != null) {
              var _this$opponent_info7, _this$opponent_info7$, _this$opponent_info8, _this$opponent_info8$;

              opponent_card.setAsOnTop();
              this.opponent_info.addCard(opponent_card);
              Tween.stopAllByTarget(opponent_card.node);
              opponent_card.node.active = true;
              let move = tween(opponent_card.node).sequence(tween().delay(0.2 + 0.08 * i), tween().to(0.6, {
                position: (_this$opponent_info7 = this.opponent_info) === null || _this$opponent_info7 === void 0 ? void 0 : (_this$opponent_info7$ = _this$opponent_info7.getCardPos()) === null || _this$opponent_info7$ === void 0 ? void 0 : _this$opponent_info7$.position,
                scale: (_this$opponent_info8 = this.opponent_info) === null || _this$opponent_info8 === void 0 ? void 0 : (_this$opponent_info8$ = _this$opponent_info8.getCardPos()) === null || _this$opponent_info8$ === void 0 ? void 0 : _this$opponent_info8$.scale
              }, {
                easing: 'expoOut'
              }));
              move.start();
            }

            let my_card = (_this$cardPooling5 = this.cardPooling) === null || _this$cardPooling5 === void 0 ? void 0 : _this$cardPooling5.getPooledCard();

            if (my_card != null) {
              var _this$my_info12, _this$my_info12$getCa;

              my_card.setAsOnTop();
              let card = new GameCard();
              card.decodeCard(x, GlobalVariables.SAM);
              my_card.setCard(card);
              this.my_info.addCard(my_card, true);
              Tween.stopAllByTarget(my_card.node);
              my_card.show();
              let target = new Vec3(this.my_info.getCardPos().position);
              target.x += i * 80;
              my_card.lockPosition(target);
              let velocity = 700;
              let distance = Vec3.distance(target, my_card.node.position);
              let moveTime = distance / velocity;
              let move = tween(my_card.node).sequence(tween().delay(0.2 + 0.08 * i), tween().to(moveTime, {
                position: target,
                scale: (_this$my_info12 = this.my_info) === null || _this$my_info12 === void 0 ? void 0 : (_this$my_info12$getCa = _this$my_info12.getCardPos()) === null || _this$my_info12$getCa === void 0 ? void 0 : _this$my_info12$getCa.scale
              }, {
                easing: 'expoOut'
              }), tween().call(() => {
                count += 1;

                if (count >= 10) {
                  this.finishPhatBai();
                }
              }));
              move.start();
            }
          }); // (-675,-240) des,origin (6,-206)

          Tween.stopAllByTarget(this.my_info.node);
          let seq = tween(this.my_info.node).to(0.5, {
            position: new Vec3(-675, -240, 0),
            scale: new Vec3(0.8, 0.8, 0.8)
          });
          seq.start();
          (_this$my_info13 = this.my_info) === null || _this$my_info13 === void 0 ? void 0 : _this$my_info13.ready(false);
          (_this$opponent_info9 = this.opponent_info) === null || _this$opponent_info9 === void 0 ? void 0 : _this$opponent_info9.ready(false);
          this._state = GameState.PLAYING;
        }

        finishPhatBai() {
          this.btn_sam.node.active = true;
          this.btn_khongsam.node.active = true;
          Tween.stopAllByTarget(this.lbl_countdown.node);
          this.lbl_countdown.node.parent.active = true;
          let countdown = Math.round(this._thoiGianBaoSam);
          this.lbl_countdown.string = countdown.toString();
          let sequence = tween(this.lbl_countdown.node).repeat(countdown, tween(this.lbl_countdown.node).sequence(tween().delay(1), tween().call(() => {
            countdown -= 1;
            this.lbl_countdown.string = countdown.toString();
          })));
          sequence.start();
        }

        clearCardInTable() {
          var _this$my_info14, _this$opponent_info10, _this$cardPooling6;

          this._lastTurnCards = [];
          let cards = [];
          (_this$my_info14 = this.my_info) === null || _this$my_info14 === void 0 ? void 0 : _this$my_info14.getPlayerCard().forEach(c => cards.push(c));
          (_this$opponent_info10 = this.opponent_info) === null || _this$opponent_info10 === void 0 ? void 0 : _this$opponent_info10.getPlayerCard().forEach(c => cards.push(c));
          (_this$cardPooling6 = this.cardPooling) === null || _this$cardPooling6 === void 0 ? void 0 : _this$cardPooling6.clearCardsNotInTheseCards(cards);
        }

        stopAllSamCountDown() {
          Tween.stopAllByTarget(this.lbl_countdown.node);
          this.lbl_countdown.node.parent.active = false;
        }

        nextTurn(uid) {
          if (uid == "") return;

          if (this.isMe(uid)) {
            this.btn_danhbai.node.active = true;

            if (this._isNewTurnRound) {
              this.btn_boluot.node.active = false;
            } else {
              this.btn_boluot.node.active = true;
            }

            this.my_info.startCountDown(20);
            this.opponent_info.stopCountDown();
            this.checkCard();
          } else {
            this.btn_danhbai.node.active = false;
            this.btn_boluot.node.active = false;
            this.opponent_info.startCountDown(20);
            this.my_info.stopCountDown();
            this.my_info.getPlayerCard().forEach(x => {
              x.canBeSelected();
            });
          }
        }

        checkCard() {
          var _this$my_info15;

          let _lastTurnCards = this._lastTurnCards.map(x => x.getCard());

          let _thisPlayerCards = (_this$my_info15 = this.my_info) === null || _this$my_info15 === void 0 ? void 0 : _this$my_info15.getPlayerCard().map(x => x.getCard());

          this._listRecommendCard = [];

          if (_lastTurnCards != null && _lastTurnCards.length > 0) {
            let recommendCards = Sam_CardLib.getRecommendCards(_lastTurnCards, _thisPlayerCards);

            if (recommendCards.length > 0) {
              recommendCards = [];

              for (let i = 0; i < _thisPlayerCards.length; i++) {
                let pArrayCard = _thisPlayerCards === null || _thisPlayerCards === void 0 ? void 0 : _thisPlayerCards.slice(i, _thisPlayerCards.length);
                let rceCard = Sam_CardLib.getRecommendCards(_lastTurnCards, pArrayCard);

                if (rceCard.length > 0) {
                  this._listRecommendCard.push(rceCard);

                  rceCard.forEach(r => {
                    if (recommendCards.filter(c => r.serverCode == c.serverCode).length <= 0) {
                      recommendCards.push(r);
                    }
                  });
                }
              }

              this.my_info.getPlayerCard().forEach(x => {
                if (recommendCards.filter(r => r.serverCode == x.getCode()).length > 0) {
                  x.canBeSelected();
                } else {
                  x.cannotBeSelected();
                }
              });
            } else {
              this.btn_danhbai.node.active = false;
              this.my_info.getPlayerCard().forEach(x => {
                x.cannotBeSelected();
              });
            }
          } else {
            this.my_info.getPlayerCard().forEach(x => {
              x.canBeSelected();
            });
          }
        }

        setGameConfig(b, gS, rmT, aid, maxUser, hasPassword) {
          let tableType = 4;

          if (b <= 1000) {
            tableType = 1;
          } else if (b <= 10000) {
            tableType = 2;
          } else if (b <= 100000) {
            tableType = 3;
          }

          this.remainingTime = rmT;
          this.spr_table.spriteFrame = this.sprFrame_tables[tableType];
          this.lbl_info.string = "Bàn: " + GamePlayManager.roomID + " - Cược: " + StringUtils.formatMoneyNumber(b);
          this.resetAllPlayerViewAction();
        }

        addPlayer(dn, uid, C, m, pS, rmC, sit, r, platform, playing, as, avatarURL, customerID) {
          let info = new PlayerInfo();
          info.displayName = dn;
          info.gold = m;
          info.avatarURL = avatarURL;
          info.uid = uid;
          info.isHost = C;

          this._playerInfo.push(info);

          this._playerInfo.forEach(p => {
            if (p.uid == GameConfigManager.uid) {
              this.my_info.setUserInfo(p);
            } else {
              this.opponent_info.setUserInfo(p);
            }
          });

          if (this.isMe(uid)) {
            this.my_info.setCurrentState(pS, rmC);
          } else {
            var _this$opponent_info11;

            this.opponent_info.setCurrentState(pS, rmC);

            if (((_this$opponent_info11 = this.opponent_info) === null || _this$opponent_info11 === void 0 ? void 0 : _this$opponent_info11.getPlayerCard().length) == 1) {
              this.bao1Response(uid);
            }
          }
        }

        removePlayer(uid) {
          let player = this.getPlayerByUID(uid);

          if (player != null) {
            player.setUserInfo(null);
          }

          this._playerInfo = this._playerInfo.filter(p => p.uid != uid);

          if (this.btn_begin.node.active) {
            this.btn_begin.node.active = false;
          }
        }

        prepareNewGame() {
          var _this$my_info16, _this$my_info17, _this$my_info18, _this$opponent_info12, _this$tienLenSettingP5;

          Tween.stopAllByTarget(this.node);
          Tween.stopAllByTarget(this.lbl_countdown.node);
          this.lbl_countdown.node.parent.active = false;
          (_this$my_info16 = this.my_info) === null || _this$my_info16 === void 0 ? void 0 : _this$my_info16.node.setPosition(new Vec3(6, -206, 0));
          (_this$my_info17 = this.my_info) === null || _this$my_info17 === void 0 ? void 0 : _this$my_info17.node.setScale(new Vec3(1, 1, 1));
          (_this$my_info18 = this.my_info) === null || _this$my_info18 === void 0 ? void 0 : _this$my_info18.resetUI();
          (_this$opponent_info12 = this.opponent_info) === null || _this$opponent_info12 === void 0 ? void 0 : _this$opponent_info12.resetUI();
          this._lastTurnCards = [];
          this.cardPooling.reset();

          if (!this.getIsHost() && this._state == GameState.WAITING) {
            var _this$tienLenSettingP4;

            if ((_this$tienLenSettingP4 = this.tienLenSettingPopup) === null || _this$tienLenSettingP4 === void 0 ? void 0 : _this$tienLenSettingP4.isAutoReady()) {
              this.sendReady();
            } else {
              this.btn_ready.node.active = true;
            }
          }

          (_this$tienLenSettingP5 = this.tienLenSettingPopup) === null || _this$tienLenSettingP5 === void 0 ? void 0 : _this$tienLenSettingP5.reset();
        }

        sendReady() {
          let dict = {};
          dict["cmd"] = GLOBAL_MESSAGE.INGAME_USER_READY;
          let data = [MessageRequest.RoomPlugin_Type, "Simms", GamePlayManager.roomID, dict];
          GameNetworkHandler.send(data);
        }

        getIsHost() {
          var _this$my_info19;

          return (_this$my_info19 = this.my_info) === null || _this$my_info19 === void 0 ? void 0 : _this$my_info19.isHost();
        }

        resetAllPlayerViewAction() {
          this._playerInfo = [];
        }

        show(fadeTime = 0.4) {
          MiniGameNodeController.getInstance().adjustPosition(GlobalVariables.TIENLEN);
          return super.show(fadeTime);
        }

      }, _defineProperty(_class3, "KEEP_MONEY", 50000), _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "my_info", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "opponent_info", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "userChatPopup", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "userInvitePopup", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btn_chat", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btn_exit", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btn_ready", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btn_begin", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btn_boluot", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btn_danhbai", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "btn_sam", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "btn_khongsam", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "lbl_countdown", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "spr_table", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_tables", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "spr_finishFx", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_finishFx", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "lbl_info", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "tienLenSettingPopup", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "cardPooling", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DragView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CCMiniGameRoot.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, Vec3, UITransform, tween, CCMiniGameRoot;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      tween = module.tween;
    }, function (module) {
      CCMiniGameRoot = module.CCMiniGameRoot;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3, _temp;

      cclegacy._RF.push({}, "d7e917bLldLbotowPX0QzUj", "DragView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let DragView = exports('default', (_dec = ccclass('DragView'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = _class3 = class DragView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "bounding_node", _descriptor, this);
        }

        onLoad() {
          this.node.on(Node.EventType.TOUCH_MOVE, e => {
            if (DragView.DISABLE) return;
            let boundingNode = this.bounding_node == null ? this.node : this.bounding_node;
            boundingNode.position = new Vec3(boundingNode.position.x + e.getDelta().x * 1, boundingNode.position.y + e.getDelta().y * 1, 0);
          });
          this.node.on(Node.EventType.TOUCH_END, () => {
            this.checkAndSnapToBorder();
          });
          this.node.on(Node.EventType.TOUCH_CANCEL, () => {
            this.checkAndSnapToBorder();
          });
        }

        checkAndSnapToBorder() {
          if (DragView.DISABLE) return;
          let boundingNode = this.bounding_node == null ? this.node : this.bounding_node;
          let boundingNodeTransform = boundingNode.getComponent(UITransform);
          let target = new Vec3(boundingNode.position);
          let scale = 0;

          if (target.x - boundingNodeTransform.contentSize.width * boundingNodeTransform.anchorPoint.x < -CCMiniGameRoot.WIN_SIZE_WIDTH / 2) {
            target.x = -CCMiniGameRoot.WIN_SIZE_WIDTH / 2 + boundingNodeTransform.contentSize.width * boundingNodeTransform.anchorPoint.x;
            target.x -= boundingNodeTransform.contentSize.width * (boundingNodeTransform.anchorPoint.x == 0 ? scale * 2 : scale);
          }

          if (target.x + boundingNodeTransform.contentSize.width * (1 - boundingNodeTransform.anchorPoint.x) > CCMiniGameRoot.WIN_SIZE_WIDTH / 2) {
            target.x = CCMiniGameRoot.WIN_SIZE_WIDTH / 2 - boundingNodeTransform.contentSize.width * (1 - boundingNodeTransform.anchorPoint.x);
            target.x += boundingNodeTransform.contentSize.width * (boundingNodeTransform.anchorPoint.x == 0 ? scale * 2 : scale);
          }

          if (target.y - boundingNodeTransform.contentSize.height * boundingNodeTransform.anchorPoint.y < -CCMiniGameRoot.WIN_SIZE_HEIGHT / 2) {
            target.y = -CCMiniGameRoot.WIN_SIZE_HEIGHT / 2 + boundingNodeTransform.contentSize.height * boundingNodeTransform.anchorPoint.y;
            target.y -= boundingNodeTransform.contentSize.height * scale;
          }

          if (target.y + boundingNodeTransform.contentSize.height * (1 - boundingNodeTransform.anchorPoint.y) > CCMiniGameRoot.WIN_SIZE_HEIGHT / 2) {
            target.y = CCMiniGameRoot.WIN_SIZE_HEIGHT / 2 - boundingNodeTransform.contentSize.height * (1 - boundingNodeTransform.anchorPoint.y);
            target.y += boundingNodeTransform.contentSize.height * scale;
          }

          let act = tween(boundingNode).to(0.2, {
            position: new Vec3(target.x, target.y, 0)
          });
          act.start();
        }

        setBoundingBox(node) {
          this.node.getComponent(UITransform).setContentSize(node.getComponent(UITransform).contentSize);
          this.checkAndSnapToBorder();
        }

      }, _defineProperty(_class3, "DISABLE", false), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "bounding_node", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import CCMiniGameRoot from "../CCMiniGameRoot";
      // import MiniGameNodeController from "../MiniGameNodeController";
      // import { GlobalVariables } from "./GlobalVariables";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class DragView extends cc.Component {
      //     @property(cc.Node)
      //     private bounding_node : cc.Node = null;
      // 
      //     public static DISABLE = false;
      //     onLoad() {
      //         this.node.on(cc.Node.EventType.TOUCH_MOVE, (e: cc.Event.EventTouch) => {
      //             if (DragView.DISABLE) return;
      //             let boundingNode = this.bounding_node == null ? this.node : this.bounding_node;
      //             boundingNode.position = new cc.Vec2(boundingNode.position.x + e.getDelta().x, boundingNode.position.y + e.getDelta().y);
      //         });
      //         this.node.on(cc.Node.EventType.TOUCH_END, () => {
      //             this.checkAndSnapToBorder();
      //         });
      //         this.node.on(cc.Node.EventType.TOUCH_CANCEL, () => {
      //             this.checkAndSnapToBorder();
      //         });
      //     }
      // 
      //     checkAndSnapToBorder() {
      //         if (DragView.DISABLE) return;
      // 
      //         let boundingNode = this.bounding_node == null ? this.node : this.bounding_node;
      //         let target = boundingNode.position;
      //         let scale = 1 - GlobalVariables.getScale();
      //         if (target.x - (boundingNode.width * boundingNode.getAnchorPoint().x) < -CCMiniGameRoot.WIN_SIZE_WIDTH / 2) {
      //             target.x = (-CCMiniGameRoot.WIN_SIZE_WIDTH/ 2) + (boundingNode.width * boundingNode.getAnchorPoint().x);
      //             target.x -= boundingNode.width * (boundingNode.getAnchorPoint().x == 0 ? scale * 2 : scale);
      //         }
      //         if (target.x + (boundingNode.width * (1 - boundingNode.getAnchorPoint().x)) > CCMiniGameRoot.WIN_SIZE_WIDTH / 2) {
      //             target.x = CCMiniGameRoot.WIN_SIZE_WIDTH/ 2 - (boundingNode.width * (1 - boundingNode.getAnchorPoint().x));
      //             target.x += boundingNode.width * (boundingNode.getAnchorPoint().x == 0 ? scale * 2 : scale);
      //         }
      //         if (target.y - (boundingNode.height * boundingNode.getAnchorPoint().y) < -CCMiniGameRoot.WIN_SIZE_HEIGHT / 2) {
      //             target.y = (-CCMiniGameRoot.WIN_SIZE_HEIGHT / 2) + (boundingNode.height * boundingNode.getAnchorPoint().y);
      //             target.y -= boundingNode.height * scale;
      //         } 
      //         if (target.y + (boundingNode.height * (1 - boundingNode.getAnchorPoint().y)) > CCMiniGameRoot.WIN_SIZE_HEIGHT / 2) {
      //             target.y = (CCMiniGameRoot.WIN_SIZE_HEIGHT / 2) - (boundingNode.height * (1 - boundingNode.getAnchorPoint().y));
      //             target.y += boundingNode.height * scale;
      //         }
      // 
      //         boundingNode.runAction(cc.moveTo(0.2, cc.v2(target.x, target.y)));
      //     }
      // 
      //     setBoundingBox(node : cc.Node) {
      //         this.node.setContentSize(node.getContentSize());
      //         this.checkAndSnapToBorder();
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuBetHistoryItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, _decorator, Component, Color;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      Color = module.Color;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "d89fb1VcehKh54M7zMGytZ3", "TaiXiuBetHistoryItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TaiXiuBetHistoryItemView = exports('default', (_dec = ccclass('TaiXiuBetHistoryItemView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec(_class = (_class2 = (_temp = class TaiXiuBetHistoryItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "txt_phien_title", _descriptor, this);

          _initializerDefineProperty(this, "txt_phien_time", _descriptor2, this);

          _initializerDefineProperty(this, "txt_phien_cuadat_tai", _descriptor3, this);

          _initializerDefineProperty(this, "txt_phien_cuadat_xiu", _descriptor4, this);

          _initializerDefineProperty(this, "txt_phien_ketqua", _descriptor5, this);

          _initializerDefineProperty(this, "txt_phien_tienthang", _descriptor6, this);
        }

        show(sessionID, time, eid, d1, d2, d3, taiBet, xiuBet, received) {
          this.txt_phien_title.string = "#" + sessionID;
          this.txt_phien_time.string = time;
          this.txt_phien_cuadat_tai.node.parent.active = taiBet > 0;
          this.txt_phien_cuadat_xiu.node.parent.active = xiuBet > 0;
          this.txt_phien_cuadat_tai.string = taiBet;
          this.txt_phien_cuadat_xiu.string = xiuBet;
          let ketqua = d1 + d2 + d3 > 10 ? "(Tài)" : "(Xỉu)";
          this.txt_phien_ketqua.string = d1 + "-" + d2 + "-" + d3 + " " + ketqua;
          this.txt_phien_tienthang.color = Color.YELLOW;
          this.txt_phien_tienthang.string = received;
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_title", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_time", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_cuadat_tai", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_cuadat_xiu", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_ketqua", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "txt_phien_tienthang", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuBetHistoryItemView extends cc.Component {
      //     @property(cc.Label)
      //     private txt_phien_title : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_time : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_cuadat : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_ketqua : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_datcuoc : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_tracancua : cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_phien_tienthang : cc.Label = null;
      // 
      //     public show(sessionID,time,eid,d1,d2,d3,bet,received,refund){
      //         this.txt_phien_title.string = "#" + sessionID;
      //         this.txt_phien_time.string = time;
      //         this.txt_phien_cuadat.string = eid == 1 ? "Tài" : "Xỉu";
      // 
      //         let ketqua = d1 + d2 + d3 > 10 ? "(Tài)" : "(Xỉu)";
      //         this.txt_phien_ketqua.string = d1 + "-" + d2 + "-" + d3 + "\n" + ketqua;
      // 
      //         this.txt_phien_datcuoc.string = bet;
      // 
      //         this.txt_phien_tracancua.node.color = refund > 0 ? cc.Color.RED : cc.Color.WHITE;
      //         this.txt_phien_tracancua.string = refund;
      // 
      //         this.txt_phien_tienthang.string = received;
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuSessionAnalyticsView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts', './MiniGameNetworkHandler.ts', './LoadingView.ts', './BlinkCmp.ts', './TaiXiuMessageHandler.ts', './TaiXiuPopupCmp.ts', './TaiXiuSessionAnalyticsItemView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Button, Label, Sprite, SpriteFrame, _decorator, UIOpacity, StringUtils, MessageRequest, MiniGameNetworkHandler, LoadingView, BlinkCmp, TaiXiuKhongCan_Message, TaiXiuPopupCmp, TaiXiuSessionAnalyticsItemView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MiniGameNetworkHandler = module.MiniGameNetworkHandler;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      BlinkCmp = module.default;
    }, function (module) {
      TaiXiuKhongCan_Message = module.TaiXiuKhongCan_Message;
    }, function (module) {
      TaiXiuPopupCmp = module.default;
    }, function (module) {
      TaiXiuSessionAnalyticsItemView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _temp;

      cclegacy._RF.push({}, "d8cf69tkyNOYL7LwxaU2vLm", "TaiXiuSessionAnalyticsView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class ThongKeDict {
        constructor() {
          _defineProperty(this, "refund", void 0);

          _defineProperty(this, "bet", void 0);

          _defineProperty(this, "displayName", void 0);

          _defineProperty(this, "time", void 0);
        }

      }

      let TaiXiuSessionAnalyticsView = exports('default', (_dec = ccclass('TaiXiuSessionAnalyticsView'), _dec2 = property([TaiXiuSessionAnalyticsItemView]), _dec3 = property([TaiXiuSessionAnalyticsItemView]), _dec4 = property(Button), _dec5 = property(BlinkCmp), _dec6 = property(BlinkCmp), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Sprite), _dec10 = property(Sprite), _dec11 = property(Sprite), _dec12 = property([SpriteFrame]), _dec13 = property(Button), _dec14 = property(Button), _dec15 = property(Button), _dec16 = property(Button), _dec17 = property(Label), _dec18 = property(Button), _dec19 = property(Button), _dec20 = property(Label), _dec21 = property(Label), _dec22 = property(Label), _dec23 = property(Label), _dec24 = property(Label), _dec(_class = (_class2 = (_temp = class TaiXiuSessionAnalyticsView extends TaiXiuPopupCmp {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "tai_item_views", _descriptor, this);

          _initializerDefineProperty(this, "xiu_item_views", _descriptor2, this);

          _initializerDefineProperty(this, "btn_close", _descriptor3, this);

          _initializerDefineProperty(this, "tai_blink_cmp", _descriptor4, this);

          _initializerDefineProperty(this, "xiu_blink_cmp", _descriptor5, this);

          _initializerDefineProperty(this, "txt_session_and_time", _descriptor6, this);

          _initializerDefineProperty(this, "txt_sum", _descriptor7, this);

          _initializerDefineProperty(this, "spr_d1", _descriptor8, this);

          _initializerDefineProperty(this, "spr_d2", _descriptor9, this);

          _initializerDefineProperty(this, "spr_d3", _descriptor10, this);

          _initializerDefineProperty(this, "sprFrame_dices", _descriptor11, this);

          _initializerDefineProperty(this, "btn_prev_session", _descriptor12, this);

          _initializerDefineProperty(this, "btn_next_session", _descriptor13, this);

          _initializerDefineProperty(this, "btn_prev_tai", _descriptor14, this);

          _initializerDefineProperty(this, "btn_next_tai", _descriptor15, this);

          _initializerDefineProperty(this, "lbl_page_tai", _descriptor16, this);

          _initializerDefineProperty(this, "btn_prev_xiu", _descriptor17, this);

          _initializerDefineProperty(this, "btn_next_xiu", _descriptor18, this);

          _initializerDefineProperty(this, "lbl_page_xiu", _descriptor19, this);

          _initializerDefineProperty(this, "lbl_datcuoc_tai", _descriptor20, this);

          _initializerDefineProperty(this, "lbl_tralai_tai", _descriptor21, this);

          _initializerDefineProperty(this, "lbl_datcuoc_xiu", _descriptor22, this);

          _initializerDefineProperty(this, "lbl_tralai_xiu", _descriptor23, this);

          _defineProperty(this, "currentPage_tai", 1);

          _defineProperty(this, "currentPage_xiu", 1);

          _defineProperty(this, "max_item", 7);

          _defineProperty(this, "_thongKeTai", []);

          _defineProperty(this, "_thongKeXiu", []);

          _defineProperty(this, "_aid", 1);

          _defineProperty(this, "_sessionID", "");
        }

        getPageTai() {
          return this._thongKeTai.length / this.max_item;
        }

        getPageXiu() {
          return this._thongKeXiu.length / this.max_item;
        }

        onLoad() {
          super.onLoad();
          this.original_scale = this.node.scale;
          this.btn_close.node.on("click", () => {
            this.hide();
          });
          this.btn_prev_session.node.on("click", () => {
            LoadingView.getInstance().show();
            let dict = {};
            dict["cmd"] = TaiXiuKhongCan_Message.SESSION_ANALYTIC;
            dict["sid"] = +this._sessionID - 1;
            dict["aid"] = this._aid;
            let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "taixiuUnbalancedPlugin", dict];
            MiniGameNetworkHandler.send(mes);
          });
          this.btn_next_session.node.on("click", () => {
            LoadingView.getInstance().show();
            let dict = {};
            dict["cmd"] = TaiXiuKhongCan_Message.SESSION_ANALYTIC;
            dict["sid"] = +this._sessionID + 1;
            dict["aid"] = this._aid;
            let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "taixiuUnbalancedPlugin", dict];
            MiniGameNetworkHandler.send(mes);
          });
          this.btn_prev_tai.node.on("click", () => {
            if (this.currentPage_tai - 1 > 0) {
              this.currentPage_tai -= 1;
              this.lbl_page_tai.string = this.currentPage_tai.toString();
            }

            this.showThongKe(1);
          });
          this.btn_next_tai.node.on("click", () => {
            if (this.currentPage_tai + 1 < this.getPageTai()) {
              this.currentPage_tai += 1;
              this.lbl_page_tai.string = this.currentPage_tai.toString();
            }

            this.showThongKe(1);
          });
          this.btn_prev_xiu.node.on("click", () => {
            if (this.currentPage_xiu - 1 > 0) {
              this.currentPage_xiu -= 1;
              this.lbl_page_xiu.string = this.currentPage_xiu.toString();
            }

            this.showThongKe(2);
          });
          this.btn_next_xiu.node.on("click", () => {
            if (this.currentPage_xiu + 1 < this.getPageTai()) {
              this.currentPage_xiu += 1;
              this.lbl_page_xiu.string = this.currentPage_xiu.toString();
            }

            this.showThongKe(2);
          });
        }

        showSessionAnalytics(thongKeArr, sessionID, d1, d2, d3, startTime, aid) {
          this._sessionID = sessionID;
          this._aid = aid;
          this.currentPage_tai = 1;
          this.currentPage_xiu = 1;
          this.lbl_page_tai.string = this.currentPage_tai.toString();
          this.lbl_page_xiu.string = this.currentPage_xiu.toString();
          let time = StringUtils.formatTimeJustDate(new Date(startTime));
          let sum = d1 + d2 + d3;

          if (sum > 10) {
            this.tai_blink_cmp.node.active = true;
            this.xiu_blink_cmp.node.active = false;
          } else {
            this.tai_blink_cmp.node.active = false;
            this.xiu_blink_cmp.node.active = true;
          }

          this.spr_d1.spriteFrame = this.sprFrame_dices[d1 - 1];
          this.spr_d2.spriteFrame = this.sprFrame_dices[d2 - 1];
          this.spr_d3.spriteFrame = this.sprFrame_dices[d3 - 1];
          this.txt_sum.string = sum;
          this.txt_session_and_time.string = "#" + sessionID + " (" + time + ")";
          this._thongKeTai = [];
          this._thongKeXiu = [];

          for (let i = 0; i < thongKeArr.length; i++) {
            let thongKeDict = thongKeArr[i];
            let refund = thongKeDict["rf"];
            let bet = thongKeDict["b"];
            let displayName = thongKeDict["dn"];
            let eid = thongKeDict["eid"];
            let betTime = thongKeDict["crt"];
            let betTimeStr = StringUtils.formatTimeJustHours(new Date(betTime));
            let newThongKe = new ThongKeDict();
            newThongKe.refund = refund;
            newThongKe.bet = bet;
            newThongKe.displayName = displayName;
            newThongKe.time = betTimeStr;

            if (eid == 1) {
              this._thongKeTai.push(newThongKe);
            } else {
              this._thongKeXiu.push(newThongKe);
            }
          }

          this.showThongKe(1);
          this.showThongKe(2);
          this.show();
        }

        showThongKe(eid) {
          if (eid == 1) {
            this.tai_item_views.forEach((item, index) => {
              let offset = (this.currentPage_tai - 1) * this.max_item;
              let info = this._thongKeTai[index + offset];

              if (info != null && info != undefined) {
                item.node.getComponent(UIOpacity).opacity = 255;
                item.show(info.time, info.displayName, info.bet, info.refund);
              } else {
                item.node.getComponent(UIOpacity).opacity = 1;
              }
            });
            let tongDat = 0;
            let tongTraLai = 0;

            this._thongKeTai.forEach(x => {
              tongDat += x.bet;
              tongTraLai += x.refund;
            });

            this.lbl_datcuoc_tai.string = StringUtils.formatNumber(tongDat);
            this.lbl_tralai_tai.string = StringUtils.formatNumber(tongTraLai);
          } else {
            this.xiu_item_views.forEach((item, index) => {
              let offset = (this.currentPage_xiu - 1) * this.max_item;
              let info = this._thongKeXiu[index + offset];

              if (info != null && info != undefined) {
                item.node.getComponent(UIOpacity).opacity = 255;
                item.show(info.time, info.displayName, info.bet, info.refund);
              } else {
                item.node.getComponent(UIOpacity).opacity = 1;
              }
            });
            let tongDat = 0;
            let tongTraLai = 0;

            this._thongKeXiu.forEach(x => {
              tongDat += x.bet;
              tongTraLai += x.refund;
            });

            this.lbl_datcuoc_xiu.string = StringUtils.formatNumber(tongDat);
            this.lbl_tralai_xiu.string = StringUtils.formatNumber(tongTraLai);
          }
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tai_item_views", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "xiu_item_views", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_close", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "tai_blink_cmp", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "xiu_blink_cmp", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "txt_session_and_time", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "txt_sum", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "spr_d1", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "spr_d2", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "spr_d3", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_dices", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "btn_prev_session", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "btn_next_session", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "btn_prev_tai", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "btn_next_tai", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "lbl_page_tai", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "btn_prev_xiu", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "btn_next_xiu", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "lbl_page_xiu", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "lbl_datcuoc_tai", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "lbl_tralai_tai", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "lbl_datcuoc_xiu", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "lbl_tralai_xiu", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { TaiXiu_Message } from "../../Network/MiniGame/TaiXiuMessageHandler";
      // import { MessageRequest, MiniGameNetworkHandler } from "../../Network/MiniGameNetworkHandler";
      // import LoadingView from "../../Utils/LoadingView";
      // import { StringUtils } from "../../Utils/StringUtils";
      // import BlinkCmp from "./BlinkCmp";
      // import TaiXiuPopupCmp from "./TaiXiuPopupCmp";
      // import TaiXiuSessionAnalyticsItemView from "./TaiXiuSessionAnalyticsItemView";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // class ThongKeDict {
      //     public refund;
      //     public bet;
      //     public displayName;
      //     public time;
      // };
      // 
      // @ccclass
      // export default class TaiXiuSessionAnalyticsView extends TaiXiuPopupCmp {
      //     @property([TaiXiuSessionAnalyticsItemView])
      //     private tai_item_views: TaiXiuSessionAnalyticsItemView[] = [];
      // 
      //     @property([TaiXiuSessionAnalyticsItemView])
      //     private xiu_item_views: TaiXiuSessionAnalyticsItemView[] = [];
      // 
      //     @property(cc.Button)
      //     private btn_close: cc.Button = null;
      // 
      //     @property(BlinkCmp)
      //     private tai_blink_cmp: BlinkCmp = null;
      // 
      //     @property(BlinkCmp)
      //     private xiu_blink_cmp: BlinkCmp = null;
      // 
      //     @property(cc.Label)
      //     private txt_session_and_time: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private txt_sum: cc.Label = null;
      // 
      //     @property(cc.Sprite)
      //     private spr_d1: cc.Sprite = null;
      // 
      //     @property(cc.Sprite)
      //     private spr_d2: cc.Sprite = null;
      // 
      //     @property(cc.Sprite)
      //     private spr_d3: cc.Sprite = null;
      // 
      //     @property([cc.SpriteFrame])
      //     private sprFrame_dices: cc.SpriteFrame[] = [];
      // 
      //     @property(cc.Button)
      //     private btn_prev_session: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_next_session: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_prev_tai: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_next_tai: cc.Button = null;
      // 
      //     @property(cc.Label)
      //     private lbl_page_tai: cc.Label = null;
      // 
      //     @property(cc.Button)
      //     private btn_prev_xiu: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_next_xiu: cc.Button = null;
      // 
      //     @property(cc.Label)
      //     private lbl_page_xiu: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private lbl_datcuoc_tai: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private lbl_tralai_tai: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private lbl_datcuoc_xiu: cc.Label = null;
      // 
      //     @property(cc.Label)
      //     private lbl_tralai_xiu: cc.Label = null;
      // 
      //     private currentPage_tai = 1;
      // 
      //     private currentPage_xiu = 1;
      // 
      //     private max_item = 7;
      // 
      //     private _thongKeTai: ThongKeDict[] = [];
      // 
      //     private _thongKeXiu: ThongKeDict[] = [];
      // 
      //     private _aid = 1;
      // 
      //     private _sessionID = "";
      // 
      //     getPageTai() {
      //         return this._thongKeTai.length / this.max_item;
      //     }
      // 
      //     getPageXiu() {
      //         return this._thongKeXiu.length / this.max_item;
      //     }
      // 
      //     onLoad() {
      //         super.onLoad();
      //         
      //         this.original_scale = this.node.scale;
      //         this.btn_close.node.on("click", () => {
      //             this.hide();
      //         });
      // 
      //         this.btn_prev_session.node.on("click", () => {
      //             LoadingView.getInstance().show();
      // 
      //             let dict = {};
      //             dict["cmd"] = TaiXiu_Message.SESSION_ANALYTIC;
      //             dict["sid"] = +this._sessionID - 1;
      //             dict["aid"] = this._aid;
      // 
      //             let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "taixiuPlugin", dict];
      //             MiniGameNetworkHandler.send(mes);
      //         });
      // 
      //         this.btn_next_session.node.on("click", () => {
      //             LoadingView.getInstance().show();
      //             
      //             let dict = {};
      //             dict["cmd"] = TaiXiu_Message.SESSION_ANALYTIC;
      //             dict["sid"] = +this._sessionID + 1;
      //             dict["aid"] = this._aid;
      // 
      //             let mes = [MessageRequest.ZonePlugin_Type, "MiniGame", "taixiuPlugin", dict];
      //             MiniGameNetworkHandler.send(mes);
      //         });
      // 
      //         this.btn_prev_tai.node.on("click", () => {
      //             if (this.currentPage_tai - 1 > 0) {
      //                 this.currentPage_tai -= 1;
      //                 this.lbl_page_tai.string = this.currentPage_tai.toString();
      //             }
      // 
      //             this.showThongKe(1);
      //         });
      // 
      //         this.btn_next_tai.node.on("click", () => {
      //             if (this.currentPage_tai + 1 < this.getPageTai()) {
      //                 this.currentPage_tai += 1;
      //                 this.lbl_page_tai.string = this.currentPage_tai.toString();
      //             }
      //             this.showThongKe(1);
      //         });
      // 
      //         this.btn_prev_xiu.node.on("click", () => {
      //             if (this.currentPage_xiu - 1 > 0) {
      //                 this.currentPage_xiu -= 1;
      //                 this.lbl_page_xiu.string = this.currentPage_xiu.toString();
      //             }
      //             this.showThongKe(2);
      //         });
      // 
      //         this.btn_next_xiu.node.on("click", () => {
      //             if (this.currentPage_xiu + 1 < this.getPageTai()) {
      //                 this.currentPage_xiu += 1;
      //                 this.lbl_page_xiu.string = this.currentPage_xiu.toString();
      //             }
      //             this.showThongKe(2);
      //         });
      //     }
      // 
      //     public showSessionAnalytics(thongKeArr: [], sessionID, d1, d2, d3, startTime,aid) {
      //         this._sessionID = sessionID;
      //         this._aid = aid;
      //         this.currentPage_tai = 1;
      //         this.currentPage_xiu = 1;
      //         this.lbl_page_tai.string = this.currentPage_tai.toString();
      //         this.lbl_page_xiu.string = this.currentPage_xiu.toString();
      //         let time = StringUtils.formatTimeJustDate(new Date(startTime));
      //         let sum = d1 + d2 + d3;
      //         if (sum > 10) {
      //             this.tai_blink_cmp.node.active = true;
      //             this.xiu_blink_cmp.node.active = false;
      //         } else {
      //             this.tai_blink_cmp.node.active  = false;
      //             this.xiu_blink_cmp.node.active  = true;
      //         }
      // 
      //         this.spr_d1.spriteFrame = this.sprFrame_dices[d1 - 1];
      //         this.spr_d2.spriteFrame = this.sprFrame_dices[d2 - 1];
      //         this.spr_d3.spriteFrame = this.sprFrame_dices[d3 - 1];
      // 
      //         this.txt_sum.string = sum;
      // 
      //         this.txt_session_and_time.string = "#" + sessionID + " (" + time + ")";
      // 
      //         this._thongKeTai = [];
      //         this._thongKeXiu = [];
      // 
      //         for (let i = 0; i < thongKeArr.length; i++) {
      //             let thongKeDict = thongKeArr[i];
      // 
      //             let refund = thongKeDict["rf"];
      //             let bet = thongKeDict["b"];
      //             let displayName = thongKeDict["dn"];
      //             let eid = thongKeDict["eid"];
      //             let betTime = thongKeDict["crt"];
      //             let betTimeStr = StringUtils.formatTimeJustHours(new Date(betTime));
      // 
      //             let newThongKe = new ThongKeDict();
      //             newThongKe.refund = refund;
      //             newThongKe.bet = bet;
      //             newThongKe.displayName = displayName;
      //             newThongKe.time = betTimeStr;
      // 
      //             if (eid == 1) {
      //                 this._thongKeTai.push(newThongKe);
      //             }
      //             else {
      //                 this._thongKeXiu.push(newThongKe);
      //             }
      //         }
      // 
      //         this.showThongKe(1);
      //         this.showThongKe(2);
      // 
      //         this.show();
      //     }
      // 
      //     public showThongKe(eid) {
      //         if(eid == 1){
      //             this.tai_item_views.forEach((item, index) => {
      //                 let offset = (this.currentPage_tai - 1) * this.max_item;
      //                 let info = this._thongKeTai[index + offset];
      //                 if (info != null && info != undefined) {
      //                     item.node.opacity = 255;
      //                     item.show(info.time, info.displayName, info.bet, info.refund);
      //                 } else {
      //                     item.node.opacity = 0;
      //                 }
      //             });
      // 
      //             let tongDat = 0;
      //             let tongTraLai = 0;
      //             this._thongKeTai.forEach(x => {
      //                 tongDat += x.bet;
      //                 tongTraLai += x.refund;
      //             });
      // 
      //             this.lbl_datcuoc_tai.string = StringUtils.formatNumber(tongDat);
      //             this.lbl_tralai_tai.string = StringUtils.formatNumber(tongTraLai);
      //         }else{
      //             this.xiu_item_views.forEach((item, index) => {
      //                 let offset = (this.currentPage_xiu - 1) * this.max_item;
      //                 let info = this._thongKeXiu[index + offset];
      //                 if (info != null && info != undefined) {
      //                     item.node.opacity = 255;
      //                     item.show(info.time, info.displayName, info.bet, info.refund);
      //                 } else {
      //                     item.node.opacity = 0;
      //                 }
      //             });
      // 
      //             let tongDat = 0;
      //             let tongTraLai = 0;
      //             this._thongKeXiu.forEach(x => {
      //                 tongDat += x.bet;
      //                 tongTraLai += x.refund;
      //             });
      // 
      //             this.lbl_datcuoc_xiu.string = StringUtils.formatNumber(tongDat);
      //             this.lbl_tralai_xiu.string = StringUtils.formatNumber(tongTraLai);
      //         }
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TransitionFadeScreen.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Component, tween, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      tween = module.tween;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "db595Fmuo1Cs4M2svYB9u3m", "TransitionFadeScreen", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TransitionFadeScreen = exports('TransitionFadeScreen', (_dec = ccclass('TransitionFadeScreen'), _dec(_class = class TransitionFadeScreen extends Component {
        static start(from, to, fadeTime, delayTime = 0) {
          from.hide(fadeTime).delay(delayTime).then(tween().call(() => {
            to.setPreviousGameView(from);
            to.show().start();
          })).start();
        }

      }) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './GameConfigManager.ts', './GamePlatformManager.ts', './NotiView.ts', './LoadingView.ts', './GameHTTPNetwork.ts', './MD5Algorithm.ts', './PopupController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, EditBox, Button, _decorator, log, CommonPopup, GameConfigManager, GamePlatformManager, NotiView, LoadingView, GameHTTPNetwork, MD5Algorithm, PopupController, GamePlayManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      EditBox = module.EditBox;
      Button = module.Button;
      _decorator = module._decorator;
      log = module.log;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      GamePlatformManager = module.GamePlatformManager;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      MD5Algorithm = module.MD5Algorithm;
    }, function (module) {
      PopupController = module.PopupController;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "dbf65Ib9VVNep+kJVFcTLRi", "LoginPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let LoginPopup = exports('LoginPopup', (_dec = ccclass('LoginPopup'), _dec2 = property(EditBox), _dec3 = property(EditBox), _dec4 = property(Button), _dec5 = property(Button), _dec(_class = (_class2 = (_temp = class LoginPopup extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "edtBox_username", _descriptor, this);

          _initializerDefineProperty(this, "edtBox_password", _descriptor2, this);

          _initializerDefineProperty(this, "btn_login", _descriptor3, this);

          _initializerDefineProperty(this, "btn_register", _descriptor4, this);
        }

        onLoad() {
          var _this$btn_login, _this$btn_register;

          super.onLoad();
          (_this$btn_login = this.btn_login) === null || _this$btn_login === void 0 ? void 0 : _this$btn_login.node.on("click", () => {
            this.loginAcc();
          });
          (_this$btn_register = this.btn_register) === null || _this$btn_register === void 0 ? void 0 : _this$btn_register.node.on("click", () => {
            var _PopupController$getI;

            (_PopupController$getI = PopupController.getInstance()) === null || _PopupController$getI === void 0 ? void 0 : _PopupController$getI.showRegisterPopup();
          });
        }

        loginAcc() {
          var _this$edtBox_username, _this$edtBox_password, _username, _username2;

          let username = (_this$edtBox_username = this.edtBox_username) === null || _this$edtBox_username === void 0 ? void 0 : _this$edtBox_username.string;
          let password = (_this$edtBox_password = this.edtBox_password) === null || _this$edtBox_password === void 0 ? void 0 : _this$edtBox_password.string;

          if (((_username = username) === null || _username === void 0 ? void 0 : _username.length) == 0 || (password === null || password === void 0 ? void 0 : password.length) == 0) {
            var _NotiView$getInstance;

            (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage("Vui lòng điền đủ thông tin.");
            return;
          }

          if ((password === null || password === void 0 ? void 0 : password.length) < 6 || (password === null || password === void 0 ? void 0 : password.length) > 15) {
            var _NotiView$getInstance2;

            (_NotiView$getInstance2 = NotiView.getInstance()) === null || _NotiView$getInstance2 === void 0 ? void 0 : _NotiView$getInstance2.showMessage("Mật khẩu phải từ 6 tới 15 ký tự.");
            return;
          }

          username = (_username2 = username) === null || _username2 === void 0 ? void 0 : _username2.toLowerCase();
          let url = GameConfigManager.IDdomainURL;
          let platformID = GamePlatformManager.getPlatformID();
          let deviceId = GamePlatformManager.getDeviceID();
          let advertiserID = "";
          let hash = username;
          hash += password;
          hash += platformID.toString();
          hash += deviceId;
          hash += GameConfigManager.hashSecretKey;
          hash = new MD5Algorithm().encrypt(hash);
          let brand = GameConfigManager.brand;
          let jsonData = {};
          jsonData["command"] = "loginHash";
          jsonData["username"] = username;
          jsonData["password"] = password;
          jsonData["platformId"] = platformID;
          jsonData["advId"] = advertiserID;
          jsonData["deviceId"] = deviceId;
          jsonData["hash"] = hash;
          jsonData["brand"] = brand;
          LoadingView.getInstance().show(); //convert to json string

          let strPostData = JSON.stringify(jsonData);
          GameHTTPNetwork.sendPOST(url, strPostData, resp => {
            this.loginCompleted(username, password, resp);
          }, false, true);
        }

        loginCompleted(username, password, response) {
          log(response);
          let doc = JSON.parse(response);
          let status = doc["status"];

          if (status == 0) {
            let data = doc["data"];
            let signature = data["signature"];
            let accessToken = data["accessToken"];
            let refreshToken = data["refreshToken"];
            let info = data["info"];
            let infoJsonString = JSON.stringify(info);
            GameConfigManager.signature = signature;
            GameConfigManager.loginInfo = infoJsonString;
            GameConfigManager.username = username;
            GameConfigManager.password = password;
            GameConfigManager.serverAccessToken = accessToken;
            GameConfigManager.serverRefreshToken = refreshToken;
            localStorage.setItem(GameConfigManager.LOGGED_USER_NAME, username);
            localStorage.setItem(GameConfigManager.LOGGED_PASSWORD, password);
            GamePlayManager.login();
          } else {
            var _NotiView$getInstance3;

            let mes = "";
            let data = doc["data"];
            mes = data["message"];
            (_NotiView$getInstance3 = NotiView.getInstance()) === null || _NotiView$getInstance3 === void 0 ? void 0 : _NotiView$getInstance3.showMessage(mes);
            LoadingView.getInstance().hide();
          }
        }

        show() {
          super.show();

          if (localStorage.getItem(GameConfigManager.LOGGED_USER_NAME) != null) {
            this.edtBox_username.string = localStorage.getItem(GameConfigManager.LOGGED_USER_NAME);
          }

          if (localStorage.getItem(GameConfigManager.LOGGED_PASSWORD) != null) {
            this.edtBox_password.string = localStorage.getItem(GameConfigManager.LOGGED_PASSWORD);
          }
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "edtBox_username", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "edtBox_password", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_login", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_register", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuBetHistoryView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './StringUtils.ts', './TaiXiuBetHistoryItemView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Button, Label, _decorator, UIOpacity, CommonPopup, StringUtils, TaiXiuBetHistoryItemView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      TaiXiuBetHistoryItemView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "de8fbuzaq1Fwo3aar11ArP2", "TaiXiuBetHistoryView", undefined);

      const {
        ccclass,
        property
      } = _decorator;

      class TaiXiuBetResult {
        constructor() {
          _defineProperty(this, "taiBet", 0);

          _defineProperty(this, "xiuBet", 0);

          _defineProperty(this, "bet", void 0);

          _defineProperty(this, "refunded", void 0);

          _defineProperty(this, "received", void 0);

          _defineProperty(this, "eid", void 0);

          _defineProperty(this, "d1", void 0);

          _defineProperty(this, "d2", void 0);

          _defineProperty(this, "d3", void 0);

          _defineProperty(this, "sessionID", void 0);

          _defineProperty(this, "betTime", void 0);
        }

      }

      let TaiXiuBetHistoryView = exports('default', (_dec = ccclass('TaiXiuBetHistoryView'), _dec2 = property([TaiXiuBetHistoryItemView]), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(Label), _dec(_class = (_class2 = (_temp = class TaiXiuBetHistoryView extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "item_views", _descriptor, this);

          _initializerDefineProperty(this, "btn_prev", _descriptor2, this);

          _initializerDefineProperty(this, "btn_next", _descriptor3, this);

          _initializerDefineProperty(this, "lbl_page", _descriptor4, this);

          _defineProperty(this, "_bets", []);

          _defineProperty(this, "currentPage", 1);

          _defineProperty(this, "max_item", 6);
        }

        getPagesCount() {
          let a = this._bets.length / this.max_item;
          let b = this._bets.length % this.max_item > 0 ? 1 : 0;
          return a + b;
        }

        onLoad() {
          super.onLoad();
          this.btn_prev.node.on("click", () => {
            if (this.currentPage - 1 > 0) {
              this.currentPage -= 1;
              this.lbl_page.string = this.currentPage.toString();
            }

            this.showBetHistory(false);
          });
          this.btn_next.node.on("click", () => {
            if (this.currentPage + 1 < this.getPagesCount()) {
              this.currentPage += 1;
              this.lbl_page.string = this.currentPage.toString();
            }

            this.showBetHistory(false);
          });
        }

        goToFirstPage() {
          this.currentPage = 1;
          this.lbl_page.string = this.currentPage.toString();
        }

        fetchHistory(betHistory, aid) {
          this.goToFirstPage();
          this._bets = [];

          for (let i = 0; i < betHistory.length; i++) {
            let historyDict = betHistory[i];
            let d1 = historyDict["d1"];
            let d2 = historyDict["d2"];
            let d3 = historyDict["d3"];
            let sessionID = historyDict["sid"];
            let received = historyDict["wm"];
            let betsArr = historyDict["bs"];
            let betTime = historyDict["crt"];
            let date = new Date(betTime);
            let betTimeStr = StringUtils.formatTime(date);
            let newResult = new TaiXiuBetResult();
            newResult.sessionID = sessionID;
            newResult.d1 = d1;
            newResult.d2 = d2;
            newResult.d3 = d3;

            for (let j = 0; j < betsArr.length; j++) {
              let betDict = betsArr[j];
              let bet = betDict["b"];
              let eid = betDict["eid"];

              if (eid == 1) {
                newResult.taiBet = bet;
              } else {
                newResult.xiuBet = bet;
              }
            }

            newResult.received = received;
            newResult.betTime = betTimeStr;

            this._bets.push(newResult);
          }

          this.showBetHistory();
        }

        showBetHistory(hasFx = true) {
          this.item_views.forEach((item, index) => {
            let offset = (this.currentPage - 1) * this.max_item;
            let info = this._bets[index + offset];

            if (info != null && info != undefined) {
              item.node.getComponent(UIOpacity).opacity = 255;
              item.show(info.sessionID, info.betTime, info.eid, info.d1, info.d2, info.d3, info.taiBet, info.xiuBet, info.received);
            } else {
              item.node.getComponent(UIOpacity).opacity = 1;
            }
          });

          if (hasFx) {
            this.show();
          }
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item_views", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_prev", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_next", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbl_page", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { StringUtils } from "../../Utils/StringUtils";
      // import TaiXiuBetHistoryItemView from "./TaiXiuBetHistoryItemView";
      // import TaiXiuPopupCmp from "./TaiXiuPopupCmp";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // class TaiXiuBetResult {
      //     public bet;
      //     public refunded;
      //     public received;
      // 
      //     public eid;
      // 
      //     public d1;
      //     public d2;
      //     public d3;
      //     public sessionID;
      // 
      //     public betTime;
      // };
      // 
      // @ccclass
      // export default class TaiXiuBetHistoryView extends TaiXiuPopupCmp {
      //     @property([TaiXiuBetHistoryItemView])
      //     private item_views: TaiXiuBetHistoryItemView[] = [];
      // 
      //     @property(cc.Button)
      //     private btn_close: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_prev: cc.Button = null;
      // 
      //     @property(cc.Button)
      //     private btn_next: cc.Button = null;
      // 
      //     @property(cc.Label)
      //     private lbl_page: cc.Label = null;
      // 
      //     private _bets: TaiXiuBetResult[] = [];
      // 
      //     private currentPage = 1;
      // 
      //     private max_item = 6;
      // 
      //     getPagesCount() {
      //         let a = this._bets.length / this.max_item;
      //         let b = this._bets.length % this.max_item > 0 ? 1 : 0;
      //         return a + b;
      //     }
      // 
      //     onLoad() {
      //         super.onLoad();
      //         this.original_scale = this.node.scale;
      //         this.btn_close.node.on("click", () => {
      //             this.hide();
      //         });
      // 
      //         this.btn_prev.node.on("click", () => {
      //             if (this.currentPage - 1 > 0) {
      //                 this.currentPage -= 1;
      //                 this.lbl_page.string = this.currentPage.toString();
      //             }
      //             this.showBetHistory();
      //         });
      // 
      //         this.btn_next.node.on("click", () => {
      //             if (this.currentPage + 1 < this.getPagesCount()) {
      //                 this.currentPage += 1;
      //                 this.lbl_page.string = this.currentPage.toString();
      //             }
      //             this.showBetHistory();
      //         });
      //     }
      // 
      //     goToFirstPage() {
      //         this.currentPage = 1;
      //         this.lbl_page.string = this.currentPage.toString();
      //     }
      // 
      //     public fetchHistory(betHistory, aid) {
      //         this.goToFirstPage();
      // 
      //         this._bets = [];
      //         for (let i = 0; i < betHistory.length; i++) {
      //             let historyDict = betHistory[i];
      // 
      //             let d1 = historyDict["d1"];
      //             let d2 = historyDict["d2"];
      //             let d3 = historyDict["d3"];
      //             let sessionID = historyDict["sid"];
      // 
      //             let eid = historyDict["eid"];
      // 
      //             let bet = historyDict["b"];
      //             let refunded = historyDict["rf"];
      //             let received = historyDict["po"];
      // 
      //             let betTime = historyDict["crt"];
      //             let date = new Date(betTime);
      //             let betTimeStr = StringUtils.formatTime(date);
      // 
      //             let newResult: TaiXiuBetResult = new TaiXiuBetResult();
      //             newResult.sessionID = sessionID;
      //             newResult.d1 = d1;
      //             newResult.d2 = d2;
      //             newResult.d3 = d3;
      //             newResult.bet = bet;
      //             newResult.refunded = refunded;
      //             newResult.received = received;
      //             newResult.betTime = betTimeStr;
      //             newResult.eid = eid;
      // 
      //             this._bets.push(newResult);
      //         }
      //         this.showBetHistory();
      //     }
      // 
      //     public showBetHistory() {
      //         this.item_views.forEach((item, index) => {
      //             let offset = (this.currentPage - 1) * this.max_item;
      //             let info = this._bets[index + offset];
      //             if (info != null && info != undefined) {
      //                 item.node.opacity = 255;
      //                 item.show(info.sessionID, info.betTime, info.eid, info.d1, info.d2, info.d3, info.bet, info.received, info.refunded);
      //             } else {
      //                 item.node.opacity = 0;
      //             }
      //         });
      // 
      //         this.show();
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XocDiaSoiCauPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './SettingPopup.ts', './ScaleCmp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Label, Sprite, SpriteFrame, _decorator, SettingPopup, ScaleCmp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
    }, function (module) {
      SettingPopup = module.SettingPopup;
    }, function (module) {
      ScaleCmp = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "e5ca52IlB9KspGBbP8/qmiu", "XocDiaSoiCauPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let XocDiaSoiCauPopup = exports('XocDiaSoiCauPopup', (_dec = ccclass('XocDiaSoiCauPopup'), _dec2 = property([Label]), _dec3 = property([Sprite]), _dec4 = property(SpriteFrame), _dec5 = property(SpriteFrame), _dec(_class = (_class2 = (_temp = class XocDiaSoiCauPopup extends SettingPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lbl_stats", _descriptor, this);

          _initializerDefineProperty(this, "cau_items", _descriptor2, this);

          _initializerDefineProperty(this, "sprFrame_chan", _descriptor3, this);

          _initializerDefineProperty(this, "sprFrame_le", _descriptor4, this);
        }

        updateBangSoiCau(chan, le, danhSachSoiCau) {
          this.lbl_stats[0].string = (chan < 10 ? "0" : "") + chan;
          this.lbl_stats[1].string = (le < 10 ? "0" : "") + le;
          this.cau_items.forEach((item, index) => {
            let scaleCmp = item.getComponent(ScaleCmp);

            if (index < danhSachSoiCau.length) {
              if (index == danhSachSoiCau.length - 1) {
                scaleCmp.enabled = true;
                scaleCmp.run();
              } else {
                scaleCmp.stop();
                scaleCmp.enabled = false;
              }

              item.enabled = true;
              item.spriteFrame = danhSachSoiCau[index] ? this.sprFrame_chan : this.sprFrame_le;
            } else {
              item.enabled = false;
              scaleCmp.stop();
              scaleCmp.enabled = false;
            }
          });
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbl_stats", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cau_items", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_chan", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_le", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuSessionHistoryResultItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, SpriteFrame, Sprite, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "e903auLXKRF1KcKxPmN0bN+", "TaiXiuSessionHistoryResultItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TaiXiuSessionHistoryResultItemView = exports('default', (_dec = ccclass('TaiXiuSessionHistoryResultItemView'), _dec2 = property([SpriteFrame]), _dec3 = property(Sprite), _dec(_class = (_class2 = (_temp = class TaiXiuSessionHistoryResultItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "sprFrame_ico_result", _descriptor, this);

          _initializerDefineProperty(this, "spr_result", _descriptor2, this);
        }

        show(sum) {//if(sum > 10) this.spr_result.spriteFrame = this.sprFrame_ico_result[0];
          //else this.spr_result.spriteFrame = this.sprFrame_ico_result[1];
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_ico_result", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spr_result", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { StringUtils } from "../../Utils/StringUtils";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuSessionHistoryResultItemView extends cc.Component {
      //     @property([cc.SpriteFrame])
      //     private sprFrame_ico_result : cc.SpriteFrame[] = [];
      // 
      //     @property(cc.Sprite)
      //     private spr_result : cc.Sprite = null;
      // 
      //     public show(sum){
      //         if(sum > 10) this.spr_result.spriteFrame = this.sprFrame_ico_result[0];
      //         else this.spr_result.spriteFrame = this.sprFrame_ico_result[1];
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RegisterPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './GameConfigManager.ts', './StringUtils.ts', './GamePlatformManager.ts', './NotiView.ts', './LoadingView.ts', './GameHTTPNetwork.ts', './MD5Algorithm.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, EditBox, Button, _decorator, log, CommonPopup, GameConfigManager, StringUtils, GamePlatformManager, NotiView, LoadingView, GameHTTPNetwork, MD5Algorithm, GamePlayManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      EditBox = module.EditBox;
      Button = module.Button;
      _decorator = module._decorator;
      log = module.log;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      GamePlatformManager = module.GamePlatformManager;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      MD5Algorithm = module.MD5Algorithm;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "e96f9pCGhBP/YY9iwyLs99/", "RegisterPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let RegisterPopup = exports('RegisterPopup', (_dec = ccclass('RegisterPopup'), _dec2 = property(EditBox), _dec3 = property(EditBox), _dec4 = property(EditBox), _dec5 = property(EditBox), _dec6 = property(Button), _dec(_class = (_class2 = (_temp = class RegisterPopup extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "edtBox_username", _descriptor, this);

          _initializerDefineProperty(this, "edtBox_password", _descriptor2, this);

          _initializerDefineProperty(this, "edtBox_retype_password", _descriptor3, this);

          _initializerDefineProperty(this, "edtBox_displayname", _descriptor4, this);

          _initializerDefineProperty(this, "btn_register", _descriptor5, this);
        }

        onLoad() {
          var _this$btn_register;

          super.onLoad();
          (_this$btn_register = this.btn_register) === null || _this$btn_register === void 0 ? void 0 : _this$btn_register.node.on("click", () => {
            this.registerAcc();
          });
        }

        registerAcc() {
          var _this$edtBox_username, _this$edtBox_password, _this$edtBox_retype_p, _this$edtBox_displayn, _username, _username2, _username3, _displayName, _username4, _displayName2;

          let username = (_this$edtBox_username = this.edtBox_username) === null || _this$edtBox_username === void 0 ? void 0 : _this$edtBox_username.string;
          let password = (_this$edtBox_password = this.edtBox_password) === null || _this$edtBox_password === void 0 ? void 0 : _this$edtBox_password.string;
          let reTypepassword = (_this$edtBox_retype_p = this.edtBox_retype_password) === null || _this$edtBox_retype_p === void 0 ? void 0 : _this$edtBox_retype_p.string;
          let displayName = (_this$edtBox_displayn = this.edtBox_displayname) === null || _this$edtBox_displayn === void 0 ? void 0 : _this$edtBox_displayn.string;

          if (((_username = username) === null || _username === void 0 ? void 0 : _username.length) == 0 || (password === null || password === void 0 ? void 0 : password.length) == 0 || (reTypepassword === null || reTypepassword === void 0 ? void 0 : reTypepassword.length) == 0) {
            var _NotiView$getInstance;

            (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage("Vui lòng điền đủ thông tin.");
            return;
          }

          if (((_username2 = username) === null || _username2 === void 0 ? void 0 : _username2.length) == 0 || (password === null || password === void 0 ? void 0 : password.length) == 0 || (reTypepassword === null || reTypepassword === void 0 ? void 0 : reTypepassword.length) == 0) {
            var _NotiView$getInstance2;

            (_NotiView$getInstance2 = NotiView.getInstance()) === null || _NotiView$getInstance2 === void 0 ? void 0 : _NotiView$getInstance2.showMessage("Vui lòng điền đủ thông tin.");
            return;
          }

          if ((password === null || password === void 0 ? void 0 : password.length) < 6 || (password === null || password === void 0 ? void 0 : password.length) > 15) {
            var _NotiView$getInstance3;

            (_NotiView$getInstance3 = NotiView.getInstance()) === null || _NotiView$getInstance3 === void 0 ? void 0 : _NotiView$getInstance3.showMessage("Mật khẩu phải từ 6 tới 15 ký tự.");
            return;
          }

          if (password != reTypepassword) {
            var _NotiView$getInstance4;

            (_NotiView$getInstance4 = NotiView.getInstance()) === null || _NotiView$getInstance4 === void 0 ? void 0 : _NotiView$getInstance4.showMessage("Mật khẩu không khớp.");
            return;
          }

          if (((_username3 = username) === null || _username3 === void 0 ? void 0 : _username3.length) < 6) {
            var _NotiView$getInstance5;

            (_NotiView$getInstance5 = NotiView.getInstance()) === null || _NotiView$getInstance5 === void 0 ? void 0 : _NotiView$getInstance5.showMessage("Tên đăng nhập cần ít nhất 6 ký tự.");
            return;
          }

          if (((_displayName = displayName) === null || _displayName === void 0 ? void 0 : _displayName.length) <= 0) {
            var _NotiView$getInstance6;

            (_NotiView$getInstance6 = NotiView.getInstance()) === null || _NotiView$getInstance6 === void 0 ? void 0 : _NotiView$getInstance6.showMessage("Vui lòng nhập tên hiển thị!");
            return;
          }

          if (displayName == username) {
            var _NotiView$getInstance7;

            (_NotiView$getInstance7 = NotiView.getInstance()) === null || _NotiView$getInstance7 === void 0 ? void 0 : _NotiView$getInstance7.showMessage("Tên hiển thị không được trùng với tên đăng nhập!");
            return;
          }

          if (!StringUtils.isNonAccent(username) || !StringUtils.isNonAccent(displayName)) {
            var _NotiView$getInstance8;

            (_NotiView$getInstance8 = NotiView.getInstance()) === null || _NotiView$getInstance8 === void 0 ? void 0 : _NotiView$getInstance8.showMessage("Tên hiển thị hoặc tên đăng nhập không được có dấu!");
            return;
          }

          username = (_username4 = username) === null || _username4 === void 0 ? void 0 : _username4.toLowerCase();
          displayName = (_displayName2 = displayName) === null || _displayName2 === void 0 ? void 0 : _displayName2.toLowerCase();
          let url = GameConfigManager.IDdomainURL;
          let platformID = GamePlatformManager.getPlatformID();
          let deviceId = GamePlatformManager.getDeviceID();
          let osVersion = GamePlatformManager.getOSVersion();
          let advertiserID = "";
          let hash = username;
          hash += password;
          hash += displayName;
          hash += platformID.toString();
          hash += osVersion;
          hash += deviceId;
          hash += GameConfigManager.hashSecretKey;
          hash = new MD5Algorithm().encrypt(hash);
          console.log(hash);
          let brand = GameConfigManager.brand;
          let bundleID = GameConfigManager.bundleID;
          let jsonData = {};
          jsonData["command"] = "registerHash";
          jsonData["username"] = username;
          jsonData["password"] = password;
          jsonData["displayName"] = displayName;
          jsonData["platformId"] = platformID;
          jsonData["advId"] = advertiserID;
          jsonData["deviceId"] = deviceId;
          jsonData["os"] = osVersion;
          jsonData["alsoLogin"] = true;
          jsonData["hash"] = hash;
          jsonData["bundle"] = bundleID;
          jsonData["brand"] = brand;
          LoadingView.getInstance().show(); //convert to json string

          let strPostData = JSON.stringify(jsonData);
          GameHTTPNetwork.sendPOST(url, strPostData, resp => {
            this.registerCompleted(username, password, resp);
          }, false, true);
        }

        registerCompleted(username, password, response) {
          log(response);
          let doc = JSON.parse(response);
          let status = doc["status"];

          if (status == 0) {
            let data = doc["data"];
            let signature = data["signature"];
            let accessToken = data["accessToken"];
            let refreshToken = data["refreshToken"];
            let info = data["info"];
            let infoJsonString = JSON.stringify(info);
            GameConfigManager.signature = signature;
            GameConfigManager.loginInfo = infoJsonString;
            GameConfigManager.username = username;
            GameConfigManager.password = password;
            GameConfigManager.serverAccessToken = accessToken;
            GameConfigManager.serverRefreshToken = refreshToken;
            localStorage.setItem(GameConfigManager.LOGGED_USER_NAME, username);
            localStorage.setItem(GameConfigManager.LOGGED_PASSWORD, password);
            GamePlayManager.login();
          } else {
            var _NotiView$getInstance9;

            let mes = "";
            let data = doc["data"];
            mes = data["message"];
            (_NotiView$getInstance9 = NotiView.getInstance()) === null || _NotiView$getInstance9 === void 0 ? void 0 : _NotiView$getInstance9.showMessage(mes);
            LoadingView.getInstance().hide();
          }
        }

        show() {
          super.show();
          this.edtBox_username.string = "";
          this.edtBox_password.string = "";
          this.edtBox_retype_password.string = "";
          this.edtBox_displayname.string = "";
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "edtBox_username", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "edtBox_password", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "edtBox_retype_password", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "edtBox_displayname", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btn_register", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KimCuong_SlotMachineColumn.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './KimCuong_SlotMachineItemView.ts', './KimCuong_SlotMachineCmp.ts', './KimCuongGameView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Node, Layout, _decorator, Component, Sprite, UITransform, Vec3, tween, KimCuongSlotMachineItemView_SlotMachineItemView, KimCuongSlotMachineCmp_SlotMachineCmp, KimCuongGameView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Layout = module.Layout;
      _decorator = module._decorator;
      Component = module.Component;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      KimCuongSlotMachineItemView_SlotMachineItemView = module.default;
    }, function (module) {
      KimCuongSlotMachineCmp_SlotMachineCmp = module.default;
    }, function (module) {
      KimCuongGameView = module.default;
    }],
    execute: function () {
      exports('SlotMachineState', void 0);

      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "f1da2aYPxRAvJx6FC9BrA4k", "KimCuong_SlotMachineColumn", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let SlotMachineState;

      (function (SlotMachineState) {
        SlotMachineState[SlotMachineState["SPINNING"] = 0] = "SPINNING";
        SlotMachineState[SlotMachineState["CHECK_TO_STOP"] = 1] = "CHECK_TO_STOP";
        SlotMachineState[SlotMachineState["STOPPING"] = 2] = "STOPPING";
        SlotMachineState[SlotMachineState["STOPPED"] = 3] = "STOPPED";
      })(SlotMachineState || (SlotMachineState = exports('SlotMachineState', {})));

      let KimCuongSlotMachineColumn_SlotMachineColumn = exports('default', (_dec = ccclass('KimCuongSlotMachineColumn'), _dec2 = property([Node]), _dec3 = property(Node), _dec4 = property(Layout), _dec(_class = (_class2 = (_temp = class KimCuongSlotMachineColumn_SlotMachineColumn extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "items", _descriptor, this);

          _initializerDefineProperty(this, "lineNode", _descriptor2, this);

          _initializerDefineProperty(this, "layout", _descriptor3, this);

          _defineProperty(this, "state", SlotMachineState.STOPPED);

          _defineProperty(this, "item_position_y_limited", 0);

          _defineProperty(this, "item_position_y_top", 0);

          _defineProperty(this, "item_position_y_bottom", 0);

          _defineProperty(this, "item_position_y_stop", 0);

          _defineProperty(this, "item_top", null);

          _defineProperty(this, "bouncing_offset", 0);

          _defineProperty(this, "distance", 0);

          _defineProperty(this, "onStopped", () => {});
        }

        getLineWorldPosition() {
          let lineWorldPositions = this.lineNode.getComponentsInChildren(Sprite).map(x => {
            return x.node.parent.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(x.node.position));
          });
          return lineWorldPositions;
        }

        onLoad() {
          this.item_position_y_bottom = this.items[0].position.y;
          this.bouncing_offset = this.items[0].getComponent(UITransform).contentSize.height / 20;
          this.item_position_y_stop = this.item_position_y_bottom - this.bouncing_offset;
          this.item_position_y_top = this.items[this.items.length - 1].position.y;
          this.item_position_y_limited = this.item_position_y_bottom - (this.items[0].getComponent(UITransform).contentSize.height + this.layout.spacingY);
          this.distance = (this.layout.spacingY + this.items[0].getComponent(UITransform).contentSize.height) * 3;
        }

        init() {
          this.state = SlotMachineState.STOPPED;
          this.items.forEach(item => {
            let sub = item.getComponentsInChildren(KimCuongSlotMachineItemView_SlotMachineItemView);
            sub.forEach(s => s.init());
          });
        }

        spin() {
          this.item_top = this.getTopItem();
          this.items.forEach(item => {
            let sub = item.getComponentsInChildren(KimCuongSlotMachineItemView_SlotMachineItemView);
            sub.forEach(s => s.blur());
          });
          this.state = SlotMachineState.SPINNING;
        }

        stop(symbols) {
          this.item_top = this.getTopItem();
          let items = this.item_top.getComponentsInChildren(KimCuongSlotMachineItemView_SlotMachineItemView);
          items.forEach((item, index) => {
            item.setItem(symbols[index]);
            item.bright();
          });
          this.state = SlotMachineState.CHECK_TO_STOP;
        }

        getstate() {
          return this.state;
        }

        update(dt) {
          switch (this.state) {
            case SlotMachineState.SPINNING:
              {
                this.spinning(dt);
                break;
              }

            case SlotMachineState.CHECK_TO_STOP:
              {
                this.checkToStop(dt);
                break;
              }
          }
        }

        getTopItem() {
          let topItem = this.items[0];
          this.items.forEach(item => {
            if (item.position.y >= topItem.position.y) {
              topItem = item;
            }
          });
          return topItem;
        }

        spinning(dt) {
          let needtosort = false;
          this.items.forEach(item => {
            let position = new Vec3(item.position);
            position.y -= KimCuongSlotMachineCmp_SlotMachineCmp.SPIN_SPEED * dt;

            if (position.y <= this.item_position_y_limited) {
              position.y = this.item_position_y_top;
              needtosort = true;
            }

            item.position = position;
          });

          if (needtosort) {
            this.sort();
          }
        }

        sort() {
          this.items = this.items.sort((a, b) => a.position.y < b.position.y ? -1 : 1);
        }

        checkToStop(dt) {
          this.items.forEach(item => {
            let position = new Vec3(item.position);
            position.y -= KimCuongSlotMachineCmp_SlotMachineCmp.SPIN_SPEED * dt;

            if (position.y <= this.item_position_y_limited) {
              position.y = this.item_position_y_top;
            }

            item.position = position;
          });

          if (this.item_top.position.y <= this.item_position_y_stop) {
            this.bounce();
            this.state = SlotMachineState.STOPPING;
          }
        }

        bounce() {
          this.sort();
          let pos = new Vec3(this.item_top.position);
          pos.y = this.item_position_y_stop;
          this.item_top.setPosition(pos);
          this.items.forEach((item, index) => {
            if (item.name != this.item_top.name) {
              let pos = new Vec3(item.position);

              if (index == 0) {
                pos.y = this.items[index + 1].position.y - (this.layout.spacingY + this.items[index + 1].getComponent(UITransform).contentSize.height);
              } else {
                pos.y = this.items[index - 1].position.y + this.layout.spacingY + this.items[index - 1].getComponent(UITransform).contentSize.height;
              }

              item.position = pos;
            }
          });
          let offset = Math.abs(this.item_position_y_stop) - Math.abs(this.item_position_y_bottom);
          this.items.forEach(x => {
            let act = tween(x).sequence(tween().by(0.1, {
              position: new Vec3(0, offset, 0)
            }), tween().call(() => {
              this.state = SlotMachineState.STOPPED;
              this.onStopped && this.onStopped();

              if (!KimCuongGameView.getInstance().isFastSpin()) {
                let items = this.item_top.getComponentsInChildren(KimCuongSlotMachineItemView_SlotMachineItemView);
                items.forEach((item, index) => {
                  item.playFx();
                });
              }
            }));
            act.start();
          });
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "items", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lineNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "layout", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class)); //  * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
      //  */
      // // // Learn TypeScript:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // // Learn Attribute:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // // Learn life-cycle callbacks:
      // // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // // 
      // // import { GameCard } from "../../../Utils/MauBinh_CardLib";
      // // import KimCuongBetHistoryItemView from "../KimCuongBetHistoryItemView";
      // // import KimCuong_SlotMachineCmp from "./KimCuong_SlotMachineCmp";
      // // import KimCuong_SlotMachineItemView, { KimCuongItem } from "./KimCuong_SlotMachineItemView";
      // // 
      // // export enum SlotMachineState {
      // //     SPINNING,
      // //     CHECK_TO_STOP,
      // //     STOPPING,
      // //     STOPPED
      // // }
      // // const { ccclass, property } = cc._decorator;
      // // 
      // // @ccclass
      // // export default class KimCuong_SlotMachineColumn extends cc.Component {
      // //     @property([KimCuong_SlotMachineItemView])
      // //     private items: KimCuong_SlotMachineItemView[] = [];
      // // 
      // //     @property(cc.Node)
      // //     private lineNode: cc.Node = null;
      // // 
      // //     @property(cc.Layout)
      // //     private layout: cc.Layout = null;
      // // 
      // //     private state: SlotMachineState = SlotMachineState.STOPPED;
      // // 
      // //     private item_position_y_limited = 0;
      // // 
      // //     private item_position_y_top = 0;
      // // 
      // //     private item_position_y_bottom = 0;
      // // 
      // //     private item_position_y_stop = 0;
      // // 
      // //     private item_top: KimCuong_SlotMachineItemView = null;
      // // 
      // //     private bouncing_offset = 0;
      // // 
      // //     private distance = 0;
      // // 
      // //     public onStopped = () => { };
      // // 
      // //     getLineWorldPosition() {
      // //         let lineWorldPositions = this.lineNode.getComponentsInChildren(cc.Sprite)
      // //             .map(x => {
      // //                 return x.node.parent.convertToWorldSpaceAR(x.node.position);
      // //             });
      // //         return lineWorldPositions;
      // //     }
      // // 
      // //     onLoad() {
      // //         this.item_position_y_bottom = this.items[0].node.position.y;
      // //         this.bouncing_offset = this.items[0].node.getContentSize().height / 10;
      // //         this.item_position_y_stop = this.item_position_y_bottom - this.bouncing_offset;
      // //         this.item_position_y_top = this.items[this.items.length - 1].node.position.y;
      // //         this.item_position_y_limited = this.item_position_y_bottom - ((this.items[0].node.getContentSize().height + (this.layout.spacingY)) * 3);
      // //         this.distance = ((this.layout.spacingY + this.items[0].node.getContentSize().height) * 3);
      // //     }
      // //     init() {
      // //         this.state = SlotMachineState.STOPPED;
      // //         this.items.forEach(item => {
      // //             let sub = item.getComponentsInChildren(KimCuong_SlotMachineItemView);
      // //             sub.forEach(s => s.init());
      // //         });
      // //     }
      // // 
      // //     spin() {
      // //         this.item_top = this.getTopItem();
      // //         this.items.forEach(item => {
      // //             let sub = item.getComponentsInChildren(KimCuong_SlotMachineItemView);
      // //             sub.forEach(s => s.blur());
      // //         });
      // //         this.state = SlotMachineState.SPINNING;
      // //     }
      // // 
      // //     stop(symbols: KimCuongItem[]) {
      // //         this.item_top = this.getTopItem();
      // //         let items = this.item_top.getComponentsInChildren(KimCuong_SlotMachineItemView);
      // //         items.forEach((item, index) => {
      // //             item.setItem(symbols[index]);
      // //             item.bright();
      // //         });
      // // 
      // //         this.state = SlotMachineState.CHECK_TO_STOP;
      // //     }
      // // 
      // //     getstate() {
      // //         return this.state;
      // //     }
      // // 
      // //     update(dt) {
      // //         switch (this.state) {
      // //             case SlotMachineState.SPINNING:
      // //                 {
      // //                     this.spinning(dt);
      // //                     break;
      // //                 }
      // //             case SlotMachineState.CHECK_TO_STOP:
      // //                 {
      // //                     this.checkToStop(dt);
      // //                     break;
      // //                 }
      // //         }
      // //     }
      // // 
      // //     private getTopItem() {
      // //         let topItem = this.items[0];
      // //         this.items.forEach(item => {
      // //             if (item.node.position.y >= topItem.node.position.y) {
      // //                 topItem = item;
      // //             }
      // //         });
      // // 
      // //         return topItem;
      // //     }
      // // 
      // //     private spinning(dt) {
      // //         let needtosort = false;
      // //         this.items.forEach((item) => {
      // //             let position = item.node.position;
      // //             position.y -= KimCuong_SlotMachineCmp.SPIN_SPEED * dt;
      // // 
      // //             if (position.y <= this.item_position_y_limited) {
      // //                 position.y = this.item_position_y_top;
      // //                 needtosort = true;
      // //             }
      // // 
      // //             item.node.position = position;
      // //         });
      // // 
      // //         if (needtosort) {
      // //             this.sort();
      // //         }
      // //     }
      // // 
      // //     private sort() {
      // //         this.items = this.items.sort((a, b) => a.node.position.y < b.node.position.y ? -1 : 1);
      // //     }
      // // 
      // //     private checkToStop(dt) {
      // //         this.items.forEach(item => {
      // //             let position = item.node.position;
      // //             position.y -= KimCuong_SlotMachineCmp.SPIN_SPEED * dt;
      // // 
      // //             if (position.y <= this.item_position_y_limited) {
      // //                 position.y = this.item_position_y_top;
      // //             }
      // // 
      // //             item.node.position = position;
      // //         });
      // // 
      // //         if (this.item_top.node.position.y <= this.item_position_y_stop) {
      // //             this.bounce();
      // //             this.state = SlotMachineState.STOPPING;
      // //         }
      // //     }
      // // 
      // //     private bounce() {
      // //         this.sort();
      // // 
      // //         let pos = this.item_top.node.position;
      // //         pos.y = this.item_position_y_stop;
      // //         this.item_top.node.position = pos;
      // // 
      // //         this.items.forEach((item, index) => {
      // //             if (item.name != this.item_top.name) {
      // //                 let pos = item.node.position;
      // //                 if (index == 0) {
      // //                     pos.y = this.items[index + 1].node.position.y - this.distance;
      // //                 } else {
      // //                     pos.y = this.items[index - 1].node.position.y + this.distance;
      // //                 }
      // //                 item.node.position = pos;
      // //             }
      // // 
      // //             // cc.log("cuong check kim cuong",index,this.item_top.node.name,item.node.name,item.node.position.y);
      // //         });
      // // 
      // //         this.items.forEach(x => {
      // //             let act = cc.sequence(cc.moveBy(0.1, cc.v2(0, this.bouncing_offset)), cc.callFunc(() => {
      // //                 this.state = SlotMachineState.STOPPED;
      // //                 this.onStopped && this.onStopped();
      // //             }));
      // //             x.node.runAction(act);
      // //         });
      // //     }
      // // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UserChatPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './SettingPopup.ts', './UserChatTextItem.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, EditBox, Toggle, _decorator, instantiate, SettingPopup, UserChatTextItem, GamePlayManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      EditBox = module.EditBox;
      Toggle = module.Toggle;
      _decorator = module._decorator;
      instantiate = module.instantiate;
    }, function (module) {
      SettingPopup = module.SettingPopup;
    }, function (module) {
      UserChatTextItem = module.UserChatTextItem;
    }, function (module) {
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _temp;

      cclegacy._RF.push({}, "f273bkzKAhNKqWEtRWEP2SC", "UserChatPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let UserChatPopup = exports('UserChatPopup', (_dec = ccclass('UserChatPopup'), _dec2 = property([String]), _dec3 = property([UserChatTextItem]), _dec4 = property(Node), _dec5 = property(EditBox), _dec6 = property(Toggle), _dec7 = property(Toggle), _dec8 = property(Node), _dec9 = property(Node), _dec(_class = (_class2 = (_temp = class UserChatPopup extends SettingPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "text", _descriptor, this);

          _initializerDefineProperty(this, "emotions", _descriptor2, this);

          _initializerDefineProperty(this, "text_chat_template", _descriptor3, this);

          _initializerDefineProperty(this, "editBox", _descriptor4, this);

          _initializerDefineProperty(this, "tog_emo", _descriptor5, this);

          _initializerDefineProperty(this, "tog_text", _descriptor6, this);

          _initializerDefineProperty(this, "emo_node", _descriptor7, this);

          _initializerDefineProperty(this, "text_node", _descriptor8, this);
        }

        onLoad() {
          super.onLoad();
          this.tog_text.node.on('click', () => {
            this.text_node.active = true;
            this.emo_node.active = false;
          });
          this.tog_emo.node.on('click', () => {
            this.text_node.active = false;
            this.emo_node.active = true;
            this.emotions.forEach(e => {
              e.setEmo();
            });
          });
          this.text.forEach(t => {
            let item = instantiate(this.text_chat_template);
            item.parent = this.text_chat_template.parent;
            item.active = true;
            item.getComponent(UserChatTextItem).setText(t, () => {
              this.close();
            });
          });
          this.emotions.forEach(e => {
            e.initClick(() => {
              this.close();
            });
          });
        }

        sendMsg() {
          let string = this.editBox.string;
          this.editBox.string = "";
          GamePlayManager.sendChat(string);
          this.close();
        }

        onEndChat() {
          this.sendMsg();
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "emotions", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "text_chat_template", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "editBox", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "tog_emo", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "tog_text", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "emo_node", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "text_node", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuSessionHistorySumItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Sprite, Label, SpriteFrame, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "f2a7cY7mR5HG4+Rp8qTxG6J", "TaiXiuSessionHistorySumItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TaiXiuSessionHistorySumItemView = exports('default', (_dec = ccclass('TaiXiuSessionHistorySumItemView'), _dec2 = property(Sprite), _dec3 = property(Label), _dec4 = property([SpriteFrame]), _dec(_class = (_class2 = (_temp = class TaiXiuSessionHistorySumItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "bg_sum", _descriptor, this);

          _initializerDefineProperty(this, "lb_sum", _descriptor2, this);

          _initializerDefineProperty(this, "sprFrame_bg_sum", _descriptor3, this);

          _defineProperty(this, "lowest_y", -76);
        }

        one_offset_y() {//return Math.abs((76 * 2) / 15);
        }

        show(sum) {//if(sum > 10){
          //this.bg_sum.spriteFrame = this.sprFrame_bg_sum[0];
          //this.lb_sum.node.color = cc.Color.WHITE;
          //}else{
          //this.bg_sum.spriteFrame = this.sprFrame_bg_sum[1];
          //this.lb_sum.node.color = cc.Color.BLACK;
          //}
          //this.lb_sum.string = sum.toString();
          //let offset = (sum - 3) * this.one_offset_y();
          //this.node.position = new cc.Vec2(this.node.position.x,this.lowest_y + offset);
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg_sum", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lb_sum", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_bg_sum", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { StringUtils } from "../../Utils/StringUtils";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuSessionHistorySumItemView extends cc.Component {
      //     @property(cc.Sprite)
      //     private bg_sum : cc.Sprite = null;
      // 
      //     @property(cc.Label)
      //     private lb_sum : cc.Label = null;
      // 
      //     @property([cc.SpriteFrame])
      //     private sprFrame_bg_sum: cc.SpriteFrame[] = [];
      // 
      //     private lowest_y = -76;
      // 
      //     private one_offset_y(){
      //         return Math.abs((76 * 2) / 15);
      //      }
      // 
      //     public show(sum){
      //         if(sum > 10){
      //             this.bg_sum.spriteFrame = this.sprFrame_bg_sum[0];
      //             this.lb_sum.node.color = cc.Color.WHITE;
      //         }else{
      //             this.bg_sum.spriteFrame = this.sprFrame_bg_sum[1];
      //             this.lb_sum.node.color = cc.Color.BLACK;
      //         }
      // 
      //         this.lb_sum.string = sum.toString();
      // 
      //         let offset = (sum - 3) * this.one_offset_y();
      // 
      //         this.node.position = new cc.Vec2(this.node.position.x,this.lowest_y + offset);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TienLenFullScreenGameView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './GameConfigManager.ts', './StringUtils.ts', './MiniGameNetworkHandler.ts', './GameNetworkHandler.ts', './NotiView.ts', './GameUtils.ts', './GlobalVariables.ts', './BaseFullScreenGameView.ts', './UserChatPopup.ts', './UserInvitePopup.ts', './BauCuaFullScreenGameView.ts', './PopupController.ts', './MauBinh_CardLib.ts', './CardItem.ts', './CardPooling.ts', './GameBaiPlayerView.ts', './TienLenSettingPopup.ts', './DemLa_CardLib.ts', './LobbyViewController.ts', './MiniGameNodeController.ts', './GamePlayManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Button, Sprite, SpriteFrame, Label, _decorator, systemEvent, Tween, Vec3, tween, UIOpacity, GameConfigManager, StringUtils, MessageRequest, MessageResponse, GameNetworkHandler, NotiView, GameUtils, GlobalVariables, GLOBAL_MESSAGE, BaseFullScreenGameView, UserChatPopup, UserInvitePopup, PlayerInfo, PopupController, GameCard, CardItem, CardPooling, GameBaiPlayerView, TienLenSettingPopup, DemLa_CardLib, LobbyViewController, MiniGameNodeController, GameState, GamePlayManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      _decorator = module._decorator;
      systemEvent = module.systemEvent;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      StringUtils = module.StringUtils;
    }, function (module) {
      MessageRequest = module.MessageRequest;
      MessageResponse = module.MessageResponse;
    }, function (module) {
      GameNetworkHandler = module.GameNetworkHandler;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      GameUtils = module.default;
    }, function (module) {
      GlobalVariables = module.GlobalVariables;
      GLOBAL_MESSAGE = module.GLOBAL_MESSAGE;
    }, function (module) {
      BaseFullScreenGameView = module.BaseFullScreenGameView;
    }, function (module) {
      UserChatPopup = module.UserChatPopup;
    }, function (module) {
      UserInvitePopup = module.UserInvitePopup;
    }, function (module) {
      PlayerInfo = module.PlayerInfo;
    }, function (module) {
      PopupController = module.PopupController;
    }, function (module) {
      GameCard = module.GameCard;
    }, function (module) {
      CardItem = module.CardItem;
    }, function (module) {
      CardPooling = module.CardPooling;
    }, function (module) {
      GameBaiPlayerView = module.GameBaiPlayerView;
    }, function (module) {
      TienLenSettingPopup = module.TienLenSettingPopup;
    }, function (module) {
      DemLa_CardLib = module.default;
    }, function (module) {
      LobbyViewController = module.LobbyViewController;
    }, function (module) {
      MiniGameNodeController = module.default;
    }, function (module) {
      GameState = module.GameState;
      GamePlayManager = module.GamePlayManager;
    }],
    execute: function () {
      exports('DemLa_Message', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _class3, _temp;

      cclegacy._RF.push({}, "f34ca6K3Q5JJL5yzQl1DJ2f", "TienLenFullScreenGameView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let DemLa_Message;

      (function (DemLa_Message) {
        DemLa_Message[DemLa_Message["DEAL_CARDS"] = 250] = "DEAL_CARDS";
        DemLa_Message[DemLa_Message["DANH_BAI"] = 251] = "DANH_BAI";
        DemLa_Message[DemLa_Message["FINISH_GAME"] = 252] = "FINISH_GAME";
        DemLa_Message[DemLa_Message["SEND_DAND_BAI"] = 253] = "SEND_DAND_BAI";
        DemLa_Message[DemLa_Message["PASS"] = 254] = "PASS";
      })(DemLa_Message || (DemLa_Message = exports('DemLa_Message', {})));

      let TienLenFullScreenGameView = exports('TienLenFullScreenGameView', (_dec = ccclass('TienLenFullScreenGameView'), _dec2 = property(GameBaiPlayerView), _dec3 = property(GameBaiPlayerView), _dec4 = property(UserChatPopup), _dec5 = property(UserInvitePopup), _dec6 = property(Button), _dec7 = property(Button), _dec8 = property(Button), _dec9 = property(Button), _dec10 = property(Button), _dec11 = property(Button), _dec12 = property(Sprite), _dec13 = property([SpriteFrame]), _dec14 = property(Sprite), _dec15 = property([SpriteFrame]), _dec16 = property(Label), _dec17 = property(TienLenSettingPopup), _dec18 = property(CardPooling), _dec(_class = (_class2 = (_temp = _class3 = class TienLenFullScreenGameView extends BaseFullScreenGameView {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "my_info", _descriptor, this);

          _initializerDefineProperty(this, "opponent_info", _descriptor2, this);

          _initializerDefineProperty(this, "userChatPopup", _descriptor3, this);

          _initializerDefineProperty(this, "userInvitePopup", _descriptor4, this);

          _initializerDefineProperty(this, "btn_chat", _descriptor5, this);

          _initializerDefineProperty(this, "btn_exit", _descriptor6, this);

          _initializerDefineProperty(this, "btn_ready", _descriptor7, this);

          _initializerDefineProperty(this, "btn_begin", _descriptor8, this);

          _initializerDefineProperty(this, "btn_boluot", _descriptor9, this);

          _initializerDefineProperty(this, "btn_danhbai", _descriptor10, this);

          _initializerDefineProperty(this, "spr_table", _descriptor11, this);

          _initializerDefineProperty(this, "sprFrame_tables", _descriptor12, this);

          _initializerDefineProperty(this, "spr_finishFx", _descriptor13, this);

          _initializerDefineProperty(this, "sprFrame_finishFx", _descriptor14, this);

          _initializerDefineProperty(this, "lbl_info", _descriptor15, this);

          _initializerDefineProperty(this, "tienLenSettingPopup", _descriptor16, this);

          _initializerDefineProperty(this, "cardPooling", _descriptor17, this);

          _defineProperty(this, "_playerInfo", []);

          _defineProperty(this, "_timeToFinish", 0);

          _defineProperty(this, "_state", GameState.WAITING);

          _defineProperty(this, "pendingMessage", []);

          _defineProperty(this, "_isNewTurnRound", true);

          _defineProperty(this, "_lastTurnCards", []);

          _defineProperty(this, "_cardInTable", []);

          _defineProperty(this, "_listRecommendCard", []);
        }

        static getInstance() {
          return TienLenFullScreenGameView.instance;
        }

        getState() {
          return this._state;
        }

        testCard() {
          /*Card_3T-9
          Card_4R-14
          Card_4C-15
          Card_5B-16*/
          let a = [13, 16, 20];
          let b = [14, 17, 21, 24, 36, 37, 45, 46, 51, 6];
          let cardA = a.map(x => {
            let c = new GameCard();
            c.decodeCard(x, GlobalVariables.TIENLEN);
            return c;
          });
          console.log("--------LAST-------");
          cardA.forEach(r => {
            console.log(r.getResourceName() + "-" + r.serverCode);
          });
          console.log("--------MY-------");
          let cardB = b.map(x => {
            let c = new GameCard();
            c.decodeCard(x, GlobalVariables.TIENLEN);
            return c;
          });
          cardB.forEach(r => {
            console.log(r.getResourceName() + "-" + r.serverCode);
          });
          let recommendCards = DemLa_CardLib.getRecommendCards(cardA, cardB);
          console.log("--------RECOMMEND-------");

          if (recommendCards.length > 0) {
            recommendCards = [];

            for (let i = 0; i < cardB.length; i++) {
              let pArrayCard = cardB === null || cardB === void 0 ? void 0 : cardB.slice(i, cardB.length);
              let rceCard = DemLa_CardLib.getRecommendCards(cardA, pArrayCard);
              rceCard.forEach(r => {
                if (recommendCards.filter(c => r.serverCode == c.serverCode).length <= 0) {
                  recommendCards.push(r);
                }
              });
            }

            recommendCards.forEach(r => {
              console.log(r.getResourceName() + "-" + r.serverCode);
            });
          }
        }

        testCombination() {
          /*Card_3T-9
          Card_4R-14
          Card_4C-15
          Card_5B-16*/
          let a = [51, 1];
          let b = [9, 14, 16, 20, 28, 32, 40, 46, 51, 1];
          let cardA = a.map(x => {
            let c = new GameCard();
            c.decodeCard(x, GlobalVariables.TIENLEN);
            return c;
          });
          console.log("--------SELECTED-------");
          cardA.forEach(r => {
            console.log(r.getResourceName() + "-" + r.serverCode);
          });
          console.log("--------ALL-------");
          let cardB = b.map(x => {
            let c = new GameCard();
            c.decodeCard(x, GlobalVariables.TIENLEN);
            return c;
          });
          cardB.forEach(r => {
            console.log(r.getResourceName() + "-" + r.serverCode);
          });
          let recommendCards = DemLa_CardLib.getRecommendCards2(cardA, cardB);
          console.log("--------RECOMMEND-------");

          if (recommendCards.length > 0) {
            recommendCards.forEach(r => {
              console.log(r.getResourceName() + "-" + r.serverCode);
            });
          }
        }

        onLoad() {
          var _this$btn_chat, _this$btn_exit, _this$btn_begin, _this$btn_ready, _this$btn_boluot, _this$btn_danhbai; //this.testCombination();


          super.onLoad();
          TienLenFullScreenGameView.instance = this;
          this.gameID = GlobalVariables.TIENLEN;
          (_this$btn_chat = this.btn_chat) === null || _this$btn_chat === void 0 ? void 0 : _this$btn_chat.node.on("click", () => {
            var _this$userChatPopup;

            (_this$userChatPopup = this.userChatPopup) === null || _this$userChatPopup === void 0 ? void 0 : _this$userChatPopup.show();
          });
          (_this$btn_exit = this.btn_exit) === null || _this$btn_exit === void 0 ? void 0 : _this$btn_exit.node.on("click", () => {
            var _this$tienLenSettingP;

            (_this$tienLenSettingP = this.tienLenSettingPopup) === null || _this$tienLenSettingP === void 0 ? void 0 : _this$tienLenSettingP.show();
          });
          (_this$btn_begin = this.btn_begin) === null || _this$btn_begin === void 0 ? void 0 : _this$btn_begin.node.on("click", () => {
            this.btn_begin.node.active = false;
            this.sendReady();
          });
          (_this$btn_ready = this.btn_ready) === null || _this$btn_ready === void 0 ? void 0 : _this$btn_ready.node.on("click", () => {
            this.btn_ready.node.active = false;
            this.sendReady();
          });
          (_this$btn_boluot = this.btn_boluot) === null || _this$btn_boluot === void 0 ? void 0 : _this$btn_boluot.node.on("click", () => {
            this.onBoLuot();
          });
          (_this$btn_danhbai = this.btn_danhbai) === null || _this$btn_danhbai === void 0 ? void 0 : _this$btn_danhbai.node.on("click", () => {
            this.onDanhBai();
          });
          systemEvent.on(CardItem.CARD_SELECTED, () => {
            if (this.my_info.getSelectedCards().length > 0) {
              this.onAutoSelectCards();
            }
          });
        }

        onAutoSelectCards() {
          if (this._lastTurnCards.length > 0) {
            for (let i = 0; i < this._listRecommendCard.length; i++) {
              let recommendCards = this._listRecommendCard[i];

              if (recommendCards.length > 1) {
                let selectedCards = this.my_info.getSelectedCards().map(c => c.getCard());
                let isOK = recommendCards.filter(rc => selectedCards.findIndex(sc => rc.serverCode == sc.serverCode) >= 0).length >= 1;

                if (isOK) {
                  let lastCard = this._lastTurnCards.map(x => x.getCard());

                  if (DemLa_CardLib.isStraight(lastCard)) {
                    var _this$my_info;

                    let count = 0;
                    let cardItems = (_this$my_info = this.my_info) === null || _this$my_info === void 0 ? void 0 : _this$my_info.getPlayerCard().filter(pc => recommendCards.findIndex(rc => pc.getCode() == rc.serverCode) >= 0);
                    cardItems === null || cardItems === void 0 ? void 0 : cardItems.forEach(cardItem => {
                      if (count < lastCard.length) {
                        cardItem.selected();
                      }

                      count++;
                    });
                  } else {
                    var _this$my_info2;

                    let cardItems = (_this$my_info2 = this.my_info) === null || _this$my_info2 === void 0 ? void 0 : _this$my_info2.getPlayerCard().filter(pc => recommendCards.findIndex(rc => pc.getCode() == rc.serverCode) >= 0);
                    cardItems === null || cardItems === void 0 ? void 0 : cardItems.forEach(cardItem => {
                      cardItem.selected();
                    });
                  }

                  break;
                }
              }
            }
          } else if (this.my_info.getSelectedCards().length > 1) {
            let selectedCards = this.my_info.getSelectedCards().map(c => c.getCard());
            let myCards = this.my_info.getPlayerCard().map(c => c.getCard());
            let recommendCards = DemLa_CardLib.getRecommendCards2(selectedCards, myCards);

            if (recommendCards.length > 0) {
              var _this$my_info3;

              let cardItems = (_this$my_info3 = this.my_info) === null || _this$my_info3 === void 0 ? void 0 : _this$my_info3.getPlayerCard().filter(pc => recommendCards.findIndex(rc => pc.getCode() == rc.serverCode) >= 0);
              cardItems === null || cardItems === void 0 ? void 0 : cardItems.forEach(cardItem => {
                cardItem.selected();
              });
            }
          }
        }

        onBoLuot() {
          this.btn_boluot.node.active = false;
          this.btn_danhbai.node.active = false;
          this.sendPass();
        }

        onDanhBai() {
          var _this$my_info4;

          let _choosingCards = (_this$my_info4 = this.my_info) === null || _this$my_info4 === void 0 ? void 0 : _this$my_info4.getSelectedCards().map(c => c.getCard());

          let _lastTurnCards = this._lastTurnCards.map(c => c.getCard());

          console.log("=============== SELECTED CARD =======================");
          _choosingCards === null || _choosingCards === void 0 ? void 0 : _choosingCards.forEach(c => {
            console.log(c.getResourceName() + "-" + c.serverCode);
          });
          console.log("=============== LAST TURN CARD =======================");
          _lastTurnCards === null || _lastTurnCards === void 0 ? void 0 : _lastTurnCards.forEach(c => {
            console.log(c.getResourceName() + "-" + c.serverCode);
          });

          if ((_choosingCards === null || _choosingCards === void 0 ? void 0 : _choosingCards.length) == 0) {
            NotiView.getInstance().showMessage("Bạn chưa chọn bài để đánh!", this.root, GlobalVariables.TIENLEN);
            return;
          }

          if ((_choosingCards === null || _choosingCards === void 0 ? void 0 : _choosingCards.length) >= 2) {
            DemLa_CardLib.sortVector(_choosingCards, false);

            if (DemLa_CardLib.isPairs(_choosingCards) || DemLa_CardLib.isThreeOfAKind(_choosingCards) || DemLa_CardLib.isFourOfAKind(_choosingCards) || DemLa_CardLib.isStraight(_choosingCards) || DemLa_CardLib.isThreePairsStraight(_choosingCards) || DemLa_CardLib.isFourPairsStraight(_choosingCards)) {
              if (this._lastTurnCards.length > 0) {
                if (DemLa_CardLib.getRecommendCards(_lastTurnCards, _choosingCards).length != (_choosingCards === null || _choosingCards === void 0 ? void 0 : _choosingCards.length)) {
                  NotiView.getInstance().showMessage("Bài đánh không hợp lệ!", this.root, GlobalVariables.TIENLEN);
                  return;
                }
              }
            } else {
              NotiView.getInstance().showMessage("Bài đánh không hợp lệ!", this.root, GlobalVariables.TIENLEN);
              return;
            }
          } else if (this._lastTurnCards.length > 0 && (_choosingCards === null || _choosingCards === void 0 ? void 0 : _choosingCards.length) != _lastTurnCards.length) {
            NotiView.getInstance().showMessage("Bài đánh không hợp lệ!", this.root, GlobalVariables.TIENLEN);
            return;
          }

          this.btn_boluot.node.active = false;
          this.btn_danhbai.node.active = false;
          this.sendDanhBai();
        }

        showInvite() {
          var _this$userInvitePopup;

          (_this$userInvitePopup = this.userInvitePopup) === null || _this$userInvitePopup === void 0 ? void 0 : _this$userInvitePopup.fetchUserInvitations();
        }

        sendPass() {
          let dict = {};
          dict["cmd"] = DemLa_Message.PASS;
          let data = [MessageRequest.RoomPlugin_Type, "Simms", GamePlayManager.roomID, dict];
          GameNetworkHandler.send(data);
        }

        sendDanhBai() {
          let cardsArr = this.my_info.getSelectedCards().map(card => card.getCode());
          let dict = {};
          dict["cmd"] = DemLa_Message.SEND_DAND_BAI;
          dict["cs"] = cardsArr;
          let data = [MessageRequest.RoomPlugin_Type, "Simms", GamePlayManager.roomID, dict];
          GameNetworkHandler.send(data);
        }

        resetUI() {
          var _this$userChatPopup2, _this$tienLenSettingP2, _this$userInvitePopup2;

          (_this$userChatPopup2 = this.userChatPopup) === null || _this$userChatPopup2 === void 0 ? void 0 : _this$userChatPopup2.close();
          (_this$tienLenSettingP2 = this.tienLenSettingPopup) === null || _this$tienLenSettingP2 === void 0 ? void 0 : _this$tienLenSettingP2.close();
          (_this$userInvitePopup2 = this.userInvitePopup) === null || _this$userInvitePopup2 === void 0 ? void 0 : _this$userInvitePopup2.close();
        }

        initUI() {
          this.btn_ready.node.active = false;
          this.btn_begin.node.active = false;
          this.btn_danhbai.node.active = false;
          this.btn_boluot.node.active = false;
          this.my_info.setUserInfo(null);
          this.opponent_info.setUserInfo(null);
          this.my_info.resetUI();
          this.opponent_info.resetUI();
          this._isNewTurnRound = true;
          this.cardPooling.reset();
        }

        handleRefreshMoney(money) {
          let player = this.getPlayerByUID(GameConfigManager.uid);

          if (player == null) {
            return;
          }

          let infos = this._playerInfo.filter(p => p.uid == GameConfigManager.uid);

          if (infos.length > 0) {
            infos[0].gold = money;
          }

          player.refresh();
        }

        handleBackGameFromInterupt(timeInterupted) {
          console.log("handleBackGameFromInterupt::tlmn", timeInterupted);

          if (this._state == GameState.WAITING) {
            this.forceLeaveRoom();
          } else {
            this.leaveRoom();
            GamePlayManager.refreshInBackground();
          }
        }

        handleLeaveRoomResponse(message) {
          if (message != null) {
            let leaveRoomCode = message[1];

            if (!leaveRoomCode) {
              return;
            }

            let reasonCode = message[2];
            let mesDialog = "";

            if (reasonCode == 2) {
              mesDialog = message[5];
            }

            if (mesDialog != "") {
              var _PopupController$getI;

              (_PopupController$getI = PopupController.getInstance()) === null || _PopupController$getI === void 0 ? void 0 : _PopupController$getI.showCommonPopup(mesDialog, () => {
                var _PopupController$getI2;

                (_PopupController$getI2 = PopupController.getInstance()) === null || _PopupController$getI2 === void 0 ? void 0 : _PopupController$getI2.hideCommonPopup();
              });
            }
          }

          super.handleLeaveRoomResponse(message);
        }

        showChat(name, content) {
          let player = this.getPlayerByUID(name);

          if (player == null) {
            return;
          }

          if (content.indexOf("e_") >= 0) {
            content = content.replace("e_", "emo_");
          }

          player.showBubbleChat(content);
        }

        getPlayerByUID(uid) {
          if (uid == GameConfigManager.uid) {
            return this.my_info;
          } else if (this.opponent_info.getUID() == uid) {
            return this.opponent_info;
          }

          return null;
        }

        handleInGameMessage(message) {
          let dict = message[1];
          let cmd = dict["cmd"];

          if (cmd == GLOBAL_MESSAGE.INGAME_USER_CHAT) {
            // chat
            let name = dict["uid"];
            let content = dict["mgs"];
            this.showChat(name, content);
          } else if (cmd == GLOBAL_MESSAGE.INGAME_USER_READY) {
            // nguoi choi san sang
            let uid = dict["uid"];
            this.setReadyForPlayer(uid);
          } else if (cmd == GLOBAL_MESSAGE.INGAME_CHANGE_HOST) {
            // thay doi chu phong
            let uid = dict["uid"];
            this.setHostPlayer(uid);
          } else if (cmd == 303) {
            let playerArr = dict["us"];
            this.userInvitePopup.showPlayersToBeInvited(playerArr);
          } else if (cmd == GLOBAL_MESSAGE.REFRESH_MONEY) {
            let as = dict["As"];
            let vip = as["vip"];
            let gold = as["gold"];
            let chip = as["chip"];
            let goldSafe = as["safe"];
            GameConfigManager.gold = gold;
            systemEvent.emit(LobbyViewController.REFRESH_MONEY, GameConfigManager.gold);
          } else if (cmd == GLOBAL_MESSAGE.USER_INFO) {
            let userDict = dict["As"]; // int64_t chip = userDict -> getUInt64("chip");

            let gold = userDict["gold"]; // int vip = (int)userDict -> getUInt64("vip");

            let customerID = dict["id"];
            let displayName = dict["dn"];
            let userID = dict["uid"];
            let avatarURL = dict["a"];
            GameConfigManager.gold = gold;
            GameConfigManager.customerID = customerID;
            GameConfigManager.uid = userID;
            console.log("my uid:", GameConfigManager.uid);
            GameConfigManager.displayName = displayName;
            GameConfigManager.avaURL = avatarURL;

            if (dict["lr"] != null && dict["lr"] != undefined) {
              let lr = dict["lr"];
              let roomID = lr["rid"];
              let gameID = lr["gid"];
              let serverID = lr["sid"];
              let roomPassword = "";

              if (lr["pwd"] != null && lr["pwd"] != undefined) {
                roomPassword = lr["pwd"];
              }

              LobbyViewController.getInstance().switchGameScreen(gameID);
              GamePlayManager.joinRoom(roomID, serverID, roomPassword);
            }
          } // else if (cmd == 303) {
          //     // MsgPackArray * playerArr = dict->getArray("us");
          //     // gameView->showPlayersToBeInvited(playerArr);
          // }
          else {
              return false;
            }

          return true;
        }

        setHostPlayer(uid) {
          var _this$btn_ready2, _this$my_info5, _this$opponent_info;

          this._playerInfo.forEach(p => {
            p.isHost = p.uid == uid;
            let player = this.getPlayerByUID(p.uid);

            if (player != null) {
              player.setUserInfo(p);
            }
          });

          if ((_this$btn_ready2 = this.btn_ready) === null || _this$btn_ready2 === void 0 ? void 0 : _this$btn_ready2.node.active) {
            this.btn_ready.node.active = false;
          }

          (_this$my_info5 = this.my_info) === null || _this$my_info5 === void 0 ? void 0 : _this$my_info5.ready(false);
          (_this$opponent_info = this.opponent_info) === null || _this$opponent_info === void 0 ? void 0 : _this$opponent_info.ready(false);
        }

        setReadyForPlayer(uid) {
          let player = this.getPlayerByUID(uid);

          if (player != null) {
            player.ready();
          }

          if (this.getIsHost() && !this.isMe(uid)) {
            this.btn_begin.node.active = true;
          }
        }

        isMe(uid) {
          return uid == GameConfigManager.uid;
        }

        update(dt) {
          if (this.root.active) {
            if (this.pendingMessage.length > 0) {
              this.pendingMessage.forEach(m => {
                this.handleMessage(m);
              });
              this.pendingMessage = [];
            }
          }
        }

        handleMessage(message) {
          if (!this.root.active) {
            this.pendingMessage.push(message);
            return;
          }

          if (this.handleInGameMessage(message)) {
            return;
          }

          let messageType = message[0];
          let dict = message[1];
          let cmd = dict["cmd"];

          switch (messageType) {
            case MessageResponse.Extension_Response:
              {
                if (cmd == GLOBAL_MESSAGE.INGAME_JOIN_TABLE_INFOS) {
                  let b = dict["b"]; // muc cuoc

                  let gS = dict["gS"]; // game state

                  let rmT = dict["rmT"]; // remaining time

                  rmT = rmT / 1000;
                  let aid = dict["aid"];
                  let maxUser = dict["Mu"];
                  let hasPassword = false;

                  if (dict["hpwd"] != null && dict["hpwd"] != undefined) {
                    hasPassword = dict["hpwd"];
                  }

                  this._state = GameState.WAITING;

                  if (gS == 3 || gS == 4) {
                    this._state = GameState.VIEWING;
                  }

                  this.setGameConfig(b, gS, rmT, aid, maxUser, hasPassword);
                  let timeToFinish = dict["tfeg"];
                  timeToFinish /= 1000;
                  this._timeToFinish = timeToFinish;
                  let arrPlayer = dict["ps"];

                  for (let i = 0; i < arrPlayer.length; i++) {
                    let playerInfoDict = arrPlayer[i];
                    let C = playerInfoDict["C"]; // chu ban

                    let m = playerInfoDict["m"]; // money

                    let pS = playerInfoDict["pS"]; // player state

                    let rmC = playerInfoDict["rmC"]; // so bai con lai

                    let sit = playerInfoDict["sit"]; // cho ngoi

                    let dn = playerInfoDict["dn"]; // display name

                    let uid = playerInfoDict["uid"]; // user id

                    let r = playerInfoDict["r"]; // ready

                    let playing = playerInfoDict["pi"];
                    let platformID = playerInfoDict["pid"]; // platform

                    let as = playerInfoDict["As"];
                    let avaURL = playerInfoDict["a"];
                    let customerID = 0;

                    if (playerInfoDict["id"] != null && playerInfoDict["id"] != undefined) {
                      customerID = playerInfoDict["id"];
                    }

                    this.addPlayer(dn, uid, C, m, pS, rmC, sit, r, platformID, playing, as, avaURL, customerID);
                  }

                  this.prepareNewGame();

                  if (this._state == GameState.VIEWING) {
                    // demLaGame->hideCards();
                    // demLaGame->setCurrentStateForPlayers();
                    if (dict["re"] == true) {
                      // reconnect
                      let cardArray = [];

                      for (let i = 0; i < arrPlayer.length; i++) {
                        let playerInfoDict = arrPlayer[i];
                        let uid = playerInfoDict["uid"]; // user id

                        if (this.isMe(uid)) {
                          cardArray = playerInfoDict["cs"];
                          break;
                        }
                      }

                      let lastTurnCards = dict["ldc"];
                      this.reconnectLastGame(cardArray, lastTurnCards, rmT); // gameView->updateViewingPlayerPositions();
                    } // gameView->updateReadyStatus();

                  }

                  return;
                } else if (cmd == GLOBAL_MESSAGE.INGAME_USER_LEAVE_AND_JOIN_TABLE) {
                  let t = dict["t"]; // t = 1: vao phong || t = 2: ra phong

                  if (t == 1) {
                    let playerInfoDict = dict["p"];
                    let C = playerInfoDict["C"]; // chu ban

                    let a = playerInfoDict["a"]; // avatar

                    let g = playerInfoDict["g"]; // gender

                    let m = playerInfoDict["m"]; // money

                    let sit = playerInfoDict["sit"];
                    let dn = playerInfoDict["dn"]; // display name

                    let uid = playerInfoDict["uid"]; // user id

                    let r = false; // ready

                    let platformID = playerInfoDict["pid"]; // platform

                    if (playerInfoDict["r"] != null && playerInfoDict["r"] != undefined) {
                      r = playerInfoDict["r"];
                    }

                    let as = playerInfoDict["As"];
                    let avaURL = playerInfoDict["a"];
                    let customerID = 0;

                    if (playerInfoDict["id"] != null && playerInfoDict["id"] != undefined) {
                      customerID = playerInfoDict["id"];
                    }

                    this.addPlayer(dn, uid, C, m, 0, 0, sit, r, platformID, true, as, avaURL, customerID);
                  } else if (t == 2) {
                    let playerInfoDict = dict["p"];
                    let uid = playerInfoDict["uid"]; // user id

                    this.removePlayer(uid);
                  }

                  return;
                }

                if (cmd == DemLa_Message.DEAL_CARDS) {
                  // chia bai
                  let cardsArr = dict["cs"];
                  let nextPlayerUID = dict["tP"]["uid"];
                  let listPlaying = dict["lpi"];
                  let listUpdateMoney = null;

                  if (dict["ps"] != null && dict["ps"] != undefined) {
                    listUpdateMoney = dict["ps"];
                  }

                  this.startGame(cardsArr, nextPlayerUID, listPlaying, listUpdateMoney);
                } else if (cmd == DemLa_Message.DANH_BAI) {
                  let dictFromPlayer = dict["fP"];
                  let dictToPlayer = dict["tP"];
                  let state = dictFromPlayer["pS"];

                  if (state == 1) {
                    let arrCards = dictFromPlayer["dCs"];
                    let fromPlayer = dictFromPlayer["uid"];
                    let toPlayer = dictToPlayer["uid"];
                    let mX = 0;
                    let lM = 0;

                    if (dictFromPlayer["mX"] != null && dictFromPlayer["mX"] != undefined) {
                      mX = dictFromPlayer["mX"];
                      lM = dictFromPlayer["lm"];
                    }

                    this.danhBai(fromPlayer, arrCards, toPlayer, mX, lM);

                    if (dictFromPlayer["rfu"] != null && dictFromPlayer["rfu"] != undefined) {
                      let dictRefundPlayer = dict["rfu"];
                      let refundPlayer = dictRefundPlayer["uid"];
                      let moneyRefund = dictRefundPlayer["m"];
                      let mXRefund = dictRefundPlayer["mX"];
                      this.refundMoney(refundPlayer, moneyRefund, mXRefund);
                    }
                  } else if (state == 2) {
                    let fromPlayer = dictFromPlayer["uid"];
                    let toPlayer = dictToPlayer["uid"];
                    this.addBoLuotPlayer(fromPlayer);
                    this.nextTurn(toPlayer);
                  }
                } else if (cmd == DemLa_Message.FINISH_GAME) {
                  let finishArr = [];

                  if (dict["fP"] != null && dict["fP"] != null) {
                    let dictFromPlayer = dict["fP"];
                    let arrCards = dictFromPlayer["dCs"];
                    let fromPlayer = dictFromPlayer["uid"];
                    let mX = 0;
                    let lM = 0;

                    if (dict["sm"] != null && dict["sm"] != null) {
                      mX = dictFromPlayer["mX"];
                      lM = dictFromPlayer["lm"];
                    }

                    this.danhBai(fromPlayer, arrCards, "", mX, lM);
                    finishArr.push(dictFromPlayer);
                  }

                  let arrPlayer = dict["ps"];

                  for (let i = 0; i < arrPlayer.length; i++) {
                    let playerDict = arrPlayer[i];
                    finishArr.push(playerDict);
                  }

                  this.finishThisGame(finishArr);
                } else if (cmd == GLOBAL_MESSAGE.ERROR_MESSAGE) {
                  let errorMessage;

                  if (dict["mgs"] != null && dict["mgs"] != undefined) {
                    errorMessage = dict["mgs"];
                  }

                  if (errorMessage.length > 0) {
                    NotiView.getInstance().showMessage(errorMessage, this.root, GlobalVariables.TIENLEN);
                    return;
                  }
                }
              }
          }
        }

        reconnectLastGame(cardArray, lastTurnCards, remainingTime) {
          var _this$my_info6, _this$my_info7, _this$opponent_info2, _this$opponent_info3, _this$my_info8, _this$my_info9;

          this._state = GameState.PLAYING;

          for (let i = 0; i < this.opponent_info.getRemainingCard(); i++) {
            var _this$cardPooling;

            let opponent_card = (_this$cardPooling = this.cardPooling) === null || _this$cardPooling === void 0 ? void 0 : _this$cardPooling.getPooledCard();
            opponent_card.setAsOnTop();
            this.opponent_info.addCard(opponent_card);
            Tween.stopAllByTarget(opponent_card.node);
            opponent_card.node.setPosition(this.opponent_info.getCardPos().position);
            opponent_card.node.setScale(this.opponent_info.getCardPos().scale);
            opponent_card.node.active = true;
          }

          for (let i = 0; i < cardArray.length; i++) {
            var _this$cardPooling2;

            let code = cardArray[i];
            let my_card = (_this$cardPooling2 = this.cardPooling) === null || _this$cardPooling2 === void 0 ? void 0 : _this$cardPooling2.getPooledCard();

            if (my_card != null) {
              my_card.setAsOnTop();
              let card = new GameCard();
              card.decodeCard(code, GlobalVariables.TIENLEN);
              my_card.setCard(card);
              this.my_info.addCard(my_card, true);
              Tween.stopAllByTarget(my_card.node);
              my_card.show();
              let target = new Vec3(this.my_info.getCardPos().position);
              target.x += i * 80;
              my_card.node.setPosition(target);
              my_card.node.setScale(this.my_info.getCardPos().scale);
              my_card.lockPosition(target);
            }
          }

          this._lastTurnCards = [];

          if (lastTurnCards.length > 0) {
            console.log("=========== RECONNECT ============");
            lastTurnCards.forEach(x => {
              let card = new GameCard();
              card.decodeCard(x, GlobalVariables.TIENLEN);
              console.log("last turn card:" + card.getResourceName());
            });
            let randNum1 = GameUtils.getRandomInt(0, 100) - 75;
            let randNum2 = GameUtils.getRandomInt(0, 100) - 50;
            let posX = this.cardPooling.node.position.x + randNum1;
            let posY = this.cardPooling.node.position.y + randNum2;

            if (lastTurnCards.length >= 8) {
              posX -= 140;
            } else if (lastTurnCards.length >= 5) {
              posX -= 70;
            }

            for (let i = 0; i < lastTurnCards.length; i++) {
              var _this$cardPooling3;

              let code = lastTurnCards[i];
              let card = (_this$cardPooling3 = this.cardPooling) === null || _this$cardPooling3 === void 0 ? void 0 : _this$cardPooling3.getPooledCard();

              if (card != null && card != undefined) {
                let data = new GameCard();
                data.decodeCard(code, GlobalVariables.TIENLEN);
                card.setCard(data);
                Tween.stopAllByTarget(card.node);
                card.setAsOnTop();
                card.node.setPosition(new Vec3(posX, posY, 0));
                card.node.setScale(new Vec3(0.55, 0.55, 0.55));
                card.show();
                posX += 40;

                this._lastTurnCards.push(card);
              }
            }

            this.checkCard();
          }

          if (remainingTime > 20) {
            remainingTime = 20;
          }

          if (((_this$my_info6 = this.my_info) === null || _this$my_info6 === void 0 ? void 0 : _this$my_info6.getCurrentState()) == 3) {
            this.my_info.startCountDown(remainingTime);
            this.btn_danhbai.node.active = this.my_info.getCountPosibleToSelect() > 0;
            this.btn_boluot.node.active = lastTurnCards.length > 0;
          } else if (((_this$my_info7 = this.my_info) === null || _this$my_info7 === void 0 ? void 0 : _this$my_info7.getCurrentState()) == 2) {
            this.addBoLuotPlayer(this.my_info.getUID());
          }

          if (((_this$opponent_info2 = this.opponent_info) === null || _this$opponent_info2 === void 0 ? void 0 : _this$opponent_info2.getCurrentState()) == 3) {
            this.opponent_info.startCountDown(remainingTime);
            this.btn_danhbai.node.active = false;
            this.btn_boluot.node.active = false;
          } else if (((_this$opponent_info3 = this.opponent_info) === null || _this$opponent_info3 === void 0 ? void 0 : _this$opponent_info3.getCurrentState()) == 2) {
            this.addBoLuotPlayer(this.opponent_info.getUID());
          }

          Tween.stopAllByTarget(this.my_info.node);
          (_this$my_info8 = this.my_info) === null || _this$my_info8 === void 0 ? void 0 : _this$my_info8.node.setPosition(new Vec3(-675, -240, 0));
          (_this$my_info9 = this.my_info) === null || _this$my_info9 === void 0 ? void 0 : _this$my_info9.node.setScale(new Vec3(0.8, 0.8, 0.8));
        }

        finishThisGame(finishArr) {
          for (let i = 0; i < finishArr.length; i++) {
            let playerDict = finishArr[i];
            let uid = playerDict["uid"];
            let player = this.getPlayerByUID(uid);

            if (player != null) {
              player.stopCountDown();
              player.hideBubbleChat();
              let winnings = playerDict["mX"];

              if (playerDict["sm"] != null && playerDict["sm"] != undefined) {
                winnings = playerDict["sm"];
              }

              let rankOfHand = 0;

              if (playerDict["whR"] != null && playerDict["whR"] != undefined) {
                rankOfHand = playerDict["whR"];
              }

              let ag = playerDict["m"];
              player.setMoney(ag);
              player.winning = Math.abs(winnings);

              if (winnings > 0) {
                player.showWinFx(0, this._timeToFinish * 0.5);
              } else {
                player.showLoseFx(0, this._timeToFinish * 0.5);
              }

              this.runActionFinishForPlayer(player, winnings, rankOfHand, false);
            }

            if (!this.isMe(uid)) {
              if (playerDict["cs"] != null && playerDict["cs"] != undefined) {
                let arrCards = playerDict["cs"];
                let pos = new Vec3(this.opponent_info.node.position);
                pos.y = 133;
                pos.x -= 25 * arrCards.length / 2;

                for (let i = 0; i < arrCards.length; i++) {
                  var _this$opponent_info4;

                  let code = arrCards[i];
                  let card = (_this$opponent_info4 = this.opponent_info) === null || _this$opponent_info4 === void 0 ? void 0 : _this$opponent_info4.popCard();

                  if (card != null && card != undefined) {
                    let data = new GameCard();
                    data.decodeCard(code, GlobalVariables.TIENLEN);
                    card.setCard(data);
                    card.show();
                    Tween.stopAllByTarget(card.node);
                    let seq = tween(card.node).sequence(tween().call(() => {
                      card.setAsOnTop();
                    }), tween().to(0.3, {
                      position: new Vec3(pos)
                    }));
                    seq.start();
                    pos.x += 35;
                  }
                }
              }
            }
          }

          let finishAct = tween(this.node).sequence(tween().call(() => {
            this.btn_danhbai.node.active = false;
            this.btn_boluot.node.active = false;
          }), tween().delay(this._timeToFinish), tween().call(() => {
            var _this$tienLenSettingP3;

            this._state = GameState.WAITING;

            if ((_this$tienLenSettingP3 = this.tienLenSettingPopup) === null || _this$tienLenSettingP3 === void 0 ? void 0 : _this$tienLenSettingP3.isWillExit) {
              this.tienLenSettingPopup.exitRoom();
            } else {
              this.prepareNewGame();
            }
          }));
          finishAct.start();
        }

        runActionFinishForPlayer(player, winnings, rank, thangTrang) {
          let fxText = "";
          if (winnings > 0) ;else {
            if (player.getPlayerCard().length == 13 && !thangTrang) {
              fxText = "Cóng";
            }
          }

          if (rank == 1) {
            // tu quy 3
            fxText = "Tứ Quý 3";
          } else if (rank == 2) {
            // tu quy 2
            fxText = "Tứ Quý 2";
          } else if (rank == 3) {
            // 2 tu quy
            fxText = "2 Tứ Quý";
          } else if (rank == 4) {
            // 6 doi
            fxText = "6 Đôi";
          } else if (rank == 5) {
            // 3 doi thong co 3 bich
            fxText = "3 Đôi Thông\ncó 3 Bích";
          } else if (rank == 6) {
            // 4 doi thong co 3 bich
            fxText = "4 Đôi Thông\ncó 3 Bích";
          } else if (rank == 7) {
            // 5 doi thong
            fxText = "5 Đôi Thông";
          } else if (rank == 8) {
            // 6 doi thong
            fxText = "6 Đôi Thông";
          } else if (rank == 9) {
            // dong hoa
            fxText = "Đồng Hoa";
          } else if (rank == 10) {
            // sanh rong
            fxText = "Sảnh Rồng";
          } else if (rank == 11) {
            // sanh rong dong hoa
            fxText = "Sảnh Rồng\nĐồng Hoa";
          }

          if (fxText.length > 0) {
            player.showResultText(fxText, this._timeToFinish);
          }
        }

        addBoLuotPlayer(fromPlayer) {
          this._isNewTurnRound = true;
          let player = this.getPlayerByUID(fromPlayer);

          if (player != null) {
            player.showBubbleChat("Bỏ", 1);
          }

          this._lastTurnCards.forEach(card => {
            card.setGray();
          });

          this.clearCardInTable();
        }

        checkFx() {
          Tween.stopAllByTarget(this.spr_finishFx.node);
          Tween.stopAllByTarget(this.spr_finishFx.node.getComponent(UIOpacity));
          let fxPath = -1;

          let checkFxCards = this._lastTurnCards.map(x => x.getCard());

          DemLa_CardLib.sortVector(checkFxCards, false);

          if (DemLa_CardLib.isFourOfAKind(checkFxCards)) {
            fxPath = 0;
          }

          if (DemLa_CardLib.isThreePairsStraight(checkFxCards)) {
            fxPath = 1;
          }

          if (DemLa_CardLib.isFourPairsStraight(checkFxCards)) {
            fxPath = 2;
          }

          if (fxPath != -1) {
            this.spr_finishFx.spriteFrame = this.sprFrame_finishFx[fxPath];
            this.spr_finishFx.node.setScale(new Vec3(0.2, 0.2, 0.2));
            let opa = this.spr_finishFx.node.getComponent(UIOpacity);
            opa.opacity = 255;
            let seq = tween(this.spr_finishFx.node).sequence(tween().to(0.15, {
              scale: Vec3.ONE
            }), tween().to(0.15, {
              scale: new Vec3(1.5, 1.5, 1.5)
            }), tween().to(0.15, {
              scale: Vec3.ONE
            }), tween().to(0.15, {
              scale: new Vec3(1.2, 1.2, 1.2)
            }), tween().to(0.15, {
              scale: Vec3.ONE
            }), tween().delay(0.5), tween().call(() => {
              let fadeOut = tween(opa).to(0.2, {
                opacity: 1
              });
              fadeOut.start();
            }));
            seq.start();
          }
        }

        danhBai(fromPlayer, arrCards, toPlayer, mX, lM) {
          this._isNewTurnRound = false;

          if (mX > 0) {
            if (this.isMe(fromPlayer)) {
              this.opponent_info.winning = Math.abs(mX);
              this.opponent_info.showLoseFx(0, 3);
              this.my_info.winning = Math.abs(mX);
              this.my_info.showWinFx(0, 3);
            } else {
              this.opponent_info.winning = Math.abs(mX);
              this.opponent_info.showWinFx(0, 3);
              this.my_info.winning = Math.abs(mX);
              this.my_info.showLoseFx(0, 3);
            }
          }

          this._lastTurnCards.forEach(card => {
            card.setGray();
          });

          let randNum1 = GameUtils.getRandomInt(0, 100) - 75;
          let randNum2 = GameUtils.getRandomInt(-50, 25);
          let posX = this.cardPooling.node.position.x + randNum1;
          let posY = this.cardPooling.node.position.y + randNum2;
          this._lastTurnCards = [];

          if (this.isMe(fromPlayer)) {
            for (let i = 0; i < arrCards.length; i++) {
              var _this$my_info10, _this$my_info11;

              let code = arrCards[i];
              let card = (_this$my_info10 = this.my_info) === null || _this$my_info10 === void 0 ? void 0 : _this$my_info10.getCardItemWithCode(code);

              if (card != null && card != undefined) {
                this._lastTurnCards.push(card);
              }

              (_this$my_info11 = this.my_info) === null || _this$my_info11 === void 0 ? void 0 : _this$my_info11.removeCardItemWithCode(code);
            }

            this.my_info.rearrangeCard();

            if (this._lastTurnCards.length >= 8) {
              posX -= 140;
            } else if (this._lastTurnCards.length >= 5) {
              posX -= 70;
            }

            this._lastTurnCards.forEach(card => {
              Tween.stopAllByTarget(card.node);
              let seq = tween(card.node).sequence(tween().call(() => {
                card.setAsOnTop();
              }), tween().to(0.2, {
                position: new Vec3(posX, posY, 0),
                scale: new Vec3(0.55, 0.55, 0.55)
              }));
              seq.start();
              posX += 40;
            });
          } else {
            for (let i = 0; i < arrCards.length; i++) {
              var _this$opponent_info5;

              let code = arrCards[i];
              let card = (_this$opponent_info5 = this.opponent_info) === null || _this$opponent_info5 === void 0 ? void 0 : _this$opponent_info5.popCard();

              if (card != null && card != undefined) {
                let data = new GameCard();
                data.decodeCard(code, GlobalVariables.TIENLEN);
                card.setCard(data);
                card.show();

                this._lastTurnCards.push(card);
              }
            }

            if (this._lastTurnCards.length >= 8) {
              posX -= 140;
            } else if (this._lastTurnCards.length >= 5) {
              posX -= 70;
            }

            this._lastTurnCards.forEach(card => {
              Tween.stopAllByTarget(card.node);
              let seq = tween(card.node).sequence(tween().call(() => {
                card.setAsOnTop();
              }), tween().to(0.2, {
                position: new Vec3(posX, posY, 0),
                scale: new Vec3(0.55, 0.55, 0.55)
              }));
              seq.start();
              posX += 40;
            });
          }

          this.checkFx();
          this.nextTurn(toPlayer);
        }

        refundMoney(refundPlayer, moneyRefund, mXRefund) {}

        startGame(cardsArr, nextPlayerUID, listPlaying, listUpdateMoney) {
          var _this$my_info13, _this$opponent_info8;

          let count = 0;
          cardsArr.forEach((x, i) => {
            var _this$cardPooling4, _this$cardPooling5;

            let opponent_card = (_this$cardPooling4 = this.cardPooling) === null || _this$cardPooling4 === void 0 ? void 0 : _this$cardPooling4.getPooledCard();

            if (opponent_card != null) {
              var _this$opponent_info6, _this$opponent_info6$, _this$opponent_info7, _this$opponent_info7$;

              opponent_card.setAsOnTop();
              this.opponent_info.addCard(opponent_card);
              Tween.stopAllByTarget(opponent_card.node);
              opponent_card.node.active = true;
              let move = tween(opponent_card.node).sequence(tween().delay(0.2 + 0.08 * i), tween().to(0.6, {
                position: (_this$opponent_info6 = this.opponent_info) === null || _this$opponent_info6 === void 0 ? void 0 : (_this$opponent_info6$ = _this$opponent_info6.getCardPos()) === null || _this$opponent_info6$ === void 0 ? void 0 : _this$opponent_info6$.position,
                scale: (_this$opponent_info7 = this.opponent_info) === null || _this$opponent_info7 === void 0 ? void 0 : (_this$opponent_info7$ = _this$opponent_info7.getCardPos()) === null || _this$opponent_info7$ === void 0 ? void 0 : _this$opponent_info7$.scale
              }, {
                easing: 'expoOut'
              }));
              move.start();
            }

            let my_card = (_this$cardPooling5 = this.cardPooling) === null || _this$cardPooling5 === void 0 ? void 0 : _this$cardPooling5.getPooledCard();

            if (my_card != null) {
              var _this$my_info12, _this$my_info12$getCa;

              my_card.setAsOnTop();
              let card = new GameCard();
              card.decodeCard(x, GlobalVariables.TIENLEN);
              my_card.setCard(card);
              this.my_info.addCard(my_card, true);
              Tween.stopAllByTarget(my_card.node);
              my_card.show();
              let target = new Vec3(this.my_info.getCardPos().position);
              target.x += i * 80;
              my_card.lockPosition(target);
              let velocity = 700;
              let distance = Vec3.distance(target, my_card.node.position);
              let moveTime = distance / velocity;
              let move = tween(my_card.node).sequence(tween().delay(0.2 + 0.08 * i), tween().to(moveTime, {
                position: target,
                scale: (_this$my_info12 = this.my_info) === null || _this$my_info12 === void 0 ? void 0 : (_this$my_info12$getCa = _this$my_info12.getCardPos()) === null || _this$my_info12$getCa === void 0 ? void 0 : _this$my_info12$getCa.scale
              }, {
                easing: 'expoOut'
              }), tween().call(() => {
                count += 1;

                if (count >= 13) {
                  this.finishPhatBai(nextPlayerUID);
                }
              }));
              move.start();
            }
          }); // (-675,-240) des,origin (6,-206)

          Tween.stopAllByTarget(this.my_info.node);
          let seq = tween(this.my_info.node).to(0.5, {
            position: new Vec3(-675, -240, 0),
            scale: new Vec3(0.8, 0.8, 0.8)
          });
          seq.start();
          (_this$my_info13 = this.my_info) === null || _this$my_info13 === void 0 ? void 0 : _this$my_info13.ready(false);
          (_this$opponent_info8 = this.opponent_info) === null || _this$opponent_info8 === void 0 ? void 0 : _this$opponent_info8.ready(false);
          this._state = GameState.PLAYING;
        }

        finishPhatBai(nextUID) {
          this.nextTurn(nextUID);

          if (this.isMe(nextUID)) {
            this.btn_boluot.node.active = false;
          }
        }

        clearCardInTable() {
          var _this$my_info14, _this$opponent_info9, _this$cardPooling6;

          this._lastTurnCards = [];
          let cards = [];
          (_this$my_info14 = this.my_info) === null || _this$my_info14 === void 0 ? void 0 : _this$my_info14.getPlayerCard().forEach(c => cards.push(c));
          (_this$opponent_info9 = this.opponent_info) === null || _this$opponent_info9 === void 0 ? void 0 : _this$opponent_info9.getPlayerCard().forEach(c => cards.push(c));
          (_this$cardPooling6 = this.cardPooling) === null || _this$cardPooling6 === void 0 ? void 0 : _this$cardPooling6.clearCardsNotInTheseCards(cards);
        }

        nextTurn(uid) {
          if (uid == "") return;

          if (this.isMe(uid)) {
            this.btn_danhbai.node.active = true;

            if (this._isNewTurnRound) {
              this.btn_boluot.node.active = false;
            } else {
              this.btn_boluot.node.active = true;
            }

            this.my_info.startCountDown(20);
            this.opponent_info.stopCountDown();
            this.checkCard();
          } else {
            this.btn_danhbai.node.active = false;
            this.btn_boluot.node.active = false;
            this.opponent_info.startCountDown(20);
            this.my_info.stopCountDown();
            this.my_info.getPlayerCard().forEach(x => {
              x.canBeSelected();
            });
          }
        }

        checkCard() {
          var _this$my_info15;

          let _lastTurnCards = this._lastTurnCards.map(x => x.getCard());

          let _thisPlayerCards = (_this$my_info15 = this.my_info) === null || _this$my_info15 === void 0 ? void 0 : _this$my_info15.getPlayerCard().map(x => x.getCard());

          this._listRecommendCard = [];

          if (_lastTurnCards != null && _lastTurnCards.length > 0) {
            let recommendCards = DemLa_CardLib.getRecommendCards(_lastTurnCards, _thisPlayerCards);

            if (recommendCards.length > 0) {
              recommendCards = [];

              for (let i = 0; i < _thisPlayerCards.length; i++) {
                let pArrayCard = _thisPlayerCards === null || _thisPlayerCards === void 0 ? void 0 : _thisPlayerCards.slice(i, _thisPlayerCards.length);
                let rceCard = DemLa_CardLib.getRecommendCards(_lastTurnCards, pArrayCard);

                if (rceCard.length > 0) {
                  this._listRecommendCard.push(rceCard);

                  rceCard.forEach(r => {
                    if (recommendCards.filter(c => r.serverCode == c.serverCode).length <= 0) {
                      recommendCards.push(r);
                    }
                  });
                }
              }

              this.my_info.getPlayerCard().forEach(x => {
                if (recommendCards.filter(r => r.serverCode == x.getCode()).length > 0) {
                  x.canBeSelected();
                } else {
                  x.cannotBeSelected();
                }
              });
            } else {
              this.btn_danhbai.node.active = false;
              this.my_info.getPlayerCard().forEach(x => {
                x.cannotBeSelected();
              });
            }
          } else {
            this.my_info.getPlayerCard().forEach(x => {
              x.canBeSelected();
            });
          }
        }

        setGameConfig(b, gS, rmT, aid, maxUser, hasPassword) {
          let tableType = 4;

          if (b <= 1000) {
            tableType = 1;
          } else if (b <= 10000) {
            tableType = 2;
          } else if (b <= 100000) {
            tableType = 3;
          }

          this.spr_table.spriteFrame = this.sprFrame_tables[tableType];
          this.lbl_info.string = "Bàn: " + GamePlayManager.roomID + " - Cược: " + StringUtils.formatMoneyNumber(b);
          this.resetAllPlayerViewAction();
        }

        addPlayer(dn, uid, C, m, pS, rmC, sit, r, platform, playing, as, avatarURL, customerID) {
          let info = new PlayerInfo();
          info.displayName = dn;
          info.gold = m;
          info.avatarURL = avatarURL;
          info.uid = uid;
          info.isHost = C;
          console.log(dn, rmC);

          this._playerInfo.push(info);

          this._playerInfo.forEach(p => {
            if (p.uid == GameConfigManager.uid) {
              this.my_info.setUserInfo(p);
            } else {
              this.opponent_info.setUserInfo(p);
            }
          });

          if (this.isMe(uid)) {
            this.my_info.setCurrentState(pS, rmC);
          } else {
            this.opponent_info.setCurrentState(pS, rmC);
          }
        }

        removePlayer(uid) {
          let player = this.getPlayerByUID(uid);

          if (player != null) {
            player.setUserInfo(null);
          }

          this._playerInfo = this._playerInfo.filter(p => p.uid != uid);

          if (this.btn_begin.node.active) {
            this.btn_begin.node.active = false;
          }
        }

        prepareNewGame() {
          var _this$my_info16, _this$my_info17, _this$my_info18, _this$opponent_info10;

          Tween.stopAllByTarget(this.node);
          (_this$my_info16 = this.my_info) === null || _this$my_info16 === void 0 ? void 0 : _this$my_info16.node.setPosition(new Vec3(6, -206, 0));
          (_this$my_info17 = this.my_info) === null || _this$my_info17 === void 0 ? void 0 : _this$my_info17.node.setScale(new Vec3(1, 1, 1));
          (_this$my_info18 = this.my_info) === null || _this$my_info18 === void 0 ? void 0 : _this$my_info18.resetUI();
          (_this$opponent_info10 = this.opponent_info) === null || _this$opponent_info10 === void 0 ? void 0 : _this$opponent_info10.resetUI();
          this._lastTurnCards = [];
          this.cardPooling.reset();

          if (!this.getIsHost() && this._state == GameState.WAITING) {
            var _this$tienLenSettingP4;

            if ((_this$tienLenSettingP4 = this.tienLenSettingPopup) === null || _this$tienLenSettingP4 === void 0 ? void 0 : _this$tienLenSettingP4.isAutoReady()) {
              this.sendReady();
            } else {
              this.btn_ready.node.active = true;
            }
          }

          this.tienLenSettingPopup.reset();
        }

        sendReady() {
          let dict = {};
          dict["cmd"] = GLOBAL_MESSAGE.INGAME_USER_READY;
          let data = [MessageRequest.RoomPlugin_Type, "Simms", GamePlayManager.roomID, dict];
          GameNetworkHandler.send(data);
        }

        getIsHost() {
          var _this$my_info19;

          return (_this$my_info19 = this.my_info) === null || _this$my_info19 === void 0 ? void 0 : _this$my_info19.isHost();
        }

        resetAllPlayerViewAction() {
          this._playerInfo = [];
        }

        show(fadeTime = 0.4) {
          MiniGameNodeController.getInstance().adjustPosition(GlobalVariables.TIENLEN);
          return super.show(fadeTime);
        }

      }, _defineProperty(_class3, "KEEP_MONEY", 50000), _defineProperty(_class3, "instance", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "my_info", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "opponent_info", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "userChatPopup", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "userInvitePopup", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btn_chat", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btn_exit", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btn_ready", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btn_begin", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btn_boluot", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btn_danhbai", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "spr_table", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_tables", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "spr_finishFx", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "sprFrame_finishFx", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "lbl_info", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "tienLenSettingPopup", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "cardPooling", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaiXiuSessionHistoryDiceItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "f7029/xr15C+4txvUZsFEK9", "TaiXiuSessionHistoryDiceItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let TaiXiuSessionHistoryDiceItemView = exports('default', (_dec = ccclass('TaiXiuSessionHistoryDiceItemView'), _dec(_class = (_temp = class TaiXiuSessionHistoryDiceItemView extends Component {
        constructor(...args) {
          super(...args);

          _defineProperty(this, "lowest_y", -76);
        }

        one_offset_y() {//return Math.abs((76 * 2) / 5);
        }

        show(value) {//let offset = (value - 1) * this.one_offset_y();
          //this.node.position = new cc.Vec2(this.node.position.x,this.lowest_y + offset);
        }

      }, _temp)) || _class));
      /**
       * Note: The original script has been commented out, due to the large number of changes in the script, there may be missing in the conversion, you need to convert it manually
       */
      // // Learn TypeScript:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
      // // Learn Attribute:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
      // // Learn life-cycle callbacks:
      // //  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
      // //  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
      // 
      // import { StringUtils } from "../../Utils/StringUtils";
      // 
      // const {ccclass, property} = cc._decorator;
      // 
      // @ccclass
      // export default class TaiXiuSessionHistoryDiceItemView extends cc.Component {
      //     private lowest_y = -76;
      // 
      //     private one_offset_y(){
      //         return Math.abs((76 * 2) / 5);
      //      }
      // 
      //     public show(value){
      //         let offset = (value - 1) * this.one_offset_y();
      // 
      //         this.node.position = new cc.Vec2(this.node.position.x,this.lowest_y + offset);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChipPooling.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Sprite, _decorator, Component, instantiate, Tween, UIOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Sprite = module.Sprite;
      _decorator = module._decorator;
      Component = module.Component;
      instantiate = module.instantiate;
      Tween = module.Tween;
      UIOpacity = module.UIOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "f8583UhVPhN6Y4YQzv+QzMX", "ChipPooling", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ChipPooling = exports('ChipPooling', (_dec = ccclass('ChipPooling'), _dec2 = property([Sprite]), _dec(_class = (_class2 = (_temp = class ChipPooling extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "chips", _descriptor, this);

          _defineProperty(this, "pooled_coins", []);

          _defineProperty(this, "payCoin", []);
        }

        onLoad() {}

        pool() {
          this.chips.forEach((c, i) => {
            let objs = [];

            for (let i = 0; i < 50; i++) {
              let obj = instantiate(c.node);
              obj.name = c.node.name;
              obj.active = false;
              obj.parent = this.node;
              objs.push(obj);
            }

            this.pooled_coins.push(objs);
          });
        }

        getChipAs(chip) {
          this.pooled_coins.forEach((chips, index) => {
            chips.forEach(pooled_chip => {
              if (pooled_chip == chip) {
                return this.getChip(index);
              }
            });
          });
          return null;
        }

        getChip(index) {
          if (this.pooled_coins.length <= 0) return;
          if (this.pooled_coins[index] == null || this.pooled_coins[index] == undefined || this.pooled_coins[index].length <= 0) return;
          let chips = this.pooled_coins[index].filter(c => !c.active);
          let chip = chips.length > 0 ? chips[0] : null;

          if (chip == null) {
            chip = instantiate(this.chips[index].node);
            chip.parent = this.node;
            this.pooled_coins[index].push(chip);
          }

          return chip;
        }

        onTop(coin, isPayCoin = false) {
          coin.active = true;
          coin.setSiblingIndex(this.node.children.length - 1);

          if (isPayCoin) {
            this.payCoin.push(coin);
          }
        }

        activeAll(isActive = true) {
          this.pooled_coins.forEach(p => {
            p.forEach(c => {
              c.active = isActive;
              c.name = "chip";
              Tween.stopAllByTarget(c);
              let opa = c.getComponent(UIOpacity);
              opa.opacity = 255;
              Tween.stopAllByTarget(opa);
            });
          });
          this.payCoin.forEach(p => {
            Tween.stopAllByTarget(p);
            let opa = p.getComponent(UIOpacity);
            opa.opacity = 255;
            Tween.stopAllByTarget(opa);
            p.destroy();
          });
          this.payCoin = [];
        }

      }, _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "chips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotItemView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './StringUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _defineProperty, cclegacy, Label, _decorator, Component, tween, Vec3, StringUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      tween = module.tween;
      Vec3 = module.Vec3;
    }, function (module) {
      StringUtils = module.StringUtils;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "fa588p8ahdKv7dF2tURwy9k", "JackpotItemView", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let JackpotItemView = exports('JackpotItemView', (_dec = ccclass('JackpotItemView'), _dec2 = property(Label), _dec(_class = (_class2 = (_temp = class JackpotItemView extends Component {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "lbl_jackpot", _descriptor, this);

          _defineProperty(this, "current", 0);

          _defineProperty(this, "jp_tween", null);

          _defineProperty(this, "scale_tween", null);
        }

        updateAmount(amount, time = 0.5, useScale = false) {
          // if(this.current == amount) return;
          if (this.jp_tween != null && this.jp_tween != undefined) {
            this.jp_tween.stop();
          }

          if (time > 0) {
            let obj = {
              a: this.current
            };
            this.jp_tween = tween(obj).to(time, {
              a: amount
            }, {
              progress: (start, end, current, ratio) => {
                this.lbl_jackpot.string = StringUtils.formatNumber(Math.floor(current));
                return start + (end - start) * ratio;
              }
            });
            this.jp_tween.start();
          } else {
            this.lbl_jackpot.string = StringUtils.formatNumber(Math.floor(amount));
          }

          if (useScale) {
            var _this$lbl_jackpot;

            if (this.scale_tween != null) {
              this.scale_tween.stop();
            }

            this.scale_tween = tween((_this$lbl_jackpot = this.lbl_jackpot) === null || _this$lbl_jackpot === void 0 ? void 0 : _this$lbl_jackpot.node).sequence(tween().to(0.1, {
              scale: new Vec3(1.1, 1.1, 1.1)
            }), tween().delay(0.05), tween().to(0.1, {
              scale: Vec3.ONE
            }));
            this.scale_tween.start();
          }

          this.current = amount;
        }

      }, _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbl_jackpot", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChangeAvatarPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CommonPopup.ts', './GameConfigManager.ts', './NotiView.ts', './LoadingView.ts', './Downloader.ts', './GameHTTPNetwork.ts', './ProfilesPopup.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, UITransform, _decorator, Button, Sprite, Size, systemEvent, CommonPopup, GameConfigManager, NotiView, LoadingView, Downloader, GameHTTPNetwork, ProfilesPopup;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      UITransform = module.UITransform;
      _decorator = module._decorator;
      Button = module.Button;
      Sprite = module.Sprite;
      Size = module.Size;
      systemEvent = module.systemEvent;
    }, function (module) {
      CommonPopup = module.CommonPopup;
    }, function (module) {
      GameConfigManager = module.GameConfigManager;
    }, function (module) {
      NotiView = module.default;
    }, function (module) {
      LoadingView = module.default;
    }, function (module) {
      Downloader = module.default;
    }, function (module) {
      GameHTTPNetwork = module.default;
    }, function (module) {
      ProfilesPopup = module.ProfilesPopup;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "faed6gH86BNPIwilbs8yczs", "ChangeAvatarPopup", undefined);

      const {
        ccclass,
        property
      } = _decorator;
      let ChangeAvatarPopup = exports('default', (_dec = ccclass('ChangeAvatarPopup'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(UITransform), _dec(_class = (_class2 = (_temp = class ChangeAvatarPopup extends CommonPopup {
        constructor(...args) {
          super(...args);

          _initializerDefineProperty(this, "row_1_node", _descriptor, this);

          _initializerDefineProperty(this, "row_2_node", _descriptor2, this);

          _initializerDefineProperty(this, "content", _descriptor3, this);
        }

        onLoad() {
          var _this$row_1_node, _this$row_2_node;

          super.onLoad();
          (_this$row_1_node = this.row_1_node) === null || _this$row_1_node === void 0 ? void 0 : _this$row_1_node.getComponentsInChildren(Button).forEach(x => {
            x.node.on("click", () => {
              let sprite = x.node.getComponent(Sprite);
              this.changeAvatar(sprite.name, sprite.spriteFrame);
            });
          });
          (_this$row_2_node = this.row_2_node) === null || _this$row_2_node === void 0 ? void 0 : _this$row_2_node.getComponentsInChildren(Button).forEach(x => {
            x.node.on("click", () => {
              let sprite = x.node.getComponent(Sprite);
              this.changeAvatar(sprite.name, sprite.spriteFrame);
            });
          });
        }

        fetchAvatars() {
          var _LoadingView$getInsta;

          let url = GameConfigManager.getAvatarsURL();
          (_LoadingView$getInsta = LoadingView.getInstance()) === null || _LoadingView$getInsta === void 0 ? void 0 : _LoadingView$getInsta.show();
          GameHTTPNetwork.sendGET(url, resp => {
            this.loadAvatars(resp);
          }, false, true);
        }

        loadAvatars(resp) {
          let doc = JSON.parse(resp);

          if (doc["status"] == 0) {
            var _this$row_1_node2, _this$row_2_node2;

            let items = doc["items"];
            let items_row_1 = items.filter((item, index) => index < items.length / 2);
            let items_row_2 = items.filter((item, index) => index >= items.length / 2);
            let row1_items = (_this$row_1_node2 = this.row_1_node) === null || _this$row_1_node2 === void 0 ? void 0 : _this$row_1_node2.getComponentsInChildren(Sprite);
            let row2_items = (_this$row_2_node2 = this.row_2_node) === null || _this$row_2_node2 === void 0 ? void 0 : _this$row_2_node2.getComponentsInChildren(Sprite);
            let loaded_count = 0;
            row1_items === null || row1_items === void 0 ? void 0 : row1_items.forEach((spr, index) => {
              if (index < items_row_1.length) {
                let url = items_row_1[index]["url"];
                let id = items_row_1[index]["id"];
                let sprite = spr;
                sprite.name = "" + id;
                console.log(id, sprite.name);
                Downloader.loadRemoteSpriteFrame(url, spriteFrame => {
                  sprite.node.active = true;
                  sprite.spriteFrame = spriteFrame;
                  loaded_count++;

                  if (loaded_count >= items.length) {
                    this.show();
                  }
                });
              } else {
                spr.node.active = false;
              }
            });
            row2_items === null || row2_items === void 0 ? void 0 : row2_items.forEach((spr, index) => {
              if (index < items_row_2.length) {
                let url = items_row_2[index]["url"];
                let id = items_row_2[index]["id"];
                let sprite = spr;
                sprite.name = id;
                Downloader.loadRemoteSpriteFrame(url, spriteFrame => {
                  sprite.node.active = true;
                  sprite.spriteFrame = spriteFrame;
                  loaded_count++;

                  if (loaded_count >= items.length) {
                    this.show();
                  }
                });
              } else {
                spr.node.active = false;
              }
            });
          } else {
            var _NotiView$getInstance;

            (_NotiView$getInstance = NotiView.getInstance()) === null || _NotiView$getInstance === void 0 ? void 0 : _NotiView$getInstance.showMessage("Không thể lấy avatar!");
          }
        }

        update(dt) {
          var _this$row_1_node3, _this$row_1_node3$get, _this$content, _this$content2;

          let width = (_this$row_1_node3 = this.row_1_node) === null || _this$row_1_node3 === void 0 ? void 0 : (_this$row_1_node3$get = _this$row_1_node3.getComponent(UITransform)) === null || _this$row_1_node3$get === void 0 ? void 0 : _this$row_1_node3$get.contentSize.width;
          let height = (_this$content = this.content) === null || _this$content === void 0 ? void 0 : _this$content.contentSize.height;
          (_this$content2 = this.content) === null || _this$content2 === void 0 ? void 0 : _this$content2.setContentSize(new Size(width, height));
        }

        show() {
          var _this$row_1_node4, _this$row_1_node4$get, _this$content3, _this$content4, _LoadingView$getInsta2;

          let width = (_this$row_1_node4 = this.row_1_node) === null || _this$row_1_node4 === void 0 ? void 0 : (_this$row_1_node4$get = _this$row_1_node4.getComponent(UITransform)) === null || _this$row_1_node4$get === void 0 ? void 0 : _this$row_1_node4$get.contentSize.width;
          let height = (_this$content3 = this.content) === null || _this$content3 === void 0 ? void 0 : _this$content3.contentSize.height;
          (_this$content4 = this.content) === null || _this$content4 === void 0 ? void 0 : _this$content4.setContentSize(new Size(width, height));
          super.show();
          (_LoadingView$getInsta2 = LoadingView.getInstance()) === null || _LoadingView$getInsta2 === void 0 ? void 0 : _LoadingView$getInsta2.hide();
        }

        changeAvatar(id, sprFrame) {
          let url = GameConfigManager.changeAvatarURL();
          url = url.replace("%id%", id);
          GameHTTPNetwork.sendGET(url, resp => {
            let doc = JSON.parse(resp);

            if (doc["status"] == 0) {
              systemEvent.emit(ProfilesPopup.CHANGE_AVATAR, sprFrame);
              this.hide();
            } else {
              var _NotiView$getInstance2;

              (_NotiView$getInstance2 = NotiView.getInstance()) === null || _NotiView$getInstance2 === void 0 ? void 0 : _NotiView$getInstance2.showMessage("Không thể thay đổi avatar!");
            }
          });
        }

      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "row_1_node", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "row_2_node", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/bundles", ['./CommonPopup.ts', './GameConfigManager.ts', './StringUtils.ts', './JackpotItemView.ts', './MiniGameNetworkHandler.ts', './GamePlatformManager.ts', './GameNetworkHandler.ts', './NotiView.ts', './GameUtils.ts', './GlobalVariables.ts', './LoadingView.ts', './BaseFullScreenGameView.ts', './ChipItem.ts', './ChipPanel.ts', './BlinkCmp.ts', './BauCuaBetEntry.ts', './SettingPopup.ts', './BauCuaSettingPopup.ts', './ChipPooling.ts', './BubbleChat.ts', './Downloader.ts', './PlayerView.ts', './SoiCauItemPopup.ts', './SoiCauPopup.ts', './UserChatTextItem.ts', './UserChatPopup.ts', './InvitationPlayerView.ts', './UserInvitePopup.ts', './UserOnlinePopup.ts', './BauCuaFullScreenGameView.ts', './GameHTTPNetwork.ts', './ProfilesPopup.ts', './ChangeAvatarPopup.ts', './ChangePasswordPopup.ts', './GameHistoryItemView.ts', './GameHistoryPopup.ts', './GameSettingPopup.ts', './InvitePopup.ts', './MD5Algorithm.ts', './LoginPopup.ts', './RegisterPopup.ts', './PopupController.ts', './MauBinh_CardLib.ts', './Sam_CardLib.ts', './CardItem.ts', './CardPooling.ts', './GameBaiPlayerView.ts', './TienLenSettingPopup.ts', './SamFullScreenGameView.ts', './DemLa_CardLib.ts', './TienLenFullScreenGameView.ts', './ScaleCmp.ts', './XocDiaSoiCauPopup.ts', './XocDiaFullScreenGameView.ts', './FloatStringCmp.ts', './TransitionFadeScreen.ts', './GameListView.ts', './TableItemView.ts', './TableListView.ts', './LobbyViewController.ts', './MiniGamePopup.ts', './MiniPokerMessageHandler.ts', './BaseMiniGameView.ts', './MiniPokerBetHistoryItemView.ts', './MiniPokerBetHistoryView.ts', './MiniPokerBetRankItemView.ts', './MiniPokerBetRankView.ts', './MiniPokerNoHuView.ts', './MiniPoker_SlotMachineItemView.ts', './MiniPoker_SlotMachineColumn.ts', './MiniPoker_SlotMachineCmp.ts', './MiniPokerGameView.ts', './TaiXiuGameItemView.ts', './ChatItemView.ts', './TaiXiuChatView.ts', './TaiXiuMessageHandler.ts', './DragView.ts', './BatCmp.ts', './TaiXiuBetHistoryItemView.ts', './TaiXiuBetHistoryView.ts', './TaiXiuBetRankItemView.ts', './TaiXiuBetRankView.ts', './TaiXiuPopupCmp.ts', './TaiXiuSessionAnalyticsItemView.ts', './TaiXiuSessionAnalyticsView.ts', './LineCmp.ts', './TaiXiuSessionHistorySumItemView.ts', './TaiXiuSessionHistoryView.ts', './TaiXiuGameView.ts', './BigLoadingView.ts', './KimCuongMessageHandler.ts', './MiniGameNodeDragView.ts', './MiniGameNodeController.ts', './CCMiniGameRoot.ts', './GamePlayManager.ts', './KimCuong_SlotMachineItemView.ts', './KimCuong_SlotMachineColumn.ts', './KimCuong_SlotMachineCmp.ts', './KimCuongBetHistoryDetail.ts', './KimCuongBetHistoryItemView.ts', './KimCuongBetHistoryView.ts', './KimCuongBetRankItemView.ts', './KimCuongBetRankView.ts', './KimCuongNoHuView.ts', './KimCuongGameView.ts', './KimCuongLineSelectionView.ts', './CCComponentLoader.ts', './FullScreenGameItemView.ts', './CCMiniGameCommonPopup.ts', './CCButtonLoader.ts', './MiniSlotGameItemView.ts', './SpinButtonCmp.ts', './SoundButtonCmp.ts', './CCSpriteFrameLoader.ts', './DockPanel.ts', './LineSpriteComponent.ts', './test.ts', './TaiXiuSessionHistoryResultSumItemView.ts', './TaiXiuSessionHistoryResultItemView.ts', './TaiXiuSessionHistoryDiceItemView.ts'], function () {
  'use strict';

  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/bundles', 'chunks:///_virtual/bundles'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});